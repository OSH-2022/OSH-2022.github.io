{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"USTC OSH 2022 \u8bfe\u7a0b\u4e3b\u9875 \u00b6 \u8bfe\u7a0b\u4fe1\u606f \u00b6 \u4e0a\u8bfe\u65f6\u95f4\uff1a \u6bcf\u5468\u4e00 15:55-17:30 \u548c \u6bcf\u5468\u4e09 9:45-11:20 \u6559\u5ba4\uff1a 3A407 \u8bb2\u5e08\uff1a \u90a2\u51ef \u52a9\u6559\uff1a \u660e\u5b87\u9f99 \u8521\u667a\u81fb \u8881\u4e00\u73ae \u8003\u6838\u65b9\u5f0f\uff1a\u5f00\u5377\u7b14\u8bd5 \u516c\u544a \u00b6 2022-01-22\uff1a\u6b22\u8fce\u6765\u5230 OSH 2022\uff01\u8bfe\u7a0b QQ \u7fa4\u53f7\uff1a577891686\u3002\u65b0\u540c\u5b66\u8bf7\u5728\u7fa4\u4e2d\u8054\u7cfb\u52a9\u6559\u4ee5\u52a0\u5165 GitHub \u7ec4\u7ec7 OSH-2022 \u6765\u5b8c\u6210\u4e4b\u540e\u7684\u4f5c\u4e1a\u63d0\u4ea4\u3002 2022-03-06\uff1a\u5b9e\u9a8c\u96f6\u5df2\u53d1\u5e03 2022-04-02\uff1a\u5b9e\u9a8c\u4e00\u5df2\u53d1\u5e03 2022-04-25\uff1a\u5b9e\u9a8c\u4e8c\u5df2\u53d1\u5e03\uff1b\u5b9e\u9a8c\u4e00\u52a9\u6559\u8bbe\u8ba1\u8d44\u6e90\u5df2\u516c\u5f00 \u4f5c\u4e1a \u00b6 \u7eb8\u8d28\u4f5c\u4e1a\u8981\u6c42\uff1a \u672a\u7279\u522b\u8bf4\u660e\uff0c\u63d0\u4ea4\u622a\u6b62\u65f6\u95f4\u4e3a\u6240\u8ff0\u65e5\u671f\u8bfe\u7a0b\u524d\uff1b \u7f51\u7edc\u63d0\u4ea4\u8981\u6c42\uff1a \u672a\u7279\u522b\u8bf4\u660e\uff0c\u63d0\u4ea4\u622a\u6b62\u65f6\u95f4\u4e3a\u6240\u8ff0\u65e5\u671f 23:59 \u524d\uff1b \u5e8f\u53f7 \u53d1\u5e03\u65f6\u95f4 \u8be6\u60c5\u9875\u9762 \u622a\u81f3\u65f6\u95f4 \u5e38\u89c1\u95ee\u9898 \u00b6 \u8d44\u6e90 \u00b6 \u6559\u6750\uff1a\u300a\u64cd\u4f5c\u7cfb\u7edf\u6982\u5ff5\u300b\u4e9a\u4f2f\u62c9\u7f55\u00b7\u897f\u5c14\u4f2f\u6c99\u8328\u3001\u5f7c\u5f97 B. \u9ad8\u5c14\u6587\u8457 \u90d1\u6263\u6839\u8bd1 \u673a\u68b0\u5de5\u4e1a\u51fa\u7248\u793e 201807 \u53c2\u8003\u4e66\uff1a Operating Systems Design & Implementation A.S. Tanenbaun, etc. ISBN-10: 0136386776 Prentice Hall","title":"\u9996\u9875"},{"location":"#ustc-osh-2022-\u8bfe\u7a0b\u4e3b\u9875","text":"","title":"USTC OSH 2022 \u8bfe\u7a0b\u4e3b\u9875"},{"location":"#\u8bfe\u7a0b\u4fe1\u606f","text":"\u4e0a\u8bfe\u65f6\u95f4\uff1a \u6bcf\u5468\u4e00 15:55-17:30 \u548c \u6bcf\u5468\u4e09 9:45-11:20 \u6559\u5ba4\uff1a 3A407 \u8bb2\u5e08\uff1a \u90a2\u51ef \u52a9\u6559\uff1a \u660e\u5b87\u9f99 \u8521\u667a\u81fb \u8881\u4e00\u73ae \u8003\u6838\u65b9\u5f0f\uff1a\u5f00\u5377\u7b14\u8bd5","title":"\u8bfe\u7a0b\u4fe1\u606f"},{"location":"#\u516c\u544a","text":"2022-01-22\uff1a\u6b22\u8fce\u6765\u5230 OSH 2022\uff01\u8bfe\u7a0b QQ \u7fa4\u53f7\uff1a577891686\u3002\u65b0\u540c\u5b66\u8bf7\u5728\u7fa4\u4e2d\u8054\u7cfb\u52a9\u6559\u4ee5\u52a0\u5165 GitHub \u7ec4\u7ec7 OSH-2022 \u6765\u5b8c\u6210\u4e4b\u540e\u7684\u4f5c\u4e1a\u63d0\u4ea4\u3002 2022-03-06\uff1a\u5b9e\u9a8c\u96f6\u5df2\u53d1\u5e03 2022-04-02\uff1a\u5b9e\u9a8c\u4e00\u5df2\u53d1\u5e03 2022-04-25\uff1a\u5b9e\u9a8c\u4e8c\u5df2\u53d1\u5e03\uff1b\u5b9e\u9a8c\u4e00\u52a9\u6559\u8bbe\u8ba1\u8d44\u6e90\u5df2\u516c\u5f00","title":"\u516c\u544a"},{"location":"#\u4f5c\u4e1a","text":"\u7eb8\u8d28\u4f5c\u4e1a\u8981\u6c42\uff1a \u672a\u7279\u522b\u8bf4\u660e\uff0c\u63d0\u4ea4\u622a\u6b62\u65f6\u95f4\u4e3a\u6240\u8ff0\u65e5\u671f\u8bfe\u7a0b\u524d\uff1b \u7f51\u7edc\u63d0\u4ea4\u8981\u6c42\uff1a \u672a\u7279\u522b\u8bf4\u660e\uff0c\u63d0\u4ea4\u622a\u6b62\u65f6\u95f4\u4e3a\u6240\u8ff0\u65e5\u671f 23:59 \u524d\uff1b \u5e8f\u53f7 \u53d1\u5e03\u65f6\u95f4 \u8be6\u60c5\u9875\u9762 \u622a\u81f3\u65f6\u95f4","title":"\u4f5c\u4e1a"},{"location":"#\u5e38\u89c1\u95ee\u9898","text":"","title":"\u5e38\u89c1\u95ee\u9898"},{"location":"#\u8d44\u6e90","text":"\u6559\u6750\uff1a\u300a\u64cd\u4f5c\u7cfb\u7edf\u6982\u5ff5\u300b\u4e9a\u4f2f\u62c9\u7f55\u00b7\u897f\u5c14\u4f2f\u6c99\u8328\u3001\u5f7c\u5f97 B. \u9ad8\u5c14\u6587\u8457 \u90d1\u6263\u6839\u8bd1 \u673a\u68b0\u5de5\u4e1a\u51fa\u7248\u793e 201807 \u53c2\u8003\u4e66\uff1a Operating Systems Design & Implementation A.S. Tanenbaun, etc. ISBN-10: 0136386776 Prentice Hall","title":"\u8d44\u6e90"},{"location":"faq/","text":"\u5e38\u89c1\u95ee\u9898 \u00b6 \u5f80\u5e74\u7684 FAQ \u4ea6\u53ef\u4f5c\u53c2\u8003\uff0c\u53ef\u4ee5\u53c2\u89c1 \u5b9e\u9a8c\u96f6\u4e2d\u7684\u63cf\u8ff0 \u5230\u5f80\u5e74\u4e3b\u9875\u8fdb\u884c\u67e5\u770b\u3002 \u5b9e\u9a8c\u96f6 \u00b6 Q1\uff1a\u53ef\u4ee5\u4f7f\u7528 WSL/Vlab \u5b8c\u6210\u5b9e\u9a8c\u5417\uff1f A1\uff1a\u53c2\u89c1 \u5b9e\u9a8c\u96f6\u4e2d\u7684\u4e0d\u540c\u5e73\u53f0\u517c\u5bb9\u6027\u63cf\u8ff0 \u5b9e\u9a8c\u4e8c \u00b6 Q1\uff1astrace \u7b2c\u4e00\u884c\u7684 exec* \u6ca1\u6709 trace \u5230\u600e\u4e48\u529e\uff1f A1\uff1a\u53ef\u4ee5\u6599\u60f3\u5230\uff0c\u7b2c\u4e00\u884c exec \u4e4b\u540e\u9700\u8981 trace \u7684\u7a0b\u5e8f\u624d\u542f\u52a8\u4e86\u3002\u7b2c\u4e00\u884c\u7684 exec \u4e0d\u8003\u8651\u5373\u53ef\u3002 Q2\uff1a\u4e3a\u4ec0\u4e48\u6211\u7684 getline/cin \u8bfb\u4e0d\u5230\u4e1c\u897f\uff1f A2\uff1a\u5148\u68c0\u67e5\u4e00\u4e0b\u770b\u5b50\u8fdb\u7a0b\u662f\u4e0d\u662f\u5957\u4e86\u4e24\u5c42\u3002 Q3\uff1aCtrl+C \u8bfb\u4e0d\u5230\uff1f/Ctrl+D \u6ca1\u6cd5\u9a6c\u4e0a\u8d77\u6548 A3\uff1aCtrl+C \u53d1 signal\uff0c\u800c Ctrl+D \u5219\u662f\u8f93\u5165 EOF\u3002","title":"FAQ"},{"location":"faq/#\u5e38\u89c1\u95ee\u9898","text":"\u5f80\u5e74\u7684 FAQ \u4ea6\u53ef\u4f5c\u53c2\u8003\uff0c\u53ef\u4ee5\u53c2\u89c1 \u5b9e\u9a8c\u96f6\u4e2d\u7684\u63cf\u8ff0 \u5230\u5f80\u5e74\u4e3b\u9875\u8fdb\u884c\u67e5\u770b\u3002","title":"\u5e38\u89c1\u95ee\u9898"},{"location":"faq/#\u5b9e\u9a8c\u96f6","text":"Q1\uff1a\u53ef\u4ee5\u4f7f\u7528 WSL/Vlab \u5b8c\u6210\u5b9e\u9a8c\u5417\uff1f A1\uff1a\u53c2\u89c1 \u5b9e\u9a8c\u96f6\u4e2d\u7684\u4e0d\u540c\u5e73\u53f0\u517c\u5bb9\u6027\u63cf\u8ff0","title":"\u5b9e\u9a8c\u96f6"},{"location":"faq/#\u5b9e\u9a8c\u4e8c","text":"Q1\uff1astrace \u7b2c\u4e00\u884c\u7684 exec* \u6ca1\u6709 trace \u5230\u600e\u4e48\u529e\uff1f A1\uff1a\u53ef\u4ee5\u6599\u60f3\u5230\uff0c\u7b2c\u4e00\u884c exec \u4e4b\u540e\u9700\u8981 trace \u7684\u7a0b\u5e8f\u624d\u542f\u52a8\u4e86\u3002\u7b2c\u4e00\u884c\u7684 exec \u4e0d\u8003\u8651\u5373\u53ef\u3002 Q2\uff1a\u4e3a\u4ec0\u4e48\u6211\u7684 getline/cin \u8bfb\u4e0d\u5230\u4e1c\u897f\uff1f A2\uff1a\u5148\u68c0\u67e5\u4e00\u4e0b\u770b\u5b50\u8fdb\u7a0b\u662f\u4e0d\u662f\u5957\u4e86\u4e24\u5c42\u3002 Q3\uff1aCtrl+C \u8bfb\u4e0d\u5230\uff1f/Ctrl+D \u6ca1\u6cd5\u9a6c\u4e0a\u8d77\u6548 A3\uff1aCtrl+C \u53d1 signal\uff0c\u800c Ctrl+D \u5219\u662f\u8f93\u5165 EOF\u3002","title":"\u5b9e\u9a8c\u4e8c"},{"location":"lab0/","text":"\u5b9e\u9a8c\u96f6 \u00b6 \u672c\u5b66\u671f\u7684\u5b9e\u9a8c\u8bbe\u8ba1 \u00b6 \u4e0d\u51fa\u610f\u6599\u7684\u8bdd\uff0c\u672c\u5b66\u671f\u7684\u524d\u4e09\u4e2a\u5b9e\u9a8c\u548c\u524d\u51e0\u5c4a\u76f8\u540c\uff0c\u4f9d\u6b21\u4e3a\u88c1\u526a Linux \u5185\u6838\u3001\u7f16\u5199 Shell \u7a0b\u5e8f\u3001\u5b8c\u6210\u591a\u4eba\u804a\u5929\u5ba4\uff0c\u4e0d\u8fc7\u90e8\u5206\u5b9e\u9a8c\u4f1a\u5728\u4e4b\u524d\u7684\u8bbe\u8ba1\u57fa\u7840\u4e0a\u6709\u6240\u8c03\u6574\u548c\u4f18\u5316\u3002\u7b2c\u56db\u6b21\u5b9e\u9a8c\u4e3b\u9898\u4ecd\u5904\u4e8e\u5f85\u5b9a\u72b6\u6001\uff0c\u4f1a\u5728\u4e4b\u540e\u7684\u8bfe\u7a0b\u4e2d\u786e\u5b9a\u4e0b\u6765\u3002\u5177\u4f53\u7684\u5b9e\u9a8c\u7ec6\u8282\u540c\u5b66\u4eec\u53ef\u4ee5\u53c2\u8003\u524d\u51e0\u6b21\u7684\u8bfe\u7a0b\u5b9e\u9a8c\u5b89\u6392\uff1a OSH-2021 \u3001 OSH-2020 \u7b49 \uff08\u6ce8\u610f\u5230\u94fe\u63a5\u7684\u89c4\u5f8b\u4e86\u5417 :3\uff09\u3002\u6240\u6709\u5b9e\u9a8c\u90fd\u53ef\u4ee5\u4f7f\u7528 C/C++ \u6216\u662f Rust \u5b8c\u6210\uff0c\u4f46\u662f\u4e0d\u80fd\u7528 Go\uff08\u7b80\u76f4\u662f\u4f5c\u5f0a.jpg\uff09\u3002 \u5b9e\u9a8c\u8003\u5bdf\u8303\u56f4 \u00b6 \u524d\u4e09\u6b21\u5b9e\u9a8c\u7684\u8003\u5bdf\u5185\u5bb9\u548c\u6280\u80fd\u8981\u6c42\u5982\u4e0b\uff1a \u5b9e\u9a8c \u4e3b\u8981\u5185\u5bb9 \u8003\u5bdf\u77e5\u8bc6 \u6240\u9700\u6280\u80fd \u5b9e\u9a8c\u4e00 \u88c1\u526a Linux \u5185\u6838 Linux \u542f\u52a8\u8fc7\u7a0b\u3001\u5185\u6838\u6a21\u5757 make\u3001makefile \u57fa\u7840 \u5b9e\u9a8c\u4e8c \u7f16\u5199 Shell \u7a0b\u5e8f fork \u7b49\u7cfb\u7edf\u8c03\u7528\u3001I/O \u91cd\u5b9a\u5411\u3001\u591a\u7ebf\u7a0b\u3001\u4e2d\u65ad \u591a\u7ebf\u7a0b\u7f16\u7a0b\u3001\u4f7f\u7528 syscall\u3001\u4e2d\u65ad\u5904\u7406 \u5b9e\u9a8c\u4e09 \u7f16\u5199\u591a\u4eba\u804a\u5929\u5ba4 \u8fdb\u7a0b\u8c03\u5ea6\u3001socket \u590d\u7528\u3001TCP \u76f8\u5173\u77e5\u8bc6 \u591a\u7ebf\u7a0b\u3001\u9762\u5411 socket \u7f16\u7a0b\u3001I/O \u76f8\u5173 syscall \u5b9e\u9a8c\u6240\u8003\u5bdf\u7684\u77e5\u8bc6\u548c\u8bfe\u7a0b\u8fdb\u5ea6\u540c\u6b65\uff0c\u53ef\u4ee5\u5148\u8ddf\u7740\u8bfe\u7a0b\u5b66\u4e60\uff0c\u4e0d\u8fc7\u6240\u9700\u7684\u7f16\u7a0b\u6280\u80fd\u53ef\u80fd\u9700\u8981\u9760\u81ea\u5df1\u638c\u63e1\u3002 Linux \u5b9e\u9a8c\u73af\u5883 \u00b6 OSH \u51e0\u4e4e\u6240\u6709\u5b9e\u9a8c\u90fd\u9700\u8981\u5728 Linux \u5e73\u53f0\u4e0a\u5b8c\u6210\u3001\u5b9e\u73b0\uff0c\u6240\u4ee5\u672c\u8282\u671f\u671b\u4f60\u6709\u4e00\u4e2a\u53ef\u7528\u7684 Linux \u5de5\u4f5c\u73af\u5883\uff08\u4e0d\u9650\u4e8e\u672c\u5730\uff09\u548c\u57fa\u672c\u7684 Linux \u4f7f\u7528\u80fd\u529b\u3002\u5982\u679c\u4f60\u662f\u4e00\u4e2a\u719f\u7ec3\u7684 Linux \u7528\u6237\uff0c\u4f60\u53ef\u4ee5\u8df3\u8fc7\u672c\u8282\u3002 \u5982\u679c\u4f60\u662f\u7b2c\u4e00\u6b21\u63a5\u89e6 Linux\uff0c\u4f60\u53ef\u4ee5\u5728 USTC Vlab \u4e0a\u5f97\u5230\u4e00\u4e2a Linux \u7684\u5b9e\u9a8c\u73af\u5883\uff08\u6ce8\u610f\uff1a\u8fd9\u4e0d\u662f\u865a\u62df\u673a\uff0c\u662f\u4e00\u4e2a LXC \u5bb9\u5668\uff0c \u53ef\u80fd \u6709\u90e8\u5206\u5b9e\u9a8c\u65e0\u6cd5\u5728\u5176\u4e0a\u9762\u5b8c\u6210\uff09\u3002 \u5982\u679c\u4f60\u5185\u5b58\u5145\u8db3\u3001\u6216\u8005\u4e0d\u592a\u60f3\u5728\u7269\u7406\u673a\u4e0a\u5b89\u88c5 Linux\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u4f7f\u7528\u865a\u62df\u673a\u8fd0\u884c Linux\u3002\u5177\u4f53\u53ef\u4ee5\u53c2\u7167 \u5728 Windows \u4e2d\u4f7f\u7528\u865a\u62df\u673a\uff08By iBug\uff09 \u3001 \u5728 macOS \u4e2d\u4f7f\u7528\u865a\u62df\u673a\uff08By Taoky\uff09 \u8fd9\u4e24\u7bc7\u6587\u7ae0\u3002 Linux \u6700\u57fa\u672c\u7684\u4f7f\u7528\u4e5f\u53ef\u4ee5\u4ece LUG \u7684 Linux 101 \u6559\u7a0b \u5f00\u59cb\u5b66\u4e60\uff08 \u5982\u679c\u6ca1\u6709\u65f6\u95f4\u4e5f\u8bf7\u770b\u4e00\u4e0b\u7b2c\u4e09\u7ae0\u7684\u6587\u4ef6\u64cd\u4f5c\u3001\u7b2c\u516d\u7ae0\u7684\u91cd\u5b9a\u5411\u548c\u7b2c\u4e03\u7ae0 Linux \u4e0a\u7684\u7f16\u7a0b \uff09\u3002 \u5982\u679c\u60f3\u4e86\u89e3\u66f4\u591a\u6709\u5173 Linux \u7684\u6280\u5de7\uff0c\u53ef\u4ee5\u770b Debian \u6559\u7a0b \u6216\u8005 Arch Linux \u6587\u7ae0\u7d22\u5f15 \u3002 \u4e0d\u540c\u5e73\u53f0\u517c\u5bb9\u6027 \u00b6 \u7531\u4e8e\u65e0\u6cd5\u786e\u5b9a\u5404\u4e2a\u5b9e\u9a8c\u5168\u8c8c\uff0c\u76ee\u524d\u52a9\u6559\u65e0\u6cd5 \u4fdd\u8bc1 \u975e\u8f6f\u4ef6 Linux \u865a\u62df\u673a\u7684\u5e73\u53f0\uff0c\u5982 WSL1/2\u3001BSD\u3001Vlab\uff0c\u80fd\u591f\u5b8c\u6210\u6240\u6709\u7684\u5b9e\u9a8c\u3002 \u4f46\u6211\u4eec\u5728\u8bbe\u8ba1\u5b9e\u9a8c\u65f6\u5c06\u5c3d\u53ef\u80fd\u8003\u8651\u5230\u4e0d\u540c\u5e73\u53f0\u4e0b\u7684\u517c\u5bb9\u6027\u95ee\u9898\uff0c\u5e76\u5c06\u7b2c\u4e00\u65f6\u95f4\u66f4\u65b0\u4e0b\u65b9\u7684\u517c\u5bb9\u6027 tips \u914d\u5408\u516c\u544a\u4f5c\u4e3a\u63d0\u9192\uff1a \u5e73\u53f0 \u5b9e\u9a8c \u51fa\u9519\u73b0\u8c61 \u539f\u56e0\u5206\u6790 \u89e3\u51b3\u65b9\u6848 \u8fd9\u91cc\u6709\u4e00\u4e9b\u57fa\u672c\u5206\u6790\uff1aWSL1\uff08\u5373 WSL \u521d\u7248\uff09\u662f\u5fae\u8f6f\u9b54\u6539\u7684\u5185\u6838\uff0c\u6ca1\u6709\u5b9e\u73b0\u5b8c\u6574\u7684 cgroups \u548c IPC\uff0c\u5982 fakeroot \u4e5f\u4e0d\u80fd\u6b63\u5e38\u4f7f\u7528\uff0c\u53ef\u80fd\u5bf9\u5b9e\u9a8c\u6709\u5f71\u54cd\uff1bWSL2 \u662f\u4f7f\u7528 Hyper-V \u865a\u62df\u673a\u5b9e\u73b0\u3001\u4f7f\u7528\u4e86\u5b8c\u6574\u7684\u5185\u6838\uff0c \u5e94\u8be5 \u4e0d\u4f1a\u5e72\u6270\u5230\u5b9e\u9a8c\u7684\u8fdb\u884c\u3002\u300cFreeBSD \u63d0\u4f9b\u4e86 Linux 32-bit \u4e8c\u8fdb\u5236\u7684\u517c\u5bb9\uff0c\u4f46\u662f\u4e0d\u652f\u6301 64-bit \u7684 Linux \u4e8c\u8fdb\u5236\u7a0b\u5e8f\u300d\uff0c \u9700\u53c2\u8003\u5b9e\u9645\u4f7f\u7528\u72b6\u51b5 \u3002 \u7f16\u7a0b\u8bed\u8a00\u8981\u6c42 \u00b6 \u5982\u5b9e\u9a8c\u8bbe\u8ba1\u4e2d\u6240\u8ff0\uff0c\u672c\u8f6e\u5b9e\u9a8c\u5982\u65e0\u7279\u6b8a\u58f0\u660e\u5747\u5141\u8bb8\u4f7f\u7528 C\u3001C++\u3001Rust \u5176\u4e2d\u4efb\u610f\u4e00\u79cd\u8bed\u8a00\u5b8c\u6210\u3002 \u5728\u4e0b\u9762\u51e0\u4e2a\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u7b80\u5355\u4ecb\u7ecd\u9700\u8981\u638c\u63e1\u6216\u662f\u4e86\u89e3\u7684 C\u3001C++\u3001Rust \u8bed\u8a00\u77e5\u8bc6\u3002 \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u4e9b\u77e5\u8bc6\u5e76\u4e0d\u4e00\u5b9a\u4f1a\u5728\u5b9e\u9a8c\u4e2d\u7528\u5230\uff0c\u4f46\u662f\u7406\u89e3\u5b83\u4eec\u6216\u8bb8\u80fd\u591f\u6307\u5bfc\u4f60\u7684\u5b9e\u9645\u5f00\u53d1\u8fc7\u7a0b\u5e76\u51cf\u5c11\u5728\u5404\u4e2a\u8bed\u8a00\u6587\u6863\u4e2d\u63a2\u7d22\u7684\u65f6\u95f4\u3002 C \u7684\u8981\u6c42 \u00b6 \u4e86\u89e3 C99 \u6807\u51c6\u4e0b\u51e0\u4e4e\u6240\u6709\u7684 C \u7528\u6cd5\uff0c\u8fd9\u662f\u8003\u8651\u5230 C \u7684\u6807\u51c6\u8bed\u8a00\u7279\u6027\u5e76\u4e0d\u592a\u591a\uff0c\u66f4\u8fdb\u9636\u7684\u7528\u6cd5\u4e5f\u66f4\u503e\u5411\u4e8e\u4f9d\u8d56\u7f16\u8bd1\u5668\u7279\u6027\u6216\u662f\u6807\u51c6\u7528\u6cd5\u7684\u5de7\u7528\uff1b \u4e86\u89e3\u57fa\u672c\u7684\u5b8f\u77e5\u8bc6\uff0c\u4f8b\u5982\u5b8f\u51fd\u6570\u4e2d\u53c2\u6570\u4f7f\u7528\u65f6\u9700\u8981\u62ec\u53f7\u5305\u88f9\uff0c\u8fd9\u662f\u56e0\u4e3a\u8c03\u7528 Linux API \u65f6\u9700\u8981\u7528\u5230\u5b8f\uff1b \u638c\u63e1\u67e5\u8be2 Linux API \u6587\u6863\u7684\u65b9\u6cd5\uff0c\u65e0\u8bba\u662f\u4f7f\u7528 man tldr \u6216\u662f\u76f4\u63a5\u67e5\u770b\u7f51\u9875\u7248 man \u6587\u6863; C++ \u7684\u8981\u6c42 \u00b6 \u638c\u63e1\u57fa\u672c\u7684 C \u7528\u6cd5\uff1b \u5b8f\uff0c\u5982 C \u8981\u6c42\u6240\u8ff0\uff1b Linux API \u6587\u6863\uff0c\u5982 C \u8981\u6c42\u6240\u8ff0; \u4e86\u89e3\u4e00\u4e9b Morden C++ \u7684\u7528\u6cd5\uff0c\u53ef\u4ee5\u4e3a\u4f60\u51cf\u5c11\u7f16\u7a0b\u5de5\u4f5c\u91cf\uff1b \u5173\u4e8e Modern C++ \u5982\u679c\u4f60\u9009\u62e9\u4f7f\u7528 C++ \u5b8c\u6210\u5b9e\u9a8c\uff0c\u90a3\u4e48\u8bf7\u4e0d\u8981\u5c06 C++ \u4ee3\u7801\u5199\u5f97\u5b9b\u5982 C \u4e00\u6837\u2014\u2014Modern \u7684\u3001\u73b0\u4ee3\u7684\u3001C++11 \u6807\u51c6\u540e\u7684 C++ \u589e\u6dfb\u4e86\u4f17\u591a\u5f3a\u6709\u529b\u7684\u5de5\u5177\uff0c\u80fd\u591f\u5e2e\u52a9\u4f60\u4ee5\u66f4\u9ad8\u6548\u3001\u66f4\u7b80\u6d01\u7684\u624b\u6bb5\u8fbe\u6210\u76ee\u6807\u3002 \u5982\u9700\u5168\u65b9\u4f4d\u7684\u4e86\u89e3 Modern C++\uff0c\u63a8\u8350\u9605\u8bfb\u300aA Tour of C++\u300b\u4ee5\u53ca\u8fdb\u9636\u7684\u4f8b\u5982\u300aModern Effective C++\u300b\u7b49\u4e66\u7c4d\uff0c\u5176\u4e2d\u8be6\u7ec6\u8bb2\u89e3\u4e86 Modern C++ \u4e2d\u7684\u4e00\u4e9b\u8bbe\u8ba1\u7406\u5ff5\u548c\u6700\u4f73\u5b9e\u8df5\u3002 \u989d\u5916\u7684\u6211\u4eec\u4e5f\u7ed9\u51fa\u4e00\u4e9b tips\uff0c\u6765\u5e2e\u52a9\u4f60\u5c3d\u5feb\u5730\u4e86\u89e3\u4e00\u4e9b C++ \u5de5\u5177\uff08\u5982 STL\uff09\uff0c\u4ee5\u53ca\u9610\u8ff0\u90e8\u5206 Modern C++ \u6982\u5ff5\uff0c\u6216\u662f\u534f\u52a9\u56de\u907f\u56f0\u60d1\u4e4b\u5904\uff1a \u4e0d\u5fc5\u4f7f\u7528\u6808\u4e0a\u7684 int a[12] \u6216\u662f\u81ea\u884c new int[12] \u6765\u8fdb\u884c\u5806\u4e0a\u5206\u914d\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 std::vector \uff1b std::string \u4fdd\u8bc1\u5185\u90e8\u7a7a\u95f4\u8fde\u7eed\uff0c\u56e0\u800c\u53ef\u4ee5\u914d\u5408 s.resize() \u6539\u53d8\u5185\u90e8\u7a7a\u95f4\u5927\u5c0f\uff0c\u5e76\u7528 s.c_str() \u6216\u662f &s[0] \u8fdb\u884c\u4e0d\u53ef\u53d8\u6216\u662f\u53ef\u53d8\u8bbf\u95ee\uff0c\u53ef\u4ee5\u4ee3\u66ff chat buf[N] \uff1b <memory> \u5982 shared_ptr \u53ef\u4ee5\u5b9e\u73b0\u667a\u80fd\u6307\u9488\uff0c\u81ea\u52a8\u5728\u5408\u9002\u7684\u65f6\u523b\u91ca\u653e\u8d44\u6e90\uff0c\u5e76\u5141\u8bb8\u50cf\u4e00\u4e2a\u6307\u9488\u4e00\u6837\u5ec9\u4ef7\u5730\u62f7\u8d1d\uff0c\u53ef\u4ee5\u914d\u5408 std::thread \u7b49\u4f7f\u7528\uff1b std::string \u7f3a\u5c11 split \u529f\u80fd\uff0c\u4f46\u7f51\u7edc\u4e0a\u6709 \u4f17\u591a\u73b0\u6210\u7684\u5b9e\u73b0 \uff1b Rust \u7684\u8981\u6c42 \u00b6 \u5173\u4e8e Rust \u914d\u7f6e\u73af\u5883\u7684\u6559\u7a0b\u53ef\u4ee5\u5728 \u5b98\u7f51\u5b89\u88c5\u754c\u9762 \u67e5\u770b\u3002 \u800c\u76f8\u5e94\u7684\u8be6\u7ec6\u8bed\u8a00\u6559\u7a0b\u4e5f\u53ef\u4ee5\u5728 \u5b98\u7f51\u6559\u7a0b\u6c47\u603b\u754c\u9762 \u6309\u9700\u67e5\u9605\u3002 \u5176\u4e2d\u91cd\u70b9\u662f Rust Book \u8fd9\u4efd\u6559\u7a0b\uff0c\u5176\u5728\u9ad8\u4f4e\u5c42\u6b21\u4e0a\u90fd\u5bf9 Rust \u8fdb\u884c\u4e86\u8be6\u7ec6\u7684\u89e3\u6790\u3002 \u800c\u5982\u679c\u4f60\u4e4b\u524d\u53ea\u4e86\u89e3\u8fc7 C \u5f00\u53d1\uff0c\u53ef\u4ee5\u7740\u91cd\u5173\u6ce8 Rust Book \u4e2d\u7684\u4ee5\u4e0b\u6982\u5ff5\uff1a Ownership\uff0clifetime\uff0cborrow\uff0c\u8fd9\u4e9b\u662f Rust \u6700\u6838\u5fc3\u7684\u6982\u5ff5\u4e4b\u4e00\uff1b \u5bf9\u5e94\u7ae0\u8282\u662f Understanding Ownership \u548c Validating References with Lifetimes Cargo \u7684\u4f7f\u7528\uff0c\u4ece\u800c\u5b8c\u6210 Rust \u7684\u4f9d\u8d56\u7ba1\u7406\u53ca\u7f16\u8bd1\u7b49\u5de5\u4f5c\uff1b \u667a\u80fd\u6307\u9488\uff08smart pointer\uff09\uff0cC++ <memory> \u5e93\u4e2d\u4e5f\u6709\u76f8\u4f3c\u5b9e\u73b0\uff1b \u5e76\u53d1\u7f16\u7a0b\uff0cC++ <thread> <mutex> <condition_variable> \u7b49\u5e93\u4e2d\u4e5f\u6709\u76f8\u4f3c\u5b9e\u73b0\uff1b \u51fd\u6570\u5f0f\u7f16\u7a0b\uff08functional programming\uff09\uff0c\u5982 map \u7684\u7528\u6cd5\uff1b \u6a21\u5f0f\u5339\u914d\uff08pattern matching\uff09\uff0c\u5982 match \u548c if let \u7684\u7528\u6cd5\uff1b \u57fa\u672c\u7684 unsafe Rust \u7528\u6cd5\uff0c\u53ef\u80fd\u4f1a\u5728\u8c03\u7528\u5916\u90e8\u5e93\u65f6\u7528\u5230\uff1b async Rust\uff0c\u53ef\u80fd\u4f1a\u5728 coroutine \u76f8\u5173\u7684\u5b9e\u9a8c\u4e2d\u7528\u5230\uff1b \u9519\u8bef\u5904\u7406\uff08error handling\uff09\uff0cRust \u9519\u8bef\u5904\u7406\u4e0e Go \u6709\u7c7b\u4f3c\u4e4b\u5904\uff0c\u5982\u6709\u7ecf\u9a8c\u53ef\u4ee5\u5bf9\u7167\u5b66\u4e60\uff0c\u4f46\u672c\u6b21\u5b9e\u9a8c\u5e94\u8be5\u4e0d\u4f1a\u5728\u9519\u8bef\u5904\u7406\u4e0a\u6709\u8f83\u9ad8\u8981\u6c42\uff0c\u628a\u63e1\u6982\u5ff5\u5373\u53ef\uff1b Traits\uff08\u6709\u8bd1\u4f5c\u7279\u8d28\u7684\uff09\uff0c\u4f46\u672c\u6b21\u5b9e\u9a8c\u5e94\u8be5\u4e0d\u4f1a\u6d89\u53ca\u8fc7\u591a\u6216\u8fc7\u6df1\uff1b \u5176\u4ed6\u7684\u4f8b\u5982 Rust by Example \u4e5f\u662f\u5f88\u4f18\u8d28\u7684\u6559\u7a0b\uff0c\u4e5f\u80fd\u8ba9\u4f60\u8fc5\u901f\u627e\u5230\u81ea\u5df1\u6240\u9700\u8981\u7684\u5199\u6cd5\u3002 \u5b9e\u9a8c\u6d41\u7a0b\u4e2d\u6211\u4eec\u5728\u81ea\u613f\u7684\u57fa\u7840\u4e0a \u9f13\u52b1 \u4f7f\u7528 Rust \u8bed\u8a00\uff0c\u4f46\u4e0d\u4f1a\u505a\u8fdb\u4e00\u6b65\u7684\u8981\u6c42\u3002 \u5982\u679c\u4f60\u9009\u62e9\u5728\u5b9e\u9a8c\u4e2d\u4f7f\u7528 Rust \u8bed\u8a00\uff0c\u4f60\u4f9d\u7136\u53ef\u4ee5\u4ece\u52a9\u6559\u5904\u83b7\u53d6\u4e00\u4e9b\u8bed\u8a00\u4f7f\u7528\u4e0a\u7684\u57fa\u7840\u5e2e\u52a9\uff0c\u5e76\u4e0e\u5176\u4ed6\u540c\u5b66\u5728\u540c\u4e00\u6807\u51c6\u4e0b\u8fdb\u884c\u8bc4\u6d4b\u3002 \u5b9e\u9a8c\u4e2d\u7684\u4f18\u7f3a\u70b9 \u00b6 \u9009\u62e9 Rust \u53ef\u80fd\u4f1a\u5728\u672c\u8f6e\u5b9e\u9a8c\u4e2d\u9047\u89c1\u4ee5\u4e0b\u4f18\u7f3a\u70b9\uff1a \u4f18\u70b9\uff1a Rust \u7684\u57fa\u7840\u5e93\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u6bd4 C++ \u7684\u57fa\u7840\u5e93\u66f4\u5168\u9762\u800c\u66f4\u6613\u7528\uff1b Rust \u7684\u5185\u5b58\u5b89\u5168\u4fdd\u8bc1\u53ef\u4ee5\u5728\u6700\u5927\u7a0b\u5ea6\u4e0a\u8ba9\u4f60\u907f\u514d\u9047\u5230\u96be\u4ee5 debug \u7684 segmentation fault \u95ee\u9898\uff1b Rust \u5bf9\u4e8e\u4e00\u4e9b\u6bd4\u8f83\u73b0\u4ee3\u7684\u6280\u672f\uff0c\u4f8b\u5982 coroutine\uff0c\u6709\u76f8\u5bf9\u66f4\u597d\u7684\u652f\u6301\uff0c\u5728\u5b9e\u9a8c\u4e2d\u9700\u8981\u5b9e\u73b0\u7c7b\u4f3c\u60c5\u51b5\u65f6\u4f1a\u66f4\u65b9\u4fbf; \u7f3a\u70b9\uff1a Rust \u7684\u5b66\u4e60\u66f2\u7ebf\u7a0d\u663e\u9661\u5ced\uff0c\u5c24\u5176\u662f\u4ece\u539f\u6c41\u539f\u5473\u7684 C \u51fa\u53d1\u7684\u8bdd\uff1b Rust \u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528 Linux API\uff08\u7531\u4f17\u591a C header \u6587\u4ef6\u63d0\u4f9b\uff09\uff0c\u4e0b\u6587\u6211\u4eec\u5c06\u8be6\u7ec6\u8ba8\u8bba\u8fd9\u4e2a\u95ee\u9898\uff1b \u5916\u90e8\u5e93\u7684\u8981\u6c42 \u00b6 \u5982\u4f18\u7f3a\u70b9\u4e2d\u6240\u8a00\uff0c\u5c3d\u7ba1 Rust \u6807\u51c6\u5e93\u76f8\u5bf9\u8f83\u4e30\u5bcc\uff0c\u4f46\u9700\u8981\u8c03\u7528\u7279\u5b9a Linux API \u65f6\uff0cLinux \u63d0\u4f9b\u7684\u662f C header \u6587\u4ef6\u3002 \u5c3d\u7ba1 Rust \u53ef\u4ee5\u5229\u7528 FFI \u548c binding \u751f\u6210\u5229\u7528\u8fd9\u4e9b C header \u6587\u4ef6\u5b8c\u6210\u76f8\u5173\u8c03\u7528\uff0c\u4f46\u662f\u64cd\u4f5c\u592a\u8fc7\u7e41\u6742\u800c\u65e0\u5fc5\u8981\u3002 \u6240\u4ee5\u5982\u65e0\u7279\u5730\u58f0\u660e\uff0c\u6211\u4eec\u9ed8\u8ba4\u5141\u8bb8\u4f7f\u7528 Rust \u8bed\u8a00\u65f6\u8c03\u7528\u4ee5\u4e0b\u8fd9\u4e9b\u5916\u90e8\u5e93\uff08\u540e\u7eed\u53ef\u80fd\u4f1a\u589e\u5145\u6b64\u5217\u8868\uff0c\u4f46\u4e0d\u4f1a\u5220\u51cf\uff09\uff1a nix libc \u5982\u4f60\u4e0d\u6ee1\u8db3\u4e8e\u8fd9\u4e9b\u5916\u90e8\u5e93\u3001\u5e0c\u671b\u4f7f\u7528\u5176\u4ed6\u5916\u90e8\u5e93\u65f6\uff0c\u8bf7\u5c3d\u91cf\u63d0\u524d\u8be2\u95ee\u52a9\u6559\u3002 \u65e0\u8bba\u662f\u5426\u63d0\u524d\u8be2\u95ee\uff0c\u5728\u6700\u540e\u9a8c\u6536\u5b9e\u9a8c\u65f6\uff0c\u52a9\u6559\u90fd\u4f1a\u53c2\u8003\u4ee5\u4e0b\u6761\u4ef6\u5bf9\u9664\u4e0a\u8ff0\u5217\u8868\u4ee5\u5916\u7684\u5916\u90e8\u5e93\u8fdb\u884c\u8bc4\u5b9a\uff1a \u6b64\u5916\u90e8\u5e93\u662f\u5426\u4ec5\u662f Linux C API FFI\uff1f\u5982\u662f\uff0c\u5219\u5141\u8bb8\uff1b \u6b64\u5916\u90e8\u5e93\u662f\u5426\u4ec5\u662f Linux C API FFI \u5e76\u8fdb\u884c\u4e86 safe wrap\uff1f\u5982\u662f\uff0c\u5219\u5141\u8bb8\uff1b \u6b64\u5916\u90e8\u5e93\u4f7f\u7528\u65b9\u6cd5\u662f\u5426\u4e0e\u539f\u672c C \u4e2d\u8c03\u7528\u7684\u65b9\u6cd5\u76f8\u7c7b\u4f3c\uff1f\u5982\u662f\uff0c\u53c2\u8003\u76f8\u4f3c\u7a0b\u5ea6\u5141\u8bb8\uff1b \u6b64\u5916\u90e8\u5e93\u662f\u5426\u7834\u574f\u4e86\u539f\u672c\u7684\u5b9e\u9a8c\u8bbe\u8ba1\u76ee\u6807\uff1f\u5982\u662f\uff0c\u5219\u7981\u6b62\uff1b\u5982\u5426\uff0c\u53c2\u8003\u548c\u5b9e\u9a8c\u76ee\u6807\u76f8\u5173\u7a0b\u5ea6\u5141\u8bb8\uff1b \u5982\u679c\u4e00\u4e2a\u5916\u90e8\u5e93\u88ab\u7981\u6b62\uff0c\u5b9e\u9a8c\u4e2d\u5bf9\u5e94\u9879\u76ee\u5c06\u53ef\u80fd\u88ab\u916c\u60c5\u6263\u5206\u3002 \u4f7f\u7528 gdb debug \u00b6 \u5728\u672c\u5b66\u671f\u7684\u5b9e\u9a8c\u4e2d\uff0c\u4f60\u53ef\u80fd\u4f1a\u5199\u51fa\u5404\u5f0f\u5404\u6837\u7684 bug\uff0c\u7528\u597d debugger \u5f80\u5f80\u53ef\u4ee5\u5927\u5e45\u63d0\u5347\u4f60\u7684\u8c03\u8bd5\u6548\u7387\u3002\u672c\u8282\u4f1a\u5bf9 C/C++ \u5e38\u7528\u7684 gdb (GNU Project debugger) \u8fdb\u884c\u4ecb\u7ecd\u3002 \u4f8b\u5982\uff0c\u5728\u4ee5\u4e0b\u7684\u7a0b\u5e8f\u4e2d\uff0c\u8fd0\u884c\u5230 throw 20 \u65f6\u4f1a\u629b\u51fa\u4e00\u4e2a\u5f02\u5e38 #include <iostream> void foo () { throw 20 ; } int main () { std :: cout << \"testing\" ; foo (); return 0 ; } \u5982\u679c\u4f60\u76f4\u63a5\u7f16\u8bd1\uff08 g++ example.cpp \uff09\u5e76\u8fd0\u884c\uff0c\u4f1a\u5f97\u5230\u4ee5\u4e0b\u8f93\u51fa\uff1a ./a.out terminate called after throwing an instance of 'int' [ 1 ] 12079 IOT instruction ( core dumped ) ./a.out \u6b64\u65f6\u53ea\u77e5\u9053\u7a0b\u5e8f\u53d1\u751f\u4e86\u9519\u8bef\uff0c\u4f46\u5e76\u4e0d\u77e5\u9053\u662f\u54ea\u91cc\u51fa\u4e86\u95ee\u9898\u3002\u8fd9\u65f6\u5019\u5c31\u53ef\u4ee5\u4f7f\u7528 gdb \u6765\u8fdb\u884c\u8c03\u8bd5\uff08\u53d6\u4ee3\u7b80\u5355\u7684 print\uff09\uff1a \u5728\u7f16\u8bd1\u65f6\u4f7f\u7528 g++ example.cpp -g \uff0c\u5b8c\u6210\u7f16\u8bd1\u540e\uff0c\u8fd0\u884c gdb a.out \uff0c\u4f1a\u8fdb\u5165\u4ee5\u4e0b\u754c\u9762\uff1a <some intro here> For help, type \"help\". Type \"apropos word\" to search for commands related to \"word\"... Reading symbols from a.out... (gdb) \u6b64\u65f6\u8f93\u5165 run \u7136\u540e\u56de\u8f66\uff0cgdb \u5c31\u4f1a\u8fd0\u884c\u4f60\u7684\u7a0b\u5e8f\uff0c\u5f97\u5230\uff1a Starting program: /home/catoverflow/Projects/tmp/a.out [Thread debugging using libthread_db enabled] Using host libthread_db library \"/usr/lib/libthread_db.so.1\". terminate called after throwing an instance of 'int' Program received signal SIGABRT, Aborted. 0x00007ffff7ae534c in __pthread_kill_implementation () from /usr/lib/libc.so.6 (gdb) \u8bf4\u660e\u7a0b\u5e8f\u53d1\u751f\u4e86\u9519\u8bef\uff0c\u5e76\u56de\u5230\u7ec8\u7aef\u3002\u8f93\u5165 bt (back trace) \u5e76\u56de\u8f66\u5c31\u53ef\u4ee5\u770b\u5230\u7a0b\u5e8f\u7684\u8c03\u7528\u6808\uff1a (gdb) bt #0 0x00007ffff7ae534c in __pthread_kill_implementation () from /usr/lib/libc.so.6 #1 0x00007ffff7a984b8 in raise () from /usr/lib/libc.so.6 #2 0x00007ffff7a82534 in abort () from /usr/lib/libc.so.6 #3 0x00007ffff7dfc7ee in __gnu_cxx::__verbose_terminate_handler () at /usr/src/debug/gcc/libstdc++-v3/libsupc++/vterminate.cc:95 #4 0x00007ffff7e08c4c in __cxxabiv1::__terminate (handler=<optimized out>) at /usr/src/debug/gcc/libstdc++-v3/libsupc++/eh_terminate.cc:48 #5 0x00007ffff7e08cb9 in std::terminate () at /usr/src/debug/gcc/libstdc++-v3/libsupc++/eh_terminate.cc:58 #6 0x00007ffff7e08f5e in __cxxabiv1::__cxa_throw (obj=<optimized out>, tinfo=0x555555557db0 <typeinfo for int@CXXABI_1.3>, dest=0x0) at /usr/src/debug/gcc/libstdc++-v3/libsupc++/eh_throw.cc:95 #7 0x00005555555551a4 in foo () at example.cpp:5 #8 0x00005555555551c6 in main () at example.cpp:10 \u8c03\u7528\u6808\u5c06\u51fd\u6570\u8c03\u7528\u81ea\u5e95\u5411\u4e0a\u663e\u793a\uff0c\u6700\u4e0a\u9762\u7684\u5c31\u662f\u6700\u540e\u88ab\u8c03\u7528\u7684\u51fd\u6570\uff0c\u5728\u8fd9\u91cc\u4e0a\u9762\u7684\u90fd\u662f\u94fe\u63a5\u7684\u7cfb\u7edf\u5e93\uff0c\u4e0b\u9762\u7684\u4e24\u4e2a\u5219\u662f\u6211\u4eec\u81ea\u5df1\u7684\u51fd\u6570\u3002\u8fd9\u65f6\u5c31\u5f88\u5bb9\u6613\u53d1\u73b0\u9519\u8bef\u53d1\u751f\u5728 foo \u4e2d\uff0c\u4ee3\u7801\u7684\u7b2c\u4e94\u884c\u3002 \u6700\u540e\uff0c\u8f93\u5165 q \u5e76\u56de\u8f66\u5c31\u53ef\u4ee5\u9000\u51fa\u4e86\u3002\u9664\u4e86\u4e0a\u9762\u7684 bt\uff0c\u5e38\u7528\u7684\u6307\u4ee4\u8fd8\u6709 break \uff08\u6dfb\u52a0\u65ad\u70b9\uff09\uff0c\u7528 attach \u547d\u4ee4\u8fde\u63a5\u5230\u7ebf\u7a0b\uff08\u5728\u591a\u7ebf\u7a0b\u8c03\u8bd5\u4e2d\u975e\u5e38\u6709\u7528\uff09\u7b49\u7b49\uff0c\u5177\u4f53\u7684\u7528\u6cd5\u53ef\u4ee5\u67e5\u9605\u76f8\u5173\u6587\u6863\u3002 \u7f16\u8bd1\u65f6\u53c2\u6570 -g \u7684\u4f5c\u7528\uff1f \u5728\u7ec8\u7aef\u8f93\u5165 man gdb \u5e76\u627e\u5230 -g \u7684\u5e2e\u52a9\u6587\u6863\uff0c\u53ef\u4ee5\u770b\u5230\uff1a -g Produce debugging information in the operating system's native format (stabs, COFF, XCOFF, or DWARF). GDB can work with this debugging information. \u7b80\u5355\u6765\u8bf4\uff0c\u8fd9\u4e2a\u53c2\u6570\u4f1a\u5728\u7f16\u8bd1\u7684\u65f6\u5019\u52a0\u5165\u989d\u5916\u7684\u8c03\u8bd5\u4fe1\u606f\uff0c\u6bd4\u5982\u4ee3\u7801\u6240\u5728\u7684\u884c\u53f7\uff08\u5728 gdb \u62a5\u9519\u7684\u65f6\u5019\u975e\u5e38\u6709\u7528\uff0c\u8fd8\u53ef\u4ee5\u62ff\u6765\u63d2\u5165\u65ad\u70b9\uff09\u7b49\u7b49\u3002\u5426\u5219 gdb \u8c03\u8bd5\u7684\u5c31\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u80fd\u8f93\u51fa\u7684\u4fe1\u606f\u4f1a\u5c11\u5f88\u591a\u3002 \u4f60\u4e5f\u53ef\u4ee5\u4e0d\u52a0 -g \uff0c\u7136\u540e\u5bf9\u6bd4\u4e00\u4e0b gdb \u7684\u8f93\u51fa\u3002 \u4f7f\u7528 IDE \u8fdb\u884c debug \u00b6 \u5728\u547d\u4ee4\u884c\u91cc\u7528 gdb debug \u867d\u7136\u7b80\u5355\uff0c\u4f46\u662f\u5f88\u591a\u65f6\u5019\u4e0d\u591f\u76f4\u89c2\u65b9\u4fbf\u3002\u5728 VS\u3001VS Code \u7b49 IDE \u91cc\uff0c\u4f60\u4e5f\u53ef\u4ee5\u7528 IDE \u81ea\u5e26\u7684 debug \u529f\u80fd\uff08\u6709\u4e9b\u662f\u57fa\u4e8e gdb \u7684\uff0c\u4f46\u662f\u63d0\u4f9b\u4e86\u975e\u5e38\u65b9\u4fbf\u7684\u64cd\u4f5c\u754c\u9762\uff09\u3002\u4e0b\u9762\u4ee5 VS Code \u4e3a\u4f8b\uff1a \u76f4\u63a5\u70b9\u51fb debug\uff0c\u9009\u62e9 g++ \u4f5c\u4e3a\u7f16\u8bd1\u5668\u540e\uff0c\u5c31\u53ef\u4ee5\u770b\u5230\u4e0a\u9762\u7684\u754c\u9762\uff08\u56e0\u4e3a\u52a9\u6559\u7684\u4e3b\u9898\u6bd4\u8f83\u597d\u770b\uff0c\u53ef\u80fd\u548c\u4f60\u4eec\u7684\u4e0d\u4e00\u6837 :3\uff09\u3002\u754c\u9762\u5de6\u4fa7\u663e\u793a\u4e86\u5f02\u5e38\u65f6\u5404\u53d8\u91cf\u7684\u503c\uff08\u672c\u4f8b\u5b50\u4e2d\u6ca1\u6709\u5c55\u5f00\uff0c\u5728\u4e0a\u4fa7\uff09\u548c\u8c03\u7528\u6808\uff0c\u4e0b\u65b9\u7684 Debug Console \u663e\u793a\u4e86 gdb \u7684\u8f93\u51fa\uff0c\u4e3b\u754c\u9762\u76f4\u63a5\u6807\u51fa\u4e86\u5f02\u5e38\u7684\u4f4d\u7f6e\uff0c\u975e\u5e38\u65b9\u4fbf\u3002\u9664\u4e86\u4e0a\u9762\u7684\u8fd9\u4e9b\u529f\u80fd\uff0c\u8fd8\u53ef\u4ee5\u70b9\u51fb\u4ee3\u7801\u884c\u53f7\u5de6\u4fa7\u52a0\u5165\u65ad\u70b9\uff0c\u6216\u8005\u5728\u5de6\u680f\u7684 Watch \u4e2d\u52a0\u5165\u76d1\u89c6\u7684\u53d8\u91cf\uff0c\u4ee5\u53ca\u540c\u65f6\u76d1\u63a7\u591a\u4e2a\u5b50\u7ebf\u7a0b\u3002 \u548c VS Code \u7c7b\u4f3c\uff0cVS \u7b49 IDE \u4e5f\u63d0\u4f9b\u4e86\u5f3a\u5927\u7684\u8c03\u8bd5\u529f\u80fd\uff0c\u5e0c\u671b\u540c\u5b66\u4eec\u80fd\u5728\u5b9e\u9a8c\u4e2d\u8fdb\u884c\u63a2\u7d22\uff0c\u63d0\u9ad8\u81ea\u5df1\u7684\u4ee3\u7801\u6548\u7387\u3002","title":"\u5b9e\u9a8c\u96f6"},{"location":"lab0/#\u5b9e\u9a8c\u96f6","text":"","title":"\u5b9e\u9a8c\u96f6"},{"location":"lab0/#\u672c\u5b66\u671f\u7684\u5b9e\u9a8c\u8bbe\u8ba1","text":"\u4e0d\u51fa\u610f\u6599\u7684\u8bdd\uff0c\u672c\u5b66\u671f\u7684\u524d\u4e09\u4e2a\u5b9e\u9a8c\u548c\u524d\u51e0\u5c4a\u76f8\u540c\uff0c\u4f9d\u6b21\u4e3a\u88c1\u526a Linux \u5185\u6838\u3001\u7f16\u5199 Shell \u7a0b\u5e8f\u3001\u5b8c\u6210\u591a\u4eba\u804a\u5929\u5ba4\uff0c\u4e0d\u8fc7\u90e8\u5206\u5b9e\u9a8c\u4f1a\u5728\u4e4b\u524d\u7684\u8bbe\u8ba1\u57fa\u7840\u4e0a\u6709\u6240\u8c03\u6574\u548c\u4f18\u5316\u3002\u7b2c\u56db\u6b21\u5b9e\u9a8c\u4e3b\u9898\u4ecd\u5904\u4e8e\u5f85\u5b9a\u72b6\u6001\uff0c\u4f1a\u5728\u4e4b\u540e\u7684\u8bfe\u7a0b\u4e2d\u786e\u5b9a\u4e0b\u6765\u3002\u5177\u4f53\u7684\u5b9e\u9a8c\u7ec6\u8282\u540c\u5b66\u4eec\u53ef\u4ee5\u53c2\u8003\u524d\u51e0\u6b21\u7684\u8bfe\u7a0b\u5b9e\u9a8c\u5b89\u6392\uff1a OSH-2021 \u3001 OSH-2020 \u7b49 \uff08\u6ce8\u610f\u5230\u94fe\u63a5\u7684\u89c4\u5f8b\u4e86\u5417 :3\uff09\u3002\u6240\u6709\u5b9e\u9a8c\u90fd\u53ef\u4ee5\u4f7f\u7528 C/C++ \u6216\u662f Rust \u5b8c\u6210\uff0c\u4f46\u662f\u4e0d\u80fd\u7528 Go\uff08\u7b80\u76f4\u662f\u4f5c\u5f0a.jpg\uff09\u3002","title":"\u672c\u5b66\u671f\u7684\u5b9e\u9a8c\u8bbe\u8ba1"},{"location":"lab0/#\u5b9e\u9a8c\u8003\u5bdf\u8303\u56f4","text":"\u524d\u4e09\u6b21\u5b9e\u9a8c\u7684\u8003\u5bdf\u5185\u5bb9\u548c\u6280\u80fd\u8981\u6c42\u5982\u4e0b\uff1a \u5b9e\u9a8c \u4e3b\u8981\u5185\u5bb9 \u8003\u5bdf\u77e5\u8bc6 \u6240\u9700\u6280\u80fd \u5b9e\u9a8c\u4e00 \u88c1\u526a Linux \u5185\u6838 Linux \u542f\u52a8\u8fc7\u7a0b\u3001\u5185\u6838\u6a21\u5757 make\u3001makefile \u57fa\u7840 \u5b9e\u9a8c\u4e8c \u7f16\u5199 Shell \u7a0b\u5e8f fork \u7b49\u7cfb\u7edf\u8c03\u7528\u3001I/O \u91cd\u5b9a\u5411\u3001\u591a\u7ebf\u7a0b\u3001\u4e2d\u65ad \u591a\u7ebf\u7a0b\u7f16\u7a0b\u3001\u4f7f\u7528 syscall\u3001\u4e2d\u65ad\u5904\u7406 \u5b9e\u9a8c\u4e09 \u7f16\u5199\u591a\u4eba\u804a\u5929\u5ba4 \u8fdb\u7a0b\u8c03\u5ea6\u3001socket \u590d\u7528\u3001TCP \u76f8\u5173\u77e5\u8bc6 \u591a\u7ebf\u7a0b\u3001\u9762\u5411 socket \u7f16\u7a0b\u3001I/O \u76f8\u5173 syscall \u5b9e\u9a8c\u6240\u8003\u5bdf\u7684\u77e5\u8bc6\u548c\u8bfe\u7a0b\u8fdb\u5ea6\u540c\u6b65\uff0c\u53ef\u4ee5\u5148\u8ddf\u7740\u8bfe\u7a0b\u5b66\u4e60\uff0c\u4e0d\u8fc7\u6240\u9700\u7684\u7f16\u7a0b\u6280\u80fd\u53ef\u80fd\u9700\u8981\u9760\u81ea\u5df1\u638c\u63e1\u3002","title":"\u5b9e\u9a8c\u8003\u5bdf\u8303\u56f4"},{"location":"lab0/#linux-\u5b9e\u9a8c\u73af\u5883","text":"OSH \u51e0\u4e4e\u6240\u6709\u5b9e\u9a8c\u90fd\u9700\u8981\u5728 Linux \u5e73\u53f0\u4e0a\u5b8c\u6210\u3001\u5b9e\u73b0\uff0c\u6240\u4ee5\u672c\u8282\u671f\u671b\u4f60\u6709\u4e00\u4e2a\u53ef\u7528\u7684 Linux \u5de5\u4f5c\u73af\u5883\uff08\u4e0d\u9650\u4e8e\u672c\u5730\uff09\u548c\u57fa\u672c\u7684 Linux \u4f7f\u7528\u80fd\u529b\u3002\u5982\u679c\u4f60\u662f\u4e00\u4e2a\u719f\u7ec3\u7684 Linux \u7528\u6237\uff0c\u4f60\u53ef\u4ee5\u8df3\u8fc7\u672c\u8282\u3002 \u5982\u679c\u4f60\u662f\u7b2c\u4e00\u6b21\u63a5\u89e6 Linux\uff0c\u4f60\u53ef\u4ee5\u5728 USTC Vlab \u4e0a\u5f97\u5230\u4e00\u4e2a Linux \u7684\u5b9e\u9a8c\u73af\u5883\uff08\u6ce8\u610f\uff1a\u8fd9\u4e0d\u662f\u865a\u62df\u673a\uff0c\u662f\u4e00\u4e2a LXC \u5bb9\u5668\uff0c \u53ef\u80fd \u6709\u90e8\u5206\u5b9e\u9a8c\u65e0\u6cd5\u5728\u5176\u4e0a\u9762\u5b8c\u6210\uff09\u3002 \u5982\u679c\u4f60\u5185\u5b58\u5145\u8db3\u3001\u6216\u8005\u4e0d\u592a\u60f3\u5728\u7269\u7406\u673a\u4e0a\u5b89\u88c5 Linux\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u4f7f\u7528\u865a\u62df\u673a\u8fd0\u884c Linux\u3002\u5177\u4f53\u53ef\u4ee5\u53c2\u7167 \u5728 Windows \u4e2d\u4f7f\u7528\u865a\u62df\u673a\uff08By iBug\uff09 \u3001 \u5728 macOS \u4e2d\u4f7f\u7528\u865a\u62df\u673a\uff08By Taoky\uff09 \u8fd9\u4e24\u7bc7\u6587\u7ae0\u3002 Linux \u6700\u57fa\u672c\u7684\u4f7f\u7528\u4e5f\u53ef\u4ee5\u4ece LUG \u7684 Linux 101 \u6559\u7a0b \u5f00\u59cb\u5b66\u4e60\uff08 \u5982\u679c\u6ca1\u6709\u65f6\u95f4\u4e5f\u8bf7\u770b\u4e00\u4e0b\u7b2c\u4e09\u7ae0\u7684\u6587\u4ef6\u64cd\u4f5c\u3001\u7b2c\u516d\u7ae0\u7684\u91cd\u5b9a\u5411\u548c\u7b2c\u4e03\u7ae0 Linux \u4e0a\u7684\u7f16\u7a0b \uff09\u3002 \u5982\u679c\u60f3\u4e86\u89e3\u66f4\u591a\u6709\u5173 Linux \u7684\u6280\u5de7\uff0c\u53ef\u4ee5\u770b Debian \u6559\u7a0b \u6216\u8005 Arch Linux \u6587\u7ae0\u7d22\u5f15 \u3002","title":"Linux \u5b9e\u9a8c\u73af\u5883"},{"location":"lab0/#\u4e0d\u540c\u5e73\u53f0\u517c\u5bb9\u6027","text":"\u7531\u4e8e\u65e0\u6cd5\u786e\u5b9a\u5404\u4e2a\u5b9e\u9a8c\u5168\u8c8c\uff0c\u76ee\u524d\u52a9\u6559\u65e0\u6cd5 \u4fdd\u8bc1 \u975e\u8f6f\u4ef6 Linux \u865a\u62df\u673a\u7684\u5e73\u53f0\uff0c\u5982 WSL1/2\u3001BSD\u3001Vlab\uff0c\u80fd\u591f\u5b8c\u6210\u6240\u6709\u7684\u5b9e\u9a8c\u3002 \u4f46\u6211\u4eec\u5728\u8bbe\u8ba1\u5b9e\u9a8c\u65f6\u5c06\u5c3d\u53ef\u80fd\u8003\u8651\u5230\u4e0d\u540c\u5e73\u53f0\u4e0b\u7684\u517c\u5bb9\u6027\u95ee\u9898\uff0c\u5e76\u5c06\u7b2c\u4e00\u65f6\u95f4\u66f4\u65b0\u4e0b\u65b9\u7684\u517c\u5bb9\u6027 tips \u914d\u5408\u516c\u544a\u4f5c\u4e3a\u63d0\u9192\uff1a \u5e73\u53f0 \u5b9e\u9a8c \u51fa\u9519\u73b0\u8c61 \u539f\u56e0\u5206\u6790 \u89e3\u51b3\u65b9\u6848 \u8fd9\u91cc\u6709\u4e00\u4e9b\u57fa\u672c\u5206\u6790\uff1aWSL1\uff08\u5373 WSL \u521d\u7248\uff09\u662f\u5fae\u8f6f\u9b54\u6539\u7684\u5185\u6838\uff0c\u6ca1\u6709\u5b9e\u73b0\u5b8c\u6574\u7684 cgroups \u548c IPC\uff0c\u5982 fakeroot \u4e5f\u4e0d\u80fd\u6b63\u5e38\u4f7f\u7528\uff0c\u53ef\u80fd\u5bf9\u5b9e\u9a8c\u6709\u5f71\u54cd\uff1bWSL2 \u662f\u4f7f\u7528 Hyper-V \u865a\u62df\u673a\u5b9e\u73b0\u3001\u4f7f\u7528\u4e86\u5b8c\u6574\u7684\u5185\u6838\uff0c \u5e94\u8be5 \u4e0d\u4f1a\u5e72\u6270\u5230\u5b9e\u9a8c\u7684\u8fdb\u884c\u3002\u300cFreeBSD \u63d0\u4f9b\u4e86 Linux 32-bit \u4e8c\u8fdb\u5236\u7684\u517c\u5bb9\uff0c\u4f46\u662f\u4e0d\u652f\u6301 64-bit \u7684 Linux \u4e8c\u8fdb\u5236\u7a0b\u5e8f\u300d\uff0c \u9700\u53c2\u8003\u5b9e\u9645\u4f7f\u7528\u72b6\u51b5 \u3002","title":"\u4e0d\u540c\u5e73\u53f0\u517c\u5bb9\u6027"},{"location":"lab0/#\u7f16\u7a0b\u8bed\u8a00\u8981\u6c42","text":"\u5982\u5b9e\u9a8c\u8bbe\u8ba1\u4e2d\u6240\u8ff0\uff0c\u672c\u8f6e\u5b9e\u9a8c\u5982\u65e0\u7279\u6b8a\u58f0\u660e\u5747\u5141\u8bb8\u4f7f\u7528 C\u3001C++\u3001Rust \u5176\u4e2d\u4efb\u610f\u4e00\u79cd\u8bed\u8a00\u5b8c\u6210\u3002 \u5728\u4e0b\u9762\u51e0\u4e2a\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u7b80\u5355\u4ecb\u7ecd\u9700\u8981\u638c\u63e1\u6216\u662f\u4e86\u89e3\u7684 C\u3001C++\u3001Rust \u8bed\u8a00\u77e5\u8bc6\u3002 \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u4e9b\u77e5\u8bc6\u5e76\u4e0d\u4e00\u5b9a\u4f1a\u5728\u5b9e\u9a8c\u4e2d\u7528\u5230\uff0c\u4f46\u662f\u7406\u89e3\u5b83\u4eec\u6216\u8bb8\u80fd\u591f\u6307\u5bfc\u4f60\u7684\u5b9e\u9645\u5f00\u53d1\u8fc7\u7a0b\u5e76\u51cf\u5c11\u5728\u5404\u4e2a\u8bed\u8a00\u6587\u6863\u4e2d\u63a2\u7d22\u7684\u65f6\u95f4\u3002","title":"\u7f16\u7a0b\u8bed\u8a00\u8981\u6c42"},{"location":"lab0/#c-\u7684\u8981\u6c42","text":"\u4e86\u89e3 C99 \u6807\u51c6\u4e0b\u51e0\u4e4e\u6240\u6709\u7684 C \u7528\u6cd5\uff0c\u8fd9\u662f\u8003\u8651\u5230 C \u7684\u6807\u51c6\u8bed\u8a00\u7279\u6027\u5e76\u4e0d\u592a\u591a\uff0c\u66f4\u8fdb\u9636\u7684\u7528\u6cd5\u4e5f\u66f4\u503e\u5411\u4e8e\u4f9d\u8d56\u7f16\u8bd1\u5668\u7279\u6027\u6216\u662f\u6807\u51c6\u7528\u6cd5\u7684\u5de7\u7528\uff1b \u4e86\u89e3\u57fa\u672c\u7684\u5b8f\u77e5\u8bc6\uff0c\u4f8b\u5982\u5b8f\u51fd\u6570\u4e2d\u53c2\u6570\u4f7f\u7528\u65f6\u9700\u8981\u62ec\u53f7\u5305\u88f9\uff0c\u8fd9\u662f\u56e0\u4e3a\u8c03\u7528 Linux API \u65f6\u9700\u8981\u7528\u5230\u5b8f\uff1b \u638c\u63e1\u67e5\u8be2 Linux API \u6587\u6863\u7684\u65b9\u6cd5\uff0c\u65e0\u8bba\u662f\u4f7f\u7528 man tldr \u6216\u662f\u76f4\u63a5\u67e5\u770b\u7f51\u9875\u7248 man \u6587\u6863;","title":"C \u7684\u8981\u6c42"},{"location":"lab0/#c-\u7684\u8981\u6c42_1","text":"\u638c\u63e1\u57fa\u672c\u7684 C \u7528\u6cd5\uff1b \u5b8f\uff0c\u5982 C \u8981\u6c42\u6240\u8ff0\uff1b Linux API \u6587\u6863\uff0c\u5982 C \u8981\u6c42\u6240\u8ff0; \u4e86\u89e3\u4e00\u4e9b Morden C++ \u7684\u7528\u6cd5\uff0c\u53ef\u4ee5\u4e3a\u4f60\u51cf\u5c11\u7f16\u7a0b\u5de5\u4f5c\u91cf\uff1b \u5173\u4e8e Modern C++ \u5982\u679c\u4f60\u9009\u62e9\u4f7f\u7528 C++ \u5b8c\u6210\u5b9e\u9a8c\uff0c\u90a3\u4e48\u8bf7\u4e0d\u8981\u5c06 C++ \u4ee3\u7801\u5199\u5f97\u5b9b\u5982 C \u4e00\u6837\u2014\u2014Modern \u7684\u3001\u73b0\u4ee3\u7684\u3001C++11 \u6807\u51c6\u540e\u7684 C++ \u589e\u6dfb\u4e86\u4f17\u591a\u5f3a\u6709\u529b\u7684\u5de5\u5177\uff0c\u80fd\u591f\u5e2e\u52a9\u4f60\u4ee5\u66f4\u9ad8\u6548\u3001\u66f4\u7b80\u6d01\u7684\u624b\u6bb5\u8fbe\u6210\u76ee\u6807\u3002 \u5982\u9700\u5168\u65b9\u4f4d\u7684\u4e86\u89e3 Modern C++\uff0c\u63a8\u8350\u9605\u8bfb\u300aA Tour of C++\u300b\u4ee5\u53ca\u8fdb\u9636\u7684\u4f8b\u5982\u300aModern Effective C++\u300b\u7b49\u4e66\u7c4d\uff0c\u5176\u4e2d\u8be6\u7ec6\u8bb2\u89e3\u4e86 Modern C++ \u4e2d\u7684\u4e00\u4e9b\u8bbe\u8ba1\u7406\u5ff5\u548c\u6700\u4f73\u5b9e\u8df5\u3002 \u989d\u5916\u7684\u6211\u4eec\u4e5f\u7ed9\u51fa\u4e00\u4e9b tips\uff0c\u6765\u5e2e\u52a9\u4f60\u5c3d\u5feb\u5730\u4e86\u89e3\u4e00\u4e9b C++ \u5de5\u5177\uff08\u5982 STL\uff09\uff0c\u4ee5\u53ca\u9610\u8ff0\u90e8\u5206 Modern C++ \u6982\u5ff5\uff0c\u6216\u662f\u534f\u52a9\u56de\u907f\u56f0\u60d1\u4e4b\u5904\uff1a \u4e0d\u5fc5\u4f7f\u7528\u6808\u4e0a\u7684 int a[12] \u6216\u662f\u81ea\u884c new int[12] \u6765\u8fdb\u884c\u5806\u4e0a\u5206\u914d\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 std::vector \uff1b std::string \u4fdd\u8bc1\u5185\u90e8\u7a7a\u95f4\u8fde\u7eed\uff0c\u56e0\u800c\u53ef\u4ee5\u914d\u5408 s.resize() \u6539\u53d8\u5185\u90e8\u7a7a\u95f4\u5927\u5c0f\uff0c\u5e76\u7528 s.c_str() \u6216\u662f &s[0] \u8fdb\u884c\u4e0d\u53ef\u53d8\u6216\u662f\u53ef\u53d8\u8bbf\u95ee\uff0c\u53ef\u4ee5\u4ee3\u66ff chat buf[N] \uff1b <memory> \u5982 shared_ptr \u53ef\u4ee5\u5b9e\u73b0\u667a\u80fd\u6307\u9488\uff0c\u81ea\u52a8\u5728\u5408\u9002\u7684\u65f6\u523b\u91ca\u653e\u8d44\u6e90\uff0c\u5e76\u5141\u8bb8\u50cf\u4e00\u4e2a\u6307\u9488\u4e00\u6837\u5ec9\u4ef7\u5730\u62f7\u8d1d\uff0c\u53ef\u4ee5\u914d\u5408 std::thread \u7b49\u4f7f\u7528\uff1b std::string \u7f3a\u5c11 split \u529f\u80fd\uff0c\u4f46\u7f51\u7edc\u4e0a\u6709 \u4f17\u591a\u73b0\u6210\u7684\u5b9e\u73b0 \uff1b","title":"C++ \u7684\u8981\u6c42"},{"location":"lab0/#rust-\u7684\u8981\u6c42","text":"\u5173\u4e8e Rust \u914d\u7f6e\u73af\u5883\u7684\u6559\u7a0b\u53ef\u4ee5\u5728 \u5b98\u7f51\u5b89\u88c5\u754c\u9762 \u67e5\u770b\u3002 \u800c\u76f8\u5e94\u7684\u8be6\u7ec6\u8bed\u8a00\u6559\u7a0b\u4e5f\u53ef\u4ee5\u5728 \u5b98\u7f51\u6559\u7a0b\u6c47\u603b\u754c\u9762 \u6309\u9700\u67e5\u9605\u3002 \u5176\u4e2d\u91cd\u70b9\u662f Rust Book \u8fd9\u4efd\u6559\u7a0b\uff0c\u5176\u5728\u9ad8\u4f4e\u5c42\u6b21\u4e0a\u90fd\u5bf9 Rust \u8fdb\u884c\u4e86\u8be6\u7ec6\u7684\u89e3\u6790\u3002 \u800c\u5982\u679c\u4f60\u4e4b\u524d\u53ea\u4e86\u89e3\u8fc7 C \u5f00\u53d1\uff0c\u53ef\u4ee5\u7740\u91cd\u5173\u6ce8 Rust Book \u4e2d\u7684\u4ee5\u4e0b\u6982\u5ff5\uff1a Ownership\uff0clifetime\uff0cborrow\uff0c\u8fd9\u4e9b\u662f Rust \u6700\u6838\u5fc3\u7684\u6982\u5ff5\u4e4b\u4e00\uff1b \u5bf9\u5e94\u7ae0\u8282\u662f Understanding Ownership \u548c Validating References with Lifetimes Cargo \u7684\u4f7f\u7528\uff0c\u4ece\u800c\u5b8c\u6210 Rust \u7684\u4f9d\u8d56\u7ba1\u7406\u53ca\u7f16\u8bd1\u7b49\u5de5\u4f5c\uff1b \u667a\u80fd\u6307\u9488\uff08smart pointer\uff09\uff0cC++ <memory> \u5e93\u4e2d\u4e5f\u6709\u76f8\u4f3c\u5b9e\u73b0\uff1b \u5e76\u53d1\u7f16\u7a0b\uff0cC++ <thread> <mutex> <condition_variable> \u7b49\u5e93\u4e2d\u4e5f\u6709\u76f8\u4f3c\u5b9e\u73b0\uff1b \u51fd\u6570\u5f0f\u7f16\u7a0b\uff08functional programming\uff09\uff0c\u5982 map \u7684\u7528\u6cd5\uff1b \u6a21\u5f0f\u5339\u914d\uff08pattern matching\uff09\uff0c\u5982 match \u548c if let \u7684\u7528\u6cd5\uff1b \u57fa\u672c\u7684 unsafe Rust \u7528\u6cd5\uff0c\u53ef\u80fd\u4f1a\u5728\u8c03\u7528\u5916\u90e8\u5e93\u65f6\u7528\u5230\uff1b async Rust\uff0c\u53ef\u80fd\u4f1a\u5728 coroutine \u76f8\u5173\u7684\u5b9e\u9a8c\u4e2d\u7528\u5230\uff1b \u9519\u8bef\u5904\u7406\uff08error handling\uff09\uff0cRust \u9519\u8bef\u5904\u7406\u4e0e Go \u6709\u7c7b\u4f3c\u4e4b\u5904\uff0c\u5982\u6709\u7ecf\u9a8c\u53ef\u4ee5\u5bf9\u7167\u5b66\u4e60\uff0c\u4f46\u672c\u6b21\u5b9e\u9a8c\u5e94\u8be5\u4e0d\u4f1a\u5728\u9519\u8bef\u5904\u7406\u4e0a\u6709\u8f83\u9ad8\u8981\u6c42\uff0c\u628a\u63e1\u6982\u5ff5\u5373\u53ef\uff1b Traits\uff08\u6709\u8bd1\u4f5c\u7279\u8d28\u7684\uff09\uff0c\u4f46\u672c\u6b21\u5b9e\u9a8c\u5e94\u8be5\u4e0d\u4f1a\u6d89\u53ca\u8fc7\u591a\u6216\u8fc7\u6df1\uff1b \u5176\u4ed6\u7684\u4f8b\u5982 Rust by Example \u4e5f\u662f\u5f88\u4f18\u8d28\u7684\u6559\u7a0b\uff0c\u4e5f\u80fd\u8ba9\u4f60\u8fc5\u901f\u627e\u5230\u81ea\u5df1\u6240\u9700\u8981\u7684\u5199\u6cd5\u3002 \u5b9e\u9a8c\u6d41\u7a0b\u4e2d\u6211\u4eec\u5728\u81ea\u613f\u7684\u57fa\u7840\u4e0a \u9f13\u52b1 \u4f7f\u7528 Rust \u8bed\u8a00\uff0c\u4f46\u4e0d\u4f1a\u505a\u8fdb\u4e00\u6b65\u7684\u8981\u6c42\u3002 \u5982\u679c\u4f60\u9009\u62e9\u5728\u5b9e\u9a8c\u4e2d\u4f7f\u7528 Rust \u8bed\u8a00\uff0c\u4f60\u4f9d\u7136\u53ef\u4ee5\u4ece\u52a9\u6559\u5904\u83b7\u53d6\u4e00\u4e9b\u8bed\u8a00\u4f7f\u7528\u4e0a\u7684\u57fa\u7840\u5e2e\u52a9\uff0c\u5e76\u4e0e\u5176\u4ed6\u540c\u5b66\u5728\u540c\u4e00\u6807\u51c6\u4e0b\u8fdb\u884c\u8bc4\u6d4b\u3002","title":"Rust \u7684\u8981\u6c42"},{"location":"lab0/#\u5b9e\u9a8c\u4e2d\u7684\u4f18\u7f3a\u70b9","text":"\u9009\u62e9 Rust \u53ef\u80fd\u4f1a\u5728\u672c\u8f6e\u5b9e\u9a8c\u4e2d\u9047\u89c1\u4ee5\u4e0b\u4f18\u7f3a\u70b9\uff1a \u4f18\u70b9\uff1a Rust \u7684\u57fa\u7840\u5e93\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u6bd4 C++ \u7684\u57fa\u7840\u5e93\u66f4\u5168\u9762\u800c\u66f4\u6613\u7528\uff1b Rust \u7684\u5185\u5b58\u5b89\u5168\u4fdd\u8bc1\u53ef\u4ee5\u5728\u6700\u5927\u7a0b\u5ea6\u4e0a\u8ba9\u4f60\u907f\u514d\u9047\u5230\u96be\u4ee5 debug \u7684 segmentation fault \u95ee\u9898\uff1b Rust \u5bf9\u4e8e\u4e00\u4e9b\u6bd4\u8f83\u73b0\u4ee3\u7684\u6280\u672f\uff0c\u4f8b\u5982 coroutine\uff0c\u6709\u76f8\u5bf9\u66f4\u597d\u7684\u652f\u6301\uff0c\u5728\u5b9e\u9a8c\u4e2d\u9700\u8981\u5b9e\u73b0\u7c7b\u4f3c\u60c5\u51b5\u65f6\u4f1a\u66f4\u65b9\u4fbf; \u7f3a\u70b9\uff1a Rust \u7684\u5b66\u4e60\u66f2\u7ebf\u7a0d\u663e\u9661\u5ced\uff0c\u5c24\u5176\u662f\u4ece\u539f\u6c41\u539f\u5473\u7684 C \u51fa\u53d1\u7684\u8bdd\uff1b Rust \u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528 Linux API\uff08\u7531\u4f17\u591a C header \u6587\u4ef6\u63d0\u4f9b\uff09\uff0c\u4e0b\u6587\u6211\u4eec\u5c06\u8be6\u7ec6\u8ba8\u8bba\u8fd9\u4e2a\u95ee\u9898\uff1b","title":"\u5b9e\u9a8c\u4e2d\u7684\u4f18\u7f3a\u70b9"},{"location":"lab0/#\u5916\u90e8\u5e93\u7684\u8981\u6c42","text":"\u5982\u4f18\u7f3a\u70b9\u4e2d\u6240\u8a00\uff0c\u5c3d\u7ba1 Rust \u6807\u51c6\u5e93\u76f8\u5bf9\u8f83\u4e30\u5bcc\uff0c\u4f46\u9700\u8981\u8c03\u7528\u7279\u5b9a Linux API \u65f6\uff0cLinux \u63d0\u4f9b\u7684\u662f C header \u6587\u4ef6\u3002 \u5c3d\u7ba1 Rust \u53ef\u4ee5\u5229\u7528 FFI \u548c binding \u751f\u6210\u5229\u7528\u8fd9\u4e9b C header \u6587\u4ef6\u5b8c\u6210\u76f8\u5173\u8c03\u7528\uff0c\u4f46\u662f\u64cd\u4f5c\u592a\u8fc7\u7e41\u6742\u800c\u65e0\u5fc5\u8981\u3002 \u6240\u4ee5\u5982\u65e0\u7279\u5730\u58f0\u660e\uff0c\u6211\u4eec\u9ed8\u8ba4\u5141\u8bb8\u4f7f\u7528 Rust \u8bed\u8a00\u65f6\u8c03\u7528\u4ee5\u4e0b\u8fd9\u4e9b\u5916\u90e8\u5e93\uff08\u540e\u7eed\u53ef\u80fd\u4f1a\u589e\u5145\u6b64\u5217\u8868\uff0c\u4f46\u4e0d\u4f1a\u5220\u51cf\uff09\uff1a nix libc \u5982\u4f60\u4e0d\u6ee1\u8db3\u4e8e\u8fd9\u4e9b\u5916\u90e8\u5e93\u3001\u5e0c\u671b\u4f7f\u7528\u5176\u4ed6\u5916\u90e8\u5e93\u65f6\uff0c\u8bf7\u5c3d\u91cf\u63d0\u524d\u8be2\u95ee\u52a9\u6559\u3002 \u65e0\u8bba\u662f\u5426\u63d0\u524d\u8be2\u95ee\uff0c\u5728\u6700\u540e\u9a8c\u6536\u5b9e\u9a8c\u65f6\uff0c\u52a9\u6559\u90fd\u4f1a\u53c2\u8003\u4ee5\u4e0b\u6761\u4ef6\u5bf9\u9664\u4e0a\u8ff0\u5217\u8868\u4ee5\u5916\u7684\u5916\u90e8\u5e93\u8fdb\u884c\u8bc4\u5b9a\uff1a \u6b64\u5916\u90e8\u5e93\u662f\u5426\u4ec5\u662f Linux C API FFI\uff1f\u5982\u662f\uff0c\u5219\u5141\u8bb8\uff1b \u6b64\u5916\u90e8\u5e93\u662f\u5426\u4ec5\u662f Linux C API FFI \u5e76\u8fdb\u884c\u4e86 safe wrap\uff1f\u5982\u662f\uff0c\u5219\u5141\u8bb8\uff1b \u6b64\u5916\u90e8\u5e93\u4f7f\u7528\u65b9\u6cd5\u662f\u5426\u4e0e\u539f\u672c C \u4e2d\u8c03\u7528\u7684\u65b9\u6cd5\u76f8\u7c7b\u4f3c\uff1f\u5982\u662f\uff0c\u53c2\u8003\u76f8\u4f3c\u7a0b\u5ea6\u5141\u8bb8\uff1b \u6b64\u5916\u90e8\u5e93\u662f\u5426\u7834\u574f\u4e86\u539f\u672c\u7684\u5b9e\u9a8c\u8bbe\u8ba1\u76ee\u6807\uff1f\u5982\u662f\uff0c\u5219\u7981\u6b62\uff1b\u5982\u5426\uff0c\u53c2\u8003\u548c\u5b9e\u9a8c\u76ee\u6807\u76f8\u5173\u7a0b\u5ea6\u5141\u8bb8\uff1b \u5982\u679c\u4e00\u4e2a\u5916\u90e8\u5e93\u88ab\u7981\u6b62\uff0c\u5b9e\u9a8c\u4e2d\u5bf9\u5e94\u9879\u76ee\u5c06\u53ef\u80fd\u88ab\u916c\u60c5\u6263\u5206\u3002","title":"\u5916\u90e8\u5e93\u7684\u8981\u6c42"},{"location":"lab0/#\u4f7f\u7528-gdb-debug","text":"\u5728\u672c\u5b66\u671f\u7684\u5b9e\u9a8c\u4e2d\uff0c\u4f60\u53ef\u80fd\u4f1a\u5199\u51fa\u5404\u5f0f\u5404\u6837\u7684 bug\uff0c\u7528\u597d debugger \u5f80\u5f80\u53ef\u4ee5\u5927\u5e45\u63d0\u5347\u4f60\u7684\u8c03\u8bd5\u6548\u7387\u3002\u672c\u8282\u4f1a\u5bf9 C/C++ \u5e38\u7528\u7684 gdb (GNU Project debugger) \u8fdb\u884c\u4ecb\u7ecd\u3002 \u4f8b\u5982\uff0c\u5728\u4ee5\u4e0b\u7684\u7a0b\u5e8f\u4e2d\uff0c\u8fd0\u884c\u5230 throw 20 \u65f6\u4f1a\u629b\u51fa\u4e00\u4e2a\u5f02\u5e38 #include <iostream> void foo () { throw 20 ; } int main () { std :: cout << \"testing\" ; foo (); return 0 ; } \u5982\u679c\u4f60\u76f4\u63a5\u7f16\u8bd1\uff08 g++ example.cpp \uff09\u5e76\u8fd0\u884c\uff0c\u4f1a\u5f97\u5230\u4ee5\u4e0b\u8f93\u51fa\uff1a ./a.out terminate called after throwing an instance of 'int' [ 1 ] 12079 IOT instruction ( core dumped ) ./a.out \u6b64\u65f6\u53ea\u77e5\u9053\u7a0b\u5e8f\u53d1\u751f\u4e86\u9519\u8bef\uff0c\u4f46\u5e76\u4e0d\u77e5\u9053\u662f\u54ea\u91cc\u51fa\u4e86\u95ee\u9898\u3002\u8fd9\u65f6\u5019\u5c31\u53ef\u4ee5\u4f7f\u7528 gdb \u6765\u8fdb\u884c\u8c03\u8bd5\uff08\u53d6\u4ee3\u7b80\u5355\u7684 print\uff09\uff1a \u5728\u7f16\u8bd1\u65f6\u4f7f\u7528 g++ example.cpp -g \uff0c\u5b8c\u6210\u7f16\u8bd1\u540e\uff0c\u8fd0\u884c gdb a.out \uff0c\u4f1a\u8fdb\u5165\u4ee5\u4e0b\u754c\u9762\uff1a <some intro here> For help, type \"help\". Type \"apropos word\" to search for commands related to \"word\"... Reading symbols from a.out... (gdb) \u6b64\u65f6\u8f93\u5165 run \u7136\u540e\u56de\u8f66\uff0cgdb \u5c31\u4f1a\u8fd0\u884c\u4f60\u7684\u7a0b\u5e8f\uff0c\u5f97\u5230\uff1a Starting program: /home/catoverflow/Projects/tmp/a.out [Thread debugging using libthread_db enabled] Using host libthread_db library \"/usr/lib/libthread_db.so.1\". terminate called after throwing an instance of 'int' Program received signal SIGABRT, Aborted. 0x00007ffff7ae534c in __pthread_kill_implementation () from /usr/lib/libc.so.6 (gdb) \u8bf4\u660e\u7a0b\u5e8f\u53d1\u751f\u4e86\u9519\u8bef\uff0c\u5e76\u56de\u5230\u7ec8\u7aef\u3002\u8f93\u5165 bt (back trace) \u5e76\u56de\u8f66\u5c31\u53ef\u4ee5\u770b\u5230\u7a0b\u5e8f\u7684\u8c03\u7528\u6808\uff1a (gdb) bt #0 0x00007ffff7ae534c in __pthread_kill_implementation () from /usr/lib/libc.so.6 #1 0x00007ffff7a984b8 in raise () from /usr/lib/libc.so.6 #2 0x00007ffff7a82534 in abort () from /usr/lib/libc.so.6 #3 0x00007ffff7dfc7ee in __gnu_cxx::__verbose_terminate_handler () at /usr/src/debug/gcc/libstdc++-v3/libsupc++/vterminate.cc:95 #4 0x00007ffff7e08c4c in __cxxabiv1::__terminate (handler=<optimized out>) at /usr/src/debug/gcc/libstdc++-v3/libsupc++/eh_terminate.cc:48 #5 0x00007ffff7e08cb9 in std::terminate () at /usr/src/debug/gcc/libstdc++-v3/libsupc++/eh_terminate.cc:58 #6 0x00007ffff7e08f5e in __cxxabiv1::__cxa_throw (obj=<optimized out>, tinfo=0x555555557db0 <typeinfo for int@CXXABI_1.3>, dest=0x0) at /usr/src/debug/gcc/libstdc++-v3/libsupc++/eh_throw.cc:95 #7 0x00005555555551a4 in foo () at example.cpp:5 #8 0x00005555555551c6 in main () at example.cpp:10 \u8c03\u7528\u6808\u5c06\u51fd\u6570\u8c03\u7528\u81ea\u5e95\u5411\u4e0a\u663e\u793a\uff0c\u6700\u4e0a\u9762\u7684\u5c31\u662f\u6700\u540e\u88ab\u8c03\u7528\u7684\u51fd\u6570\uff0c\u5728\u8fd9\u91cc\u4e0a\u9762\u7684\u90fd\u662f\u94fe\u63a5\u7684\u7cfb\u7edf\u5e93\uff0c\u4e0b\u9762\u7684\u4e24\u4e2a\u5219\u662f\u6211\u4eec\u81ea\u5df1\u7684\u51fd\u6570\u3002\u8fd9\u65f6\u5c31\u5f88\u5bb9\u6613\u53d1\u73b0\u9519\u8bef\u53d1\u751f\u5728 foo \u4e2d\uff0c\u4ee3\u7801\u7684\u7b2c\u4e94\u884c\u3002 \u6700\u540e\uff0c\u8f93\u5165 q \u5e76\u56de\u8f66\u5c31\u53ef\u4ee5\u9000\u51fa\u4e86\u3002\u9664\u4e86\u4e0a\u9762\u7684 bt\uff0c\u5e38\u7528\u7684\u6307\u4ee4\u8fd8\u6709 break \uff08\u6dfb\u52a0\u65ad\u70b9\uff09\uff0c\u7528 attach \u547d\u4ee4\u8fde\u63a5\u5230\u7ebf\u7a0b\uff08\u5728\u591a\u7ebf\u7a0b\u8c03\u8bd5\u4e2d\u975e\u5e38\u6709\u7528\uff09\u7b49\u7b49\uff0c\u5177\u4f53\u7684\u7528\u6cd5\u53ef\u4ee5\u67e5\u9605\u76f8\u5173\u6587\u6863\u3002 \u7f16\u8bd1\u65f6\u53c2\u6570 -g \u7684\u4f5c\u7528\uff1f \u5728\u7ec8\u7aef\u8f93\u5165 man gdb \u5e76\u627e\u5230 -g \u7684\u5e2e\u52a9\u6587\u6863\uff0c\u53ef\u4ee5\u770b\u5230\uff1a -g Produce debugging information in the operating system's native format (stabs, COFF, XCOFF, or DWARF). GDB can work with this debugging information. \u7b80\u5355\u6765\u8bf4\uff0c\u8fd9\u4e2a\u53c2\u6570\u4f1a\u5728\u7f16\u8bd1\u7684\u65f6\u5019\u52a0\u5165\u989d\u5916\u7684\u8c03\u8bd5\u4fe1\u606f\uff0c\u6bd4\u5982\u4ee3\u7801\u6240\u5728\u7684\u884c\u53f7\uff08\u5728 gdb \u62a5\u9519\u7684\u65f6\u5019\u975e\u5e38\u6709\u7528\uff0c\u8fd8\u53ef\u4ee5\u62ff\u6765\u63d2\u5165\u65ad\u70b9\uff09\u7b49\u7b49\u3002\u5426\u5219 gdb \u8c03\u8bd5\u7684\u5c31\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u80fd\u8f93\u51fa\u7684\u4fe1\u606f\u4f1a\u5c11\u5f88\u591a\u3002 \u4f60\u4e5f\u53ef\u4ee5\u4e0d\u52a0 -g \uff0c\u7136\u540e\u5bf9\u6bd4\u4e00\u4e0b gdb \u7684\u8f93\u51fa\u3002","title":"\u4f7f\u7528 gdb debug"},{"location":"lab0/#\u4f7f\u7528-ide-\u8fdb\u884c-debug","text":"\u5728\u547d\u4ee4\u884c\u91cc\u7528 gdb debug \u867d\u7136\u7b80\u5355\uff0c\u4f46\u662f\u5f88\u591a\u65f6\u5019\u4e0d\u591f\u76f4\u89c2\u65b9\u4fbf\u3002\u5728 VS\u3001VS Code \u7b49 IDE \u91cc\uff0c\u4f60\u4e5f\u53ef\u4ee5\u7528 IDE \u81ea\u5e26\u7684 debug \u529f\u80fd\uff08\u6709\u4e9b\u662f\u57fa\u4e8e gdb \u7684\uff0c\u4f46\u662f\u63d0\u4f9b\u4e86\u975e\u5e38\u65b9\u4fbf\u7684\u64cd\u4f5c\u754c\u9762\uff09\u3002\u4e0b\u9762\u4ee5 VS Code \u4e3a\u4f8b\uff1a \u76f4\u63a5\u70b9\u51fb debug\uff0c\u9009\u62e9 g++ \u4f5c\u4e3a\u7f16\u8bd1\u5668\u540e\uff0c\u5c31\u53ef\u4ee5\u770b\u5230\u4e0a\u9762\u7684\u754c\u9762\uff08\u56e0\u4e3a\u52a9\u6559\u7684\u4e3b\u9898\u6bd4\u8f83\u597d\u770b\uff0c\u53ef\u80fd\u548c\u4f60\u4eec\u7684\u4e0d\u4e00\u6837 :3\uff09\u3002\u754c\u9762\u5de6\u4fa7\u663e\u793a\u4e86\u5f02\u5e38\u65f6\u5404\u53d8\u91cf\u7684\u503c\uff08\u672c\u4f8b\u5b50\u4e2d\u6ca1\u6709\u5c55\u5f00\uff0c\u5728\u4e0a\u4fa7\uff09\u548c\u8c03\u7528\u6808\uff0c\u4e0b\u65b9\u7684 Debug Console \u663e\u793a\u4e86 gdb \u7684\u8f93\u51fa\uff0c\u4e3b\u754c\u9762\u76f4\u63a5\u6807\u51fa\u4e86\u5f02\u5e38\u7684\u4f4d\u7f6e\uff0c\u975e\u5e38\u65b9\u4fbf\u3002\u9664\u4e86\u4e0a\u9762\u7684\u8fd9\u4e9b\u529f\u80fd\uff0c\u8fd8\u53ef\u4ee5\u70b9\u51fb\u4ee3\u7801\u884c\u53f7\u5de6\u4fa7\u52a0\u5165\u65ad\u70b9\uff0c\u6216\u8005\u5728\u5de6\u680f\u7684 Watch \u4e2d\u52a0\u5165\u76d1\u89c6\u7684\u53d8\u91cf\uff0c\u4ee5\u53ca\u540c\u65f6\u76d1\u63a7\u591a\u4e2a\u5b50\u7ebf\u7a0b\u3002 \u548c VS Code \u7c7b\u4f3c\uff0cVS \u7b49 IDE \u4e5f\u63d0\u4f9b\u4e86\u5f3a\u5927\u7684\u8c03\u8bd5\u529f\u80fd\uff0c\u5e0c\u671b\u540c\u5b66\u4eec\u80fd\u5728\u5b9e\u9a8c\u4e2d\u8fdb\u884c\u63a2\u7d22\uff0c\u63d0\u9ad8\u81ea\u5df1\u7684\u4ee3\u7801\u6548\u7387\u3002","title":"\u4f7f\u7528 IDE \u8fdb\u884c debug"},{"location":"lab1/","text":"\u5b9e\u9a8c\u4e00 \u00b6 \u521b\u5efa\u5b9e\u9a8c\u79c1\u6709\u4ed3\u5e93 \u00b6 \u4f60\u9700\u8981\u521b\u5efa\u4e00\u4e2a GitHub \u8d26\u53f7\uff0c\u5e76\u4e14\u521b\u5efa\u4e00\u4e2a \u79c1\u6709\uff08private\uff09 \u7684\u4ed3\u5e93\uff08repository\uff09\uff0c\u5e76\u547d\u540d\u4e3a osh-2022-labs \u3002 \u8bf7\u52a1\u5fc5\u786e\u4fdd\u4ee5\u4e0a\u64cd\u4f5c\u88ab\u51c6\u786e\u65e0\u8bef\u5730\u5b8c\u6210\u2014\u2014\u7531\u4e8e\u4e00\u90e8\u5206\u5b9e\u9a8c\u6d4b\u8bc4\u4f1a\u4f7f\u7528\u81ea\u52a8\u5316\u5de5\u5177\uff0c\u5982\u4e0d\u80fd\u4e0e\u4e0a\u8ff0\u4e00\u81f4\uff0c\u53ef\u80fd\u4f1a\u5f71\u54cd\u4f60\u7684\u5b9e\u9a8c\u5206\u6570\u3002 \u5728\u8fd9\u4e2a\u79c1\u6709\u4ed3\u5e93\u4e2d\uff0c\u4f60\u9700\u8981\u5c06\u52a9\u6559\u7684\u8d26\u53f7 osh-2022-ta \u6dfb\u52a0\u4e3a\u4f60\u7684 collaborator\u3002 \u6dfb\u52a0\u540e GitHub \u4f1a\u5411\u52a9\u6559\u53d1\u9001\u9080\u8bf7\uff0c\u4e4b\u540e\u518d\u5411\u4e09\u4f4d\u52a9\u6559\u4e4b\u4e00\u53d1\u9001\u4f60\u7684\u59d3\u540d\u3001\u5b66\u53f7\u3001GitHub \u8d26\u53f7\u540d\u6765\u8ba9\u52a9\u6559\u786e\u8ba4\u9080\u8bf7\u3002 \u5728\u8fd9\u4e2a\u4ed3\u5e93\u4e0b\uff0c\u6bcf\u4e00\u6b21\u5b9e\u9a8c\uff08\u5b9e\u9a8c\u4e00\u3001\u5b9e\u9a8c\u4e8c\u7b49\u7b49\uff09\u4f1a\u4f7f\u7528\u6839\u76ee\u5f55\u4e0b\u7684\u4e00\u4e2a\u540d\u4e3a lab<x> \u7684\u6587\u4ef6\u5939\u6765\u5b58\u653e\u5b9e\u73b0\u63d0\u4ea4\u6587\u4ef6\uff0c\u4f8b\u5982\uff1a \u5b9e\u9a8c\u4e00\u7684\u63d0\u4ea4\u6587\u4ef6\u653e\u5728 lab1 \u6587\u4ef6\u5939\u4e0b\uff1b \u5b9e\u9a8c\u4e8c\u7684\u63d0\u4ea4\u6587\u4ef6\u653e\u5728 lab2 \u6587\u4ef6\u5939\u4e0b\uff1b \u4f9d\u6b21\u63a8\u8fdb\u3002 \u540e\u7eed\u6bcf\u6b21\u5b9e\u9a8c\u4e2d\u4e5f\u4f1a\u518d\u6b21\u5f3a\u8c03\u63d0\u4ea4\u6587\u4ef6\u7684\u5b58\u653e\u8def\u5f84\u3002 \u53c2\u8003\u8d44\u6599\uff1a GitHub Docs \u5b66\u4e60 Git \u00b6 \u5c3d\u7ba1 GitHub Web Panel \u63d0\u4f9b\u4e00\u90e8\u5206\u7f16\u8f91\u529f\u80fd\uff0c\u4e3a\u4e86\u5728\u4e4b\u540e\u7684\u5b9e\u9a8c\u4e2d\u83b7\u5f97 \u57fa\u672c \u7684\u64cd\u4f5c\u4f53\u9a8c\uff0c\u8bf7\u540c\u5b66\u4eec\u53c2\u8003\u4e00\u4e0b\u94fe\u63a5 \u521d\u6b65\u5b66\u4f1a\u4f7f\u7528 Git\uff1a Git \u7b80\u660e\u6559\u7a0b Git \u6559\u7a0b \u7334\u5b50\u90fd\u80fd\u61c2\u7684 GIT \u6559\u7a0b Pro Git \u7b2c\u4e8c\u7248 \uff08\u8fdb\u9636\uff09 \u53ef\u4ee5\u91cd\u70b9\u5173\u6ce8\u8fd9\u4e9b\u5b50\u547d\u4ee4\uff1ainit\u3001add\u3001commit\u3001log\u3001remote\u3001push\u3001pull\u3001clone\u3001branch\u3001checkout\u3001merge Linux \u7f16\u8bd1 \u00b6 \u63a5\u4e0b\u6765\u5b9e\u9a8c\u4e00\u5c31\u7b97\u662f\u6b63\u5f0f\u5f00\u59cb\u4e86\u3002 \u5728\u7f16\u8bd1\u6e90\u7801\u524d\uff0c\u6211\u4eec\u9700\u8981\u5148\u5b89\u88c5\u7f16\u8bd1\u6240\u9700\u7684\u4f9d\u8d56\uff1a sudo apt install build-essential libncurses-dev bison flex libssl-dev libelf-dev \u5728 kernel.org \u4e0a\u53ef\u4ee5\u4e0b\u8f7d\u5230 Linux \u5185\u6838\u7684\u6e90\u4ee3\u7801\u3002 \u6b64\u6b21\u5b9e\u9a8c\uff0c\u6211\u4eec\u9009\u62e9\u6700\u65b0\u7684\u7a33\u5b9a\u7248\uff0cLinux 5.16.17 \u7684\u5185\u6838\u8fdb\u884c\u7f16\u8bd1\u3002 \u8bf7\u5728 AMD64 \u67b6\u6784\u4e0b\u7684 Linux \u73af\u5883\u4e2d\u8fdb\u884c\u7f16\u8bd1\u3002 \u5982\u679c\u4f60\u4f7f\u7528\u7684\u8bbe\u5907\u662f Apple M1 \u7cfb\u5217\u3001\u67b6\u6784\u4e3a ARM\uff0c\u8bf7\u53ca\u65f6\u8054\u7cfb\u52a9\u6559\u8fdb\u884c\u7279\u6b8a\u5b89\u6392\u3002 \u4e0b\u8f7d\u597d linux-5.16.17.tar.xz \u6587\u4ef6\u540e\uff0c\u89e3\u538b\u7f29\u4e3a\u6587\u4ef6\u5939 linux-5.16.17\uff0c\u8fdb\u5165\u540e\u521b\u5efa\u9ed8\u8ba4\u914d\u7f6e\uff1a \u5982\u679c Linux 5.16.17 \u5df2\u4e0d\u662f\u6700\u65b0\u7248\u672c\uff0c\u53ef\u4ee5\u76f4\u63a5\u9009\u7528\u6700\u65b0\u7248\u672c\u3002\u8981\u70b9\u5728\u4e8e\u4f7f\u7528\u8f83\u65b0\u7684 5.1x \u7248\u672c\u6765\u5b8c\u6210\u5b9e\u9a8c\u3002 make defconfig \u7136\u540e\u4f7f\u7528\u4e0b\u5217\u547d\u4ee4\u4e4b\u4e00\uff08\u63a8\u8350\u524d\u4e24\u8005\uff09\uff0c\u5bf9 Linux \u5185\u6838\u8fdb\u884c\u4fee\u6539\uff1a make xconfig make menuconfig make gconfig make nconfig \u521d\u6b21\u7f16\u8bd1\u53ef\u4ee5\u4e0d\u8fdb\u884c\u4fee\u6539\uff0c\u4f53\u9a8c\u7f16\u8bd1\u7684\u8fc7\u7a0b\u3002 \u6700\u540e\u8fdb\u884c\u7f16\u8bd1\uff0c\u6267\u884c\uff1a make \u5982\u679c\u4f60\u77e5\u9053\u81ea\u5df1\u7684\u8bbe\u5907\u6709\u591a\u5c11 CPU \u6838\u5fc3\uff08\u865a\u62df\u6838\u5fc3\u6570\uff0c\u6216\u8005\u8bf4 CPU \u7ebf\u7a0b\u6570\uff0c\u53ef\u4ee5\u81ea\u884c\u641c\u7d22 \u8d85\u7ebf\u7a0b \u4e86\u89e3\u542b\u4e49\u548c\u533a\u522b\uff09\uff0c\u53ef\u4ee5\u4f7f\u7528\uff1a make -j <cores> <cores> \u53ef\u4ee5\u81ea\u884c\u8c03\u8282\uff0c\u4e0d\u5927\u4e8e\u4e0a\u8ff0 CPU \u865a\u62df\u6838\u5fc3\u6570\u8f83\u4f73\u3002 \u7f16\u8bd1\u5b8c\u6210\u540e\u53ef\u4ee5\u4f7f\u7528 QEMU \u8fdb\u884c\u6d4b\u8bd5\uff1a qemu-system-x86_64 -kernel linux-5.16.17/arch/x86_64/boot/bzImage \u91cd\u590d\u4e0a\u8ff0\u7684\u4fee\u6539\u548c\u7f16\u8bd1\u8fc7\u7a0b\uff0c\u5373\u53ef\u8fdb\u884c\u5bf9\u4e8e Linux \u5185\u6838\u7684\u5220\u51cf\u3002 \u8bc4\u5206\u6807\u51c6 \u00b6 \u63d0\u4ea4\u7f16\u8bd1\u597d\u7684\u5185\u6838\u6587\u4ef6 bzImage \uff0c\u4fdd\u8bc1\u5176\u80fd\u591f\u5b8c\u6210\u540e\u7eed\u5b9e\u9a8c\u2014\u20141 \u5206 bzImage \u6587\u4ef6\u5927\u5c0f\u5c0f\u4e8e 7MiB\u2014\u20141 \u5206 bzImage \u6587\u4ef6\u5927\u5c0f\u5c0f\u4e8e 6MiB\u2014\u20141 \u5206 bzImage \u6587\u4ef6\u5927\u5c0f\u5c0f\u4e8e 4MiB\u2014\u20141 \u5206 \u63d0\u793a \u00b6 \u6b64\u6b21\u5b9e\u9a8c\u4e0d\u662f\u8c03\u53c2\u6bd4\u8d5b\uff0c \u6ee1\u5206\u53ef\u4ee5\u5728\u53ea\u4fee\u6539\u524d\u4e24\u5c42\u9009\u9879\u7684\u60c5\u51b5\u4e0b\u8f7b\u677e\u8fbe\u6210 \uff0c\u8bf7\u6ce8\u610f\u54ea\u4e9b\u9009\u9879\u662f\u80fd\u591f\u771f\u6b63\u5730\u3001\u5207\u5b9e\u5730\u5f71\u54cd\u7f16\u8bd1\u540e\u7684\u5185\u6838\u5927\u5c0f\u7684\u3002 \u6b64\u73af\u8282\u540c\u65f6\u4f1a\u51cf\u5c11\u5185\u6838\u7f16\u8bd1\u65f6\u95f4\uff0c\u4f7f\u5f97\u540e\u7eed\u6d6a\u8d39\u5728\u7f16\u8bd1\u4e0a\u7684\u65f6\u95f4\u51cf\u5c11\u3002 \u6587\u4ef6\u8def\u5f84 \u00b6 \u7f16\u8bd1\u597d\u7684\u5185\u6838\u6587\u4ef6\uff1a\u7f6e\u4e8e /lab1/bzImage \u7f16\u8bd1\u5185\u6838\u65f6\u7684\u914d\u7f6e\u6587\u4ef6\uff1a\u7f6e\u4e8e /lab1/.config \uff08\u53ef\u9009\uff09 \u521b\u5efa\u521d\u59cb\u5185\u5b58\u76d8 \u00b6 Linux \u5728\u542f\u52a8\u65f6\uff0c\u4f1a\u9996\u5148\u52a0\u8f7d\u521d\u59cb\u5185\u5b58\u76d8\uff08initrd\uff0cinit ram disk\uff09\u8fdb\u884c\u521d\u59cb\u5316\u7684\u64cd\u4f5c\u3002 \u4e0b\u9762\u6211\u4eec\u8bb2\u89e3\u5982\u4f55\u521b\u5efa\u4e00\u4e2a\u6700\u5c0f\u5316\u7684 initrd\u3002 \u6211\u4eec\u9996\u5148\u521b\u5efa\u4e00\u4e2a C \u7a0b\u5e8f\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a #include <stdio.h> int main () { printf ( \"Hello, Linux! \\n \" ); while ( 1 ) {} } \u66f4\u65b0 \uff1a return 0; \u88ab\u6362\u4e3a\u4e86 while (1) {} \u4fdd\u5b58\u4e3a init.c\u3002 \u4e4b\u540e\u7f16\u8bd1\uff0c \u9759\u6001\u94fe\u63a5 \u4e3a\u53ef\u6267\u884c\u7a0b\u5e8f\uff1a gcc -static init.c -o init \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u76ee\u5f55\u7528\u4e8e\u6682\u5b58\u6587\u4ef6\u3002 \u5728\u65b0\u7684\u76ee\u5f55\u4e0b\u6253\u5305 initrd\uff1a find . | cpio --quiet -H newc -o | gzip -9 -n > ../initrd.cpio.gz \u8fd9\u4f1a\u5728\u76ee\u5f55\u5916\u521b\u5efa\u538b\u7f29\u540e\u7684 initrd.cpio.gz \u521d\u59cb\u5185\u5b58\u76d8\u3002 \u540c\u6837\uff0c\u6211\u4eec\u4f7f\u7528 QEMU \u6d4b\u8bd5\u6548\u679c\uff1a qemu-system-x86_64 -kernel linux-5.16.17/arch/x86_64/boot/bzImage -initrd initrd.cpio.gz \u5f53\u4f60\u5728\u5c4f\u5e55\u4e0a\u770b\u5230 \"Hello, Linux!\" \u7684\u65f6\u5019\uff0c\u5c31\u6210\u529f\u4e86\u3002 \u5982\u679c\u4f60\u770b\u4e0d\u6e05\u8f93\u51fa\u7684\u4fe1\u606f\uff0c\u53c8\u53d1\u73b0\u65e0\u6cd5\u4e0a\u7ffb\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u6307\u4ee4\uff1a qemu-system-x86_64 -kernel linux-5.16.17/arch/x86_64/boot/bzImage -initrd initrd.cpio.gz -nographic -append console = ttyS0 \u6ce8\u610f\u6b64\u547d\u4ee4\u6267\u884c\u540e Ctrl+C \u65e0\u6cd5\u7ec8\u6b62\uff0c\u9700\u8981\u5173\u95ed Terminal \u6216\u8005 kill \u5bf9\u5e94\u8fdb\u7a0b\u3002 \u66f4\u65b0 \uff1a\u6ce8\u610f\uff1ainit \u5c06\u4f1a\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u7528\u6237\u6001\u8fdb\u7a0b\u88ab\u542f\u52a8\uff0c\u6210\u4e3a\u6240\u6709\u540e\u7eed\u8fdb\u7a0b\u7684\u7236\u8fdb\u7a0b\u3002\u6b64\u8fdb\u7a0b\u5982\u679c\u9000\u51fa\u4f1a\u5bfc\u81f4 kernel panic\u3002 \u5982\u679c\u4f60\u9047\u5230\u4e86 kernel panic\uff0c\u53c8\u8ba4\u4e3a\u81ea\u5df1\u7684\u64cd\u4f5c\u6ca1\u6709\u95ee\u9898\uff0c\u4e0d\u59a8\u4f7f\u7528\u4e0a\u65b9\u6307\u4ee4\u67e5\u770b log \u6765\u786e\u8ba4\u4e00\u4e0b\u3002 \u8bc4\u5206\u6807\u51c6 \u00b6 \u63d0\u4ea4\u7f16\u8bd1\u597d\u7684\u521d\u59cb\u5185\u5b58\u76d8 initrd.cpio.gz \uff0c\u4fdd\u8bc1\u5176\u80fd\u591f\u663e\u793a \"Hello, Linux!\"\u2014\u20142 \u5206 \u6587\u4ef6\u8def\u5f84 \u00b6 \u7f16\u8bd1\u597d\u7684\u521d\u59cb\u5185\u5b58\u76d8\u6587\u4ef6\uff1a\u7f6e\u4e8e /lab1/initrd.cpio.gz \u6dfb\u52a0\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684 Linux syscall \u00b6 \u672c\u8282\u6211\u4eec\u5c06\u4e3a Linux \u6dfb\u52a0\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684 syscall\uff0c\u6765\u83b7\u5f97\u4e00\u4e32\u5b57\u7b26\u4e32 \"Hello, world!\\n\"\u3002 \u9996\u5148\u56de\u5230 linux \u6e90\u7801\u6587\u4ef6\u5939 linux-5.16.17\uff0c\u6dfb\u52a0\u4e00\u4e2a\u6587\u4ef6 custom/hello.c \uff1a #include <linux/string.h> #include <linux/syscalls.h> #include <linux/uaccess.h> SYSCALL_DEFINE2 ( hello , char * , buf , size_t , buf_len ) { static const char s [] = \"Hello, world! \\n \" ; if ( strlen ( s ) <= buf_len ) { return copy_to_user ( buf , s , sizeof ( s )); } else { return -1 ; } } SYSCALL_DEFINE2 \u5c31\u662f\u4e00\u4e2a\u51fd\u6570\u5b9a\u4e49\uff0c\u6b64\u5904\u80fd\u591f\u5f88\u65b9\u4fbf\u5730\u540c\u65f6\u4e3a 32 bit \u548c 64 bit \u58f0\u660e\u5bf9\u5e94\u51fd\u6570\u3002 \u6b64\u5904\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 memcpy \uff08\u5185\u6838\u6001\u53ef\u4ee5\u89e3\u5f15\u7528\u7528\u6237\u6001\u6307\u9488\uff09\uff0c\u4e0d\u8fc7 copy_to_user \u53ef\u4ee5\u534f\u52a9\u6821\u9a8c\u76ee\u6807\u5730\u5740\u662f\u5426\u53ef\u5199\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u6b64\u6587\u4ef6\u6dfb\u52a0\u5230 Linux \u7684\u7f16\u8bd1\u5de5\u5177\u94fe\u4e2d\u3002 \u6253\u5f00 Makefile \u6587\u4ef6\uff0c\u627e\u5230 kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ \u6240\u5728\u7684\u884c\uff0c\u5c06 custom/ \u4e5f\u6dfb\u52a0\u5230\u6b64\u5217\u8868\u4e2d\uff0c\u53d8\u4e3a\uff1a <...> core-y += kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ custom/ <...> \u518d\u5728 custom \u4e0b\u521b\u5efa\u6587\u4ef6 Makefile \uff0c\u5185\u5bb9\u4ec5\u4e3a\uff1a obj-y := hello.o \u4e4b\u540e\u7f16\u8bd1\u65f6\u5c31\u4f1a\u5c06\u6211\u4eec\u81ea\u884c\u6dfb\u52a0\u7684 custom/hello.c \u6587\u4ef6\u7eb3\u5165\u5230\u7f16\u8bd1\u548c\u94fe\u63a5\u4e2d\u4e86\u3002 \u6700\u540e\u6765\u89e3\u51b3 syscall \u7684\u90e8\u5206\u3002 \u65e2\u7136\u6211\u4eec\u7684\u67b6\u6784\u662f x86_64\uff08\u6216\u8005\u8bf4 amd64\uff0c\u517c\u5bb9 x86\uff09\uff0c\u6253\u5f00 arch/x86/entry/syscalls/syscall_64.tbl syscall \u8868\u6587\u4ef6\u5728\u6700\u540e\u4e00\u884c\u6dfb\u52a0\u4e00\u4e2a\u65b0 syscall\uff1a <...> 548 common hello sys_hello \u8bb0\u4f4f\u8fd9\u4e2a\u6570\u5b57 548\uff0c\u4e4b\u540e\u6211\u4eec\u4f1a\u7528\u6b64\u6570\u5b57\u6765\u8fdb\u884c\u8c03\u7528\u3002 \u7136\u540e\u5728 include/linux/syscalls.h \u4e2d\u6dfb\u52a0\u4e00\u884c\u58f0\u660e\uff1a // <...> asmlinkage long sys_hello ( char * buf , int buf_len ); // <...> \u63a5\u4e0b\u6765\u91cd\u65b0\u7f16\u8bd1\u5185\u6838\uff0csyscall \u5c31\u6dfb\u52a0\u5b8c\u6210\u4e86\u3002 \u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a initrd \u7a0b\u5e8f\u6765\u8fdb\u884c\u6d4b\u8bd5\u3002 \u8bf7\u81ea\u884c\u67e5\u8be2 syscall Linux \u6587\u6863 \uff0c\u7f16\u5199\u7a0b\u5e8f\u6d4b\u8bd5\u4ee5\u4e0a\u81ea\u884c\u6dfb\u52a0\u7684\u81ea\u5b9a\u4e49 syscall\uff0c\u4f7f\u5f97\u63d0\u4f9b\u7684 buffer \u957f\u5ea6\u5728\u5145\u8db3\u548c\u4e0d\u8db3\u65f6\u5747\u80fd\u8f93\u51fa\u5e0c\u671b\u7684\u7ed3\u679c\uff1a \u957f\u5ea6\u5145\u8db3\u65f6\uff0c\u8fd4\u56de 0\uff0cbuffer \u4e2d\u5b58\u653e\u5b8c\u6574\u7684 \"Hello, world!\\n\" \u957f\u5ea6\u4e0d\u5145\u8db3\u65f6\uff0c\u8fd4\u56de -1 \u8bc4\u5206\u6807\u51c6 \u00b6 \u63d0\u4ea4\u7f16\u8bd1\u597d\u7684\u5185\u6838 bzImage \uff0c\u4fdd\u8bc1\u80fd\u591f\u5728 buffer \u957f\u5ea6\u5145\u8db3\u65f6\u5b8c\u6210 syscall\u2014\u20142 \u5206 \u7f16\u8bd1\u597d\u7684\u5185\u6838 bzImage \u4e5f\u80fd\u4fdd\u8bc1\u5728 buffer \u957f\u5ea6\u4e0d\u5145\u8db3\u65f6\u5b8c\u6210 syscall\u2014\u20142 \u5206 \u63d0\u4ea4\u6d4b\u8bd5 syscall \u7684 initrd \u6e90\u4ee3\u7801\u6587\u4ef6\u2014\u20142 \u5206 \u6587\u4ef6\u8def\u5f84 \u00b6 \u7f16\u8bd1\u597d\u7684\u5185\u6838\u6587\u4ef6\uff1a\u7f6e\u4e8e /lab1/syscall/bzImage \u6d4b\u8bd5 syscall \u7684\u6e90\u4ee3\u7801\u6587\u4ef6 /lab1/syscall/initrd.c DDL \u4e0e\u603b\u8bc4\u5206\u6807\u51c6 \u00b6 \u6b64\u6b21\u5b9e\u9a8c\u622a\u81f3\u65f6\u95f4\u4e3a 4 \u6708 16 \u65e5 23:59\uff0c\u4ee5 commit \u65f6\u95f4\u4e3a\u51c6\u3002 \u672c\u6b21\u5b9e\u9a8c\u6ee1\u5206 10 \u5206\uff0c\u7531\u4e8e\u6240\u6709\u53ef\u83b7\u5f97\u5206\u6570\u4e3a 12 \u5206\uff0c\u8d85\u51fa 10 \u5206\u7684\u5206\u6570\u4f1a\u4f5c\u4e3a\u52a0\u5206\u88ab\u8ba1\u5165\u5b9e\u9a8c\u603b\u5206\u3002 \u7b54\u6848/\u52a9\u6559\u8bbe\u8ba1\u8d44\u6e90 \u00b6 \u53c2\u89c1 OSH-2022/lab1-ta","title":"\u5b9e\u9a8c\u4e00"},{"location":"lab1/#\u5b9e\u9a8c\u4e00","text":"","title":"\u5b9e\u9a8c\u4e00"},{"location":"lab1/#\u521b\u5efa\u5b9e\u9a8c\u79c1\u6709\u4ed3\u5e93","text":"\u4f60\u9700\u8981\u521b\u5efa\u4e00\u4e2a GitHub \u8d26\u53f7\uff0c\u5e76\u4e14\u521b\u5efa\u4e00\u4e2a \u79c1\u6709\uff08private\uff09 \u7684\u4ed3\u5e93\uff08repository\uff09\uff0c\u5e76\u547d\u540d\u4e3a osh-2022-labs \u3002 \u8bf7\u52a1\u5fc5\u786e\u4fdd\u4ee5\u4e0a\u64cd\u4f5c\u88ab\u51c6\u786e\u65e0\u8bef\u5730\u5b8c\u6210\u2014\u2014\u7531\u4e8e\u4e00\u90e8\u5206\u5b9e\u9a8c\u6d4b\u8bc4\u4f1a\u4f7f\u7528\u81ea\u52a8\u5316\u5de5\u5177\uff0c\u5982\u4e0d\u80fd\u4e0e\u4e0a\u8ff0\u4e00\u81f4\uff0c\u53ef\u80fd\u4f1a\u5f71\u54cd\u4f60\u7684\u5b9e\u9a8c\u5206\u6570\u3002 \u5728\u8fd9\u4e2a\u79c1\u6709\u4ed3\u5e93\u4e2d\uff0c\u4f60\u9700\u8981\u5c06\u52a9\u6559\u7684\u8d26\u53f7 osh-2022-ta \u6dfb\u52a0\u4e3a\u4f60\u7684 collaborator\u3002 \u6dfb\u52a0\u540e GitHub \u4f1a\u5411\u52a9\u6559\u53d1\u9001\u9080\u8bf7\uff0c\u4e4b\u540e\u518d\u5411\u4e09\u4f4d\u52a9\u6559\u4e4b\u4e00\u53d1\u9001\u4f60\u7684\u59d3\u540d\u3001\u5b66\u53f7\u3001GitHub \u8d26\u53f7\u540d\u6765\u8ba9\u52a9\u6559\u786e\u8ba4\u9080\u8bf7\u3002 \u5728\u8fd9\u4e2a\u4ed3\u5e93\u4e0b\uff0c\u6bcf\u4e00\u6b21\u5b9e\u9a8c\uff08\u5b9e\u9a8c\u4e00\u3001\u5b9e\u9a8c\u4e8c\u7b49\u7b49\uff09\u4f1a\u4f7f\u7528\u6839\u76ee\u5f55\u4e0b\u7684\u4e00\u4e2a\u540d\u4e3a lab<x> \u7684\u6587\u4ef6\u5939\u6765\u5b58\u653e\u5b9e\u73b0\u63d0\u4ea4\u6587\u4ef6\uff0c\u4f8b\u5982\uff1a \u5b9e\u9a8c\u4e00\u7684\u63d0\u4ea4\u6587\u4ef6\u653e\u5728 lab1 \u6587\u4ef6\u5939\u4e0b\uff1b \u5b9e\u9a8c\u4e8c\u7684\u63d0\u4ea4\u6587\u4ef6\u653e\u5728 lab2 \u6587\u4ef6\u5939\u4e0b\uff1b \u4f9d\u6b21\u63a8\u8fdb\u3002 \u540e\u7eed\u6bcf\u6b21\u5b9e\u9a8c\u4e2d\u4e5f\u4f1a\u518d\u6b21\u5f3a\u8c03\u63d0\u4ea4\u6587\u4ef6\u7684\u5b58\u653e\u8def\u5f84\u3002 \u53c2\u8003\u8d44\u6599\uff1a GitHub Docs","title":"\u521b\u5efa\u5b9e\u9a8c\u79c1\u6709\u4ed3\u5e93"},{"location":"lab1/#\u5b66\u4e60-git","text":"\u5c3d\u7ba1 GitHub Web Panel \u63d0\u4f9b\u4e00\u90e8\u5206\u7f16\u8f91\u529f\u80fd\uff0c\u4e3a\u4e86\u5728\u4e4b\u540e\u7684\u5b9e\u9a8c\u4e2d\u83b7\u5f97 \u57fa\u672c \u7684\u64cd\u4f5c\u4f53\u9a8c\uff0c\u8bf7\u540c\u5b66\u4eec\u53c2\u8003\u4e00\u4e0b\u94fe\u63a5 \u521d\u6b65\u5b66\u4f1a\u4f7f\u7528 Git\uff1a Git \u7b80\u660e\u6559\u7a0b Git \u6559\u7a0b \u7334\u5b50\u90fd\u80fd\u61c2\u7684 GIT \u6559\u7a0b Pro Git \u7b2c\u4e8c\u7248 \uff08\u8fdb\u9636\uff09 \u53ef\u4ee5\u91cd\u70b9\u5173\u6ce8\u8fd9\u4e9b\u5b50\u547d\u4ee4\uff1ainit\u3001add\u3001commit\u3001log\u3001remote\u3001push\u3001pull\u3001clone\u3001branch\u3001checkout\u3001merge","title":"\u5b66\u4e60 Git"},{"location":"lab1/#linux-\u7f16\u8bd1","text":"\u63a5\u4e0b\u6765\u5b9e\u9a8c\u4e00\u5c31\u7b97\u662f\u6b63\u5f0f\u5f00\u59cb\u4e86\u3002 \u5728\u7f16\u8bd1\u6e90\u7801\u524d\uff0c\u6211\u4eec\u9700\u8981\u5148\u5b89\u88c5\u7f16\u8bd1\u6240\u9700\u7684\u4f9d\u8d56\uff1a sudo apt install build-essential libncurses-dev bison flex libssl-dev libelf-dev \u5728 kernel.org \u4e0a\u53ef\u4ee5\u4e0b\u8f7d\u5230 Linux \u5185\u6838\u7684\u6e90\u4ee3\u7801\u3002 \u6b64\u6b21\u5b9e\u9a8c\uff0c\u6211\u4eec\u9009\u62e9\u6700\u65b0\u7684\u7a33\u5b9a\u7248\uff0cLinux 5.16.17 \u7684\u5185\u6838\u8fdb\u884c\u7f16\u8bd1\u3002 \u8bf7\u5728 AMD64 \u67b6\u6784\u4e0b\u7684 Linux \u73af\u5883\u4e2d\u8fdb\u884c\u7f16\u8bd1\u3002 \u5982\u679c\u4f60\u4f7f\u7528\u7684\u8bbe\u5907\u662f Apple M1 \u7cfb\u5217\u3001\u67b6\u6784\u4e3a ARM\uff0c\u8bf7\u53ca\u65f6\u8054\u7cfb\u52a9\u6559\u8fdb\u884c\u7279\u6b8a\u5b89\u6392\u3002 \u4e0b\u8f7d\u597d linux-5.16.17.tar.xz \u6587\u4ef6\u540e\uff0c\u89e3\u538b\u7f29\u4e3a\u6587\u4ef6\u5939 linux-5.16.17\uff0c\u8fdb\u5165\u540e\u521b\u5efa\u9ed8\u8ba4\u914d\u7f6e\uff1a \u5982\u679c Linux 5.16.17 \u5df2\u4e0d\u662f\u6700\u65b0\u7248\u672c\uff0c\u53ef\u4ee5\u76f4\u63a5\u9009\u7528\u6700\u65b0\u7248\u672c\u3002\u8981\u70b9\u5728\u4e8e\u4f7f\u7528\u8f83\u65b0\u7684 5.1x \u7248\u672c\u6765\u5b8c\u6210\u5b9e\u9a8c\u3002 make defconfig \u7136\u540e\u4f7f\u7528\u4e0b\u5217\u547d\u4ee4\u4e4b\u4e00\uff08\u63a8\u8350\u524d\u4e24\u8005\uff09\uff0c\u5bf9 Linux \u5185\u6838\u8fdb\u884c\u4fee\u6539\uff1a make xconfig make menuconfig make gconfig make nconfig \u521d\u6b21\u7f16\u8bd1\u53ef\u4ee5\u4e0d\u8fdb\u884c\u4fee\u6539\uff0c\u4f53\u9a8c\u7f16\u8bd1\u7684\u8fc7\u7a0b\u3002 \u6700\u540e\u8fdb\u884c\u7f16\u8bd1\uff0c\u6267\u884c\uff1a make \u5982\u679c\u4f60\u77e5\u9053\u81ea\u5df1\u7684\u8bbe\u5907\u6709\u591a\u5c11 CPU \u6838\u5fc3\uff08\u865a\u62df\u6838\u5fc3\u6570\uff0c\u6216\u8005\u8bf4 CPU \u7ebf\u7a0b\u6570\uff0c\u53ef\u4ee5\u81ea\u884c\u641c\u7d22 \u8d85\u7ebf\u7a0b \u4e86\u89e3\u542b\u4e49\u548c\u533a\u522b\uff09\uff0c\u53ef\u4ee5\u4f7f\u7528\uff1a make -j <cores> <cores> \u53ef\u4ee5\u81ea\u884c\u8c03\u8282\uff0c\u4e0d\u5927\u4e8e\u4e0a\u8ff0 CPU \u865a\u62df\u6838\u5fc3\u6570\u8f83\u4f73\u3002 \u7f16\u8bd1\u5b8c\u6210\u540e\u53ef\u4ee5\u4f7f\u7528 QEMU \u8fdb\u884c\u6d4b\u8bd5\uff1a qemu-system-x86_64 -kernel linux-5.16.17/arch/x86_64/boot/bzImage \u91cd\u590d\u4e0a\u8ff0\u7684\u4fee\u6539\u548c\u7f16\u8bd1\u8fc7\u7a0b\uff0c\u5373\u53ef\u8fdb\u884c\u5bf9\u4e8e Linux \u5185\u6838\u7684\u5220\u51cf\u3002","title":"Linux \u7f16\u8bd1"},{"location":"lab1/#\u8bc4\u5206\u6807\u51c6","text":"\u63d0\u4ea4\u7f16\u8bd1\u597d\u7684\u5185\u6838\u6587\u4ef6 bzImage \uff0c\u4fdd\u8bc1\u5176\u80fd\u591f\u5b8c\u6210\u540e\u7eed\u5b9e\u9a8c\u2014\u20141 \u5206 bzImage \u6587\u4ef6\u5927\u5c0f\u5c0f\u4e8e 7MiB\u2014\u20141 \u5206 bzImage \u6587\u4ef6\u5927\u5c0f\u5c0f\u4e8e 6MiB\u2014\u20141 \u5206 bzImage \u6587\u4ef6\u5927\u5c0f\u5c0f\u4e8e 4MiB\u2014\u20141 \u5206","title":"\u8bc4\u5206\u6807\u51c6"},{"location":"lab1/#\u63d0\u793a","text":"\u6b64\u6b21\u5b9e\u9a8c\u4e0d\u662f\u8c03\u53c2\u6bd4\u8d5b\uff0c \u6ee1\u5206\u53ef\u4ee5\u5728\u53ea\u4fee\u6539\u524d\u4e24\u5c42\u9009\u9879\u7684\u60c5\u51b5\u4e0b\u8f7b\u677e\u8fbe\u6210 \uff0c\u8bf7\u6ce8\u610f\u54ea\u4e9b\u9009\u9879\u662f\u80fd\u591f\u771f\u6b63\u5730\u3001\u5207\u5b9e\u5730\u5f71\u54cd\u7f16\u8bd1\u540e\u7684\u5185\u6838\u5927\u5c0f\u7684\u3002 \u6b64\u73af\u8282\u540c\u65f6\u4f1a\u51cf\u5c11\u5185\u6838\u7f16\u8bd1\u65f6\u95f4\uff0c\u4f7f\u5f97\u540e\u7eed\u6d6a\u8d39\u5728\u7f16\u8bd1\u4e0a\u7684\u65f6\u95f4\u51cf\u5c11\u3002","title":"\u63d0\u793a"},{"location":"lab1/#\u6587\u4ef6\u8def\u5f84","text":"\u7f16\u8bd1\u597d\u7684\u5185\u6838\u6587\u4ef6\uff1a\u7f6e\u4e8e /lab1/bzImage \u7f16\u8bd1\u5185\u6838\u65f6\u7684\u914d\u7f6e\u6587\u4ef6\uff1a\u7f6e\u4e8e /lab1/.config \uff08\u53ef\u9009\uff09","title":"\u6587\u4ef6\u8def\u5f84"},{"location":"lab1/#\u521b\u5efa\u521d\u59cb\u5185\u5b58\u76d8","text":"Linux \u5728\u542f\u52a8\u65f6\uff0c\u4f1a\u9996\u5148\u52a0\u8f7d\u521d\u59cb\u5185\u5b58\u76d8\uff08initrd\uff0cinit ram disk\uff09\u8fdb\u884c\u521d\u59cb\u5316\u7684\u64cd\u4f5c\u3002 \u4e0b\u9762\u6211\u4eec\u8bb2\u89e3\u5982\u4f55\u521b\u5efa\u4e00\u4e2a\u6700\u5c0f\u5316\u7684 initrd\u3002 \u6211\u4eec\u9996\u5148\u521b\u5efa\u4e00\u4e2a C \u7a0b\u5e8f\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a #include <stdio.h> int main () { printf ( \"Hello, Linux! \\n \" ); while ( 1 ) {} } \u66f4\u65b0 \uff1a return 0; \u88ab\u6362\u4e3a\u4e86 while (1) {} \u4fdd\u5b58\u4e3a init.c\u3002 \u4e4b\u540e\u7f16\u8bd1\uff0c \u9759\u6001\u94fe\u63a5 \u4e3a\u53ef\u6267\u884c\u7a0b\u5e8f\uff1a gcc -static init.c -o init \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u76ee\u5f55\u7528\u4e8e\u6682\u5b58\u6587\u4ef6\u3002 \u5728\u65b0\u7684\u76ee\u5f55\u4e0b\u6253\u5305 initrd\uff1a find . | cpio --quiet -H newc -o | gzip -9 -n > ../initrd.cpio.gz \u8fd9\u4f1a\u5728\u76ee\u5f55\u5916\u521b\u5efa\u538b\u7f29\u540e\u7684 initrd.cpio.gz \u521d\u59cb\u5185\u5b58\u76d8\u3002 \u540c\u6837\uff0c\u6211\u4eec\u4f7f\u7528 QEMU \u6d4b\u8bd5\u6548\u679c\uff1a qemu-system-x86_64 -kernel linux-5.16.17/arch/x86_64/boot/bzImage -initrd initrd.cpio.gz \u5f53\u4f60\u5728\u5c4f\u5e55\u4e0a\u770b\u5230 \"Hello, Linux!\" \u7684\u65f6\u5019\uff0c\u5c31\u6210\u529f\u4e86\u3002 \u5982\u679c\u4f60\u770b\u4e0d\u6e05\u8f93\u51fa\u7684\u4fe1\u606f\uff0c\u53c8\u53d1\u73b0\u65e0\u6cd5\u4e0a\u7ffb\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u6307\u4ee4\uff1a qemu-system-x86_64 -kernel linux-5.16.17/arch/x86_64/boot/bzImage -initrd initrd.cpio.gz -nographic -append console = ttyS0 \u6ce8\u610f\u6b64\u547d\u4ee4\u6267\u884c\u540e Ctrl+C \u65e0\u6cd5\u7ec8\u6b62\uff0c\u9700\u8981\u5173\u95ed Terminal \u6216\u8005 kill \u5bf9\u5e94\u8fdb\u7a0b\u3002 \u66f4\u65b0 \uff1a\u6ce8\u610f\uff1ainit \u5c06\u4f1a\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u7528\u6237\u6001\u8fdb\u7a0b\u88ab\u542f\u52a8\uff0c\u6210\u4e3a\u6240\u6709\u540e\u7eed\u8fdb\u7a0b\u7684\u7236\u8fdb\u7a0b\u3002\u6b64\u8fdb\u7a0b\u5982\u679c\u9000\u51fa\u4f1a\u5bfc\u81f4 kernel panic\u3002 \u5982\u679c\u4f60\u9047\u5230\u4e86 kernel panic\uff0c\u53c8\u8ba4\u4e3a\u81ea\u5df1\u7684\u64cd\u4f5c\u6ca1\u6709\u95ee\u9898\uff0c\u4e0d\u59a8\u4f7f\u7528\u4e0a\u65b9\u6307\u4ee4\u67e5\u770b log \u6765\u786e\u8ba4\u4e00\u4e0b\u3002","title":"\u521b\u5efa\u521d\u59cb\u5185\u5b58\u76d8"},{"location":"lab1/#\u8bc4\u5206\u6807\u51c6_1","text":"\u63d0\u4ea4\u7f16\u8bd1\u597d\u7684\u521d\u59cb\u5185\u5b58\u76d8 initrd.cpio.gz \uff0c\u4fdd\u8bc1\u5176\u80fd\u591f\u663e\u793a \"Hello, Linux!\"\u2014\u20142 \u5206","title":"\u8bc4\u5206\u6807\u51c6"},{"location":"lab1/#\u6587\u4ef6\u8def\u5f84_1","text":"\u7f16\u8bd1\u597d\u7684\u521d\u59cb\u5185\u5b58\u76d8\u6587\u4ef6\uff1a\u7f6e\u4e8e /lab1/initrd.cpio.gz","title":"\u6587\u4ef6\u8def\u5f84"},{"location":"lab1/#\u6dfb\u52a0\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684-linux-syscall","text":"\u672c\u8282\u6211\u4eec\u5c06\u4e3a Linux \u6dfb\u52a0\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684 syscall\uff0c\u6765\u83b7\u5f97\u4e00\u4e32\u5b57\u7b26\u4e32 \"Hello, world!\\n\"\u3002 \u9996\u5148\u56de\u5230 linux \u6e90\u7801\u6587\u4ef6\u5939 linux-5.16.17\uff0c\u6dfb\u52a0\u4e00\u4e2a\u6587\u4ef6 custom/hello.c \uff1a #include <linux/string.h> #include <linux/syscalls.h> #include <linux/uaccess.h> SYSCALL_DEFINE2 ( hello , char * , buf , size_t , buf_len ) { static const char s [] = \"Hello, world! \\n \" ; if ( strlen ( s ) <= buf_len ) { return copy_to_user ( buf , s , sizeof ( s )); } else { return -1 ; } } SYSCALL_DEFINE2 \u5c31\u662f\u4e00\u4e2a\u51fd\u6570\u5b9a\u4e49\uff0c\u6b64\u5904\u80fd\u591f\u5f88\u65b9\u4fbf\u5730\u540c\u65f6\u4e3a 32 bit \u548c 64 bit \u58f0\u660e\u5bf9\u5e94\u51fd\u6570\u3002 \u6b64\u5904\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 memcpy \uff08\u5185\u6838\u6001\u53ef\u4ee5\u89e3\u5f15\u7528\u7528\u6237\u6001\u6307\u9488\uff09\uff0c\u4e0d\u8fc7 copy_to_user \u53ef\u4ee5\u534f\u52a9\u6821\u9a8c\u76ee\u6807\u5730\u5740\u662f\u5426\u53ef\u5199\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u6b64\u6587\u4ef6\u6dfb\u52a0\u5230 Linux \u7684\u7f16\u8bd1\u5de5\u5177\u94fe\u4e2d\u3002 \u6253\u5f00 Makefile \u6587\u4ef6\uff0c\u627e\u5230 kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ \u6240\u5728\u7684\u884c\uff0c\u5c06 custom/ \u4e5f\u6dfb\u52a0\u5230\u6b64\u5217\u8868\u4e2d\uff0c\u53d8\u4e3a\uff1a <...> core-y += kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ custom/ <...> \u518d\u5728 custom \u4e0b\u521b\u5efa\u6587\u4ef6 Makefile \uff0c\u5185\u5bb9\u4ec5\u4e3a\uff1a obj-y := hello.o \u4e4b\u540e\u7f16\u8bd1\u65f6\u5c31\u4f1a\u5c06\u6211\u4eec\u81ea\u884c\u6dfb\u52a0\u7684 custom/hello.c \u6587\u4ef6\u7eb3\u5165\u5230\u7f16\u8bd1\u548c\u94fe\u63a5\u4e2d\u4e86\u3002 \u6700\u540e\u6765\u89e3\u51b3 syscall \u7684\u90e8\u5206\u3002 \u65e2\u7136\u6211\u4eec\u7684\u67b6\u6784\u662f x86_64\uff08\u6216\u8005\u8bf4 amd64\uff0c\u517c\u5bb9 x86\uff09\uff0c\u6253\u5f00 arch/x86/entry/syscalls/syscall_64.tbl syscall \u8868\u6587\u4ef6\u5728\u6700\u540e\u4e00\u884c\u6dfb\u52a0\u4e00\u4e2a\u65b0 syscall\uff1a <...> 548 common hello sys_hello \u8bb0\u4f4f\u8fd9\u4e2a\u6570\u5b57 548\uff0c\u4e4b\u540e\u6211\u4eec\u4f1a\u7528\u6b64\u6570\u5b57\u6765\u8fdb\u884c\u8c03\u7528\u3002 \u7136\u540e\u5728 include/linux/syscalls.h \u4e2d\u6dfb\u52a0\u4e00\u884c\u58f0\u660e\uff1a // <...> asmlinkage long sys_hello ( char * buf , int buf_len ); // <...> \u63a5\u4e0b\u6765\u91cd\u65b0\u7f16\u8bd1\u5185\u6838\uff0csyscall \u5c31\u6dfb\u52a0\u5b8c\u6210\u4e86\u3002 \u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a initrd \u7a0b\u5e8f\u6765\u8fdb\u884c\u6d4b\u8bd5\u3002 \u8bf7\u81ea\u884c\u67e5\u8be2 syscall Linux \u6587\u6863 \uff0c\u7f16\u5199\u7a0b\u5e8f\u6d4b\u8bd5\u4ee5\u4e0a\u81ea\u884c\u6dfb\u52a0\u7684\u81ea\u5b9a\u4e49 syscall\uff0c\u4f7f\u5f97\u63d0\u4f9b\u7684 buffer \u957f\u5ea6\u5728\u5145\u8db3\u548c\u4e0d\u8db3\u65f6\u5747\u80fd\u8f93\u51fa\u5e0c\u671b\u7684\u7ed3\u679c\uff1a \u957f\u5ea6\u5145\u8db3\u65f6\uff0c\u8fd4\u56de 0\uff0cbuffer \u4e2d\u5b58\u653e\u5b8c\u6574\u7684 \"Hello, world!\\n\" \u957f\u5ea6\u4e0d\u5145\u8db3\u65f6\uff0c\u8fd4\u56de -1","title":"\u6dfb\u52a0\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684 Linux syscall"},{"location":"lab1/#\u8bc4\u5206\u6807\u51c6_2","text":"\u63d0\u4ea4\u7f16\u8bd1\u597d\u7684\u5185\u6838 bzImage \uff0c\u4fdd\u8bc1\u80fd\u591f\u5728 buffer \u957f\u5ea6\u5145\u8db3\u65f6\u5b8c\u6210 syscall\u2014\u20142 \u5206 \u7f16\u8bd1\u597d\u7684\u5185\u6838 bzImage \u4e5f\u80fd\u4fdd\u8bc1\u5728 buffer \u957f\u5ea6\u4e0d\u5145\u8db3\u65f6\u5b8c\u6210 syscall\u2014\u20142 \u5206 \u63d0\u4ea4\u6d4b\u8bd5 syscall \u7684 initrd \u6e90\u4ee3\u7801\u6587\u4ef6\u2014\u20142 \u5206","title":"\u8bc4\u5206\u6807\u51c6"},{"location":"lab1/#\u6587\u4ef6\u8def\u5f84_2","text":"\u7f16\u8bd1\u597d\u7684\u5185\u6838\u6587\u4ef6\uff1a\u7f6e\u4e8e /lab1/syscall/bzImage \u6d4b\u8bd5 syscall \u7684\u6e90\u4ee3\u7801\u6587\u4ef6 /lab1/syscall/initrd.c","title":"\u6587\u4ef6\u8def\u5f84"},{"location":"lab1/#ddl-\u4e0e\u603b\u8bc4\u5206\u6807\u51c6","text":"\u6b64\u6b21\u5b9e\u9a8c\u622a\u81f3\u65f6\u95f4\u4e3a 4 \u6708 16 \u65e5 23:59\uff0c\u4ee5 commit \u65f6\u95f4\u4e3a\u51c6\u3002 \u672c\u6b21\u5b9e\u9a8c\u6ee1\u5206 10 \u5206\uff0c\u7531\u4e8e\u6240\u6709\u53ef\u83b7\u5f97\u5206\u6570\u4e3a 12 \u5206\uff0c\u8d85\u51fa 10 \u5206\u7684\u5206\u6570\u4f1a\u4f5c\u4e3a\u52a0\u5206\u88ab\u8ba1\u5165\u5b9e\u9a8c\u603b\u5206\u3002","title":"DDL \u4e0e\u603b\u8bc4\u5206\u6807\u51c6"},{"location":"lab1/#\u7b54\u6848\u52a9\u6559\u8bbe\u8ba1\u8d44\u6e90","text":"\u53c2\u89c1 OSH-2022/lab1-ta","title":"\u7b54\u6848/\u52a9\u6559\u8bbe\u8ba1\u8d44\u6e90"},{"location":"lab2/","text":"\u5b9e\u9a8c\u4e8c \u00b6 \u5728\u5b9e\u9a8c\u4e00\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u8bb8\u591a\u547d\u4ee4\u884c\u64cd\u4f5c\u6765\u5b8c\u6210\u4e00\u7cfb\u5217\u5de5\u4f5c\uff0c\u5982\u7f16\u8bd1 Linux \u5185\u6838\u3001\u6253\u5305 initrd \u7b49\u3002\u6240\u6709\u7684\u547d\u4ee4\u884c\u90fd\u7531\u4e00\u4e2a\u53eb\u505a shell \u7684\u7a0b\u5e8f\u89e3\u91ca\u5e76\u6267\u884c\u3002\u672c\u5b9e\u9a8c\u6211\u4eec\u5c06\u81ea\u5df1\u7f16\u5199\u4e00\u4e2a\u7b80\u5355\u7684 shell \u5e76\u7406\u89e3 Linux shell \u7a0b\u5e8f\u7684\u5de5\u4f5c\u539f\u7406\u3002 \u7f16\u5199 Shell \u7a0b\u5e8f \u00b6 \u9996\u5148\uff0c\u5927\u5bb6\u53ef\u4ee5\u5c06\u672c\u9875\u5e95\u90e8\u52a9\u6559\u7f16\u5199\u7684\u4e00\u4e2a\u793a\u4f8b\u7a0b\u5e8f\u547d\u540d\u4e3a shell.cpp \uff1a g++ shell.cpp -o shell \u4ee5\u4e0a\u547d\u4ee4\u4f1a\u8c03\u7528 g++ \u7f16\u8bd1\u5668\u7f16\u8bd1\u51fa\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6 shell\uff0c\u4f60\u53ef\u4ee5\u7ee7\u7eed\u8f93\u5165 ./shell \u6765\u8fd0\u884c\u5b83\u3002\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u7b80\u964b\u7684 shell\uff0c\u5b83\u4f1a\u63d0\u793a\u4f60\u8f93\u5165\u547d\u4ee4\uff0c\u4f60\u53ef\u4ee5\u8f93\u5165 cd \u6765\u5207\u6362\u5de5\u4f5c\u76ee\u5f55\uff0c\u8f93\u5165 pwd \u663e\u793a\u5f53\u524d\u76ee\u5f55\uff0c\u8f93\u5165 export \u5bfc\u51fa\u73af\u5883\u53d8\u91cf\uff0c\u8f93\u5165 exit \u9000\u51fa\uff0c\u6216\u8005\u8c03\u7528\u7cfb\u7edf\u4e2d\u6709\u7684\u5176\u4ed6\u547d\u4ee4\u6765\u8fd0\u884c\uff0c\u4f8b\u5982 ls \u3001 cat \u7b49\u3002 \u4f60\u7684\u4efb\u52a1\u662f\u5bf9\u8fd9\u4e2a shell \u7a0b\u5e8f\u8fdb\u884c\u4fee\u6539\u5347\u7ea7\uff08\u5f53\u7136\uff0c\u4f60\u4e5f\u53ef\u4ee5\u9009\u62e9\u81ea\u5df1\u4ece\u5934\u6216\u9009\u62e9\u5176\u4ed6\u8bed\u8a00\u7f16\u5199\uff09\uff0c\u5e76\u5b8c\u6210\u4e0b\u9762\u7684\u4efb\u52a1\u3002 \u66f4\u5065\u58ee\uff08\u63a8\u8350\uff0c\u4f46\u4e0d\u8981\u6c42\uff09 \u00b6 \u76ee\u524d\u7684\u793a\u4f8b\u7a0b\u5e8f\u975e\u5e38\u8106\u5f31\uff0c\u4ec5\u968f\u610f\u68c0\u67e5\u4e86\u90e8\u5206\u53ef\u80fd\u7684\u9519\u8bef\u3002\u5efa\u8bae\u4f60\u5c06\u5b83\u6539\u5f97\u66f4\u5065\u58ee\uff0c\u4ee5\u65b9\u4fbf\u4e4b\u540e\u7684\u8fdb\u4e00\u6b65\u5f00\u53d1\u548c\u8c03\u8bd5\u3002 \u652f\u6301\u7ba1\u9053 \u00b6 \u5f62\u5982 env | wc \u8fd9\u6837\u7684\u547d\u4ee4\u5229\u7528\u4e86\u300c\u7ba1\u9053\u300d\u8bed\u6cd5\uff0c\u5c06\u4e24\u6761\u4e0d\u540c\u7684\u547d\u4ee4\u5bf9\u63a5\u5728\u4e00\u8d77\u540c\u65f6\u8fd0\u884c\u3002 | \u7684\u610f\u601d\u662f\u5c06\u524d\u9762\u7684\u547d\u4ee4 env \uff08\u8f93\u51fa\u6240\u6709\u73af\u5883\u53d8\u91cf\uff09\u7684\u6807\u51c6\u8f93\u51fa\u8fde\u63a5\u5230\u540e\u9762\u547d\u4ee4 wc \uff08\u7edf\u8ba1\u884c\u6570\uff09\u7684\u6807\u51c6\u8f93\u5165\uff08\u8fd9\u6837\u5c31\u80fd\u7edf\u8ba1\u51fa\u73af\u5883\u53d8\u91cf\u7684\u603b\u6570\uff09\u3002 \u8bf7\u4f60\u89c2\u5bdf\u5e76\u5b66\u4e60\u8fd9\u4e2a\u8bed\u6cd5\uff0c\u4e3a\u4f60\u7684 shell \u7a0b\u5e8f\u5b9e\u73b0\u8fd9\u4e00\u529f\u80fd\u3002\u4f60\u53ef\u80fd\u8981\u7528\u5230\u7684\u51fd\u6570\uff1a pipe \u3001 close \u3001 dup \u3002\u4f60\u53ef\u4ee5\u8fd0\u884c man \u51fd\u6570\u540d \u6765\u67e5\u770b\u7cfb\u7edf\u81ea\u5e26\u7684\u6587\u6863\uff0c\u6216\u8005\u4e0a\u7f51\u641c\u7d22\u66f4\u591a\u4fe1\u606f\u3002 \u6837\u4f8b\uff1a $ ls | cat -n 1 Cargo.lock 2 Cargo.toml 3 README.md 4 src 5 target $ ls | cat -n | grep 1 1 Cargo.lock \u652f\u6301\u57fa\u672c\u7684\u6587\u4ef6\u91cd\u5b9a\u5411 \u00b6 \u5f62\u5982 ls > out.txt \u4f1a\u5c06 ls \u547d\u4ee4\u7684\u6807\u51c6\u8f93\u51fa\uff08stdout\uff09\u91cd\u5b9a\u5411\u5230 out.txt \u6587\u4ef6\u4e2d\uff0c\u5177\u4f53\u5730\u8bf4\uff0c\u4f1a\u5c06 out.txt \u5173\u8054\u5230\u7a0b\u5e8f\u7684\u6807\u51c6\u8f93\u51fa\uff0c\u7136\u540e\u518d\u8fd0\u884c\u76f8\u5e94\u7684\u547d\u4ee4\u3002\u7c7b\u4f3c\u7684\uff0c ls >> out.txt \u4f1a\u5c06\u8f93\u51fa\u8ffd\u52a0\uff08\u800c\u4e0d\u662f\u8986\u76d6\uff09\u5230 out.txt \u6587\u4ef6\uff0c cat < in.txt \u4f1a\u5c06\u7a0b\u5e8f\u7684\u6807\u51c6\u8f93\u5165\uff08stdin\uff09\u91cd\u5b9a\u5411\u5230\u6587\u4ef6 in.txt \u3002 \u8bf7\u4e3a\u4f60\u7684 shell \u7a0b\u5e8f\u5b9e\u73b0 > \u3001 >> \u548c < \u7684\u529f\u80fd\u3002\u4f60\u53ef\u80fd\u8981\u7528\u5230\u7684\u51fd\u6570\uff1a open \u3001 close \u3001 dup \u3002 \u6837\u4f8b\uff1a $ ls | cat -n | grep 1 > out $ cat out 1 Cargo.lock $ cat < out 1 Cargo.lock $ ls | cat -n | grep 5 >> out $ cat out 1 Cargo.lock 5 target \u652f\u6301\u57fa\u4e8e\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u6587\u4ef6\u91cd\u5b9a\u5411\u3001\u6587\u4ef6\u91cd\u5b9a\u5411\u7ec4\u5408\uff08\u9009\u505a\uff09 \u00b6 \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6bcf\u4e2a Unix/Linux \u547d\u4ee4\u8fd0\u884c\u65f6\u90fd\u4f1a\u6253\u5f00\u4e09\u4e2a\u6587\u4ef6\uff1a \u6807\u51c6\u8f93\u5165\u6587\u4ef6\uff08stdin\uff09\uff1a\u6587\u4ef6\u63cf\u8ff0\u7b26\u4e3a 0\uff0cUnix/Linux \u7a0b\u5e8f\u9ed8\u8ba4\u4ece stdin \u8bfb\u53d6\u6570\u636e\u3002 \u6807\u51c6\u8f93\u51fa\u6587\u4ef6\uff08stdout\uff09\uff1a\u6587\u4ef6\u63cf\u8ff0\u7b26\u4e3a 1\uff0cUnix/Linux \u7a0b\u5e8f\u9ed8\u8ba4\u5411 stdout \u8f93\u51fa\u6570\u636e\u3002 \u6807\u51c6\u9519\u8bef\u6587\u4ef6\uff08stderr\uff09\uff1a\u6587\u4ef6\u63cf\u8ff0\u7b26\u4e3a 2\uff0cUnix/Linux \u7a0b\u5e8f\u4f1a\u5411 stderr \u6d41\u4e2d\u5199\u5165\u9519\u8bef\u4fe1\u606f\u3002 \u6211\u4eec\u53ef\u4ee5\u624b\u52a8\u66f4\u6539\u8f93\u5165\u8f93\u51fa\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002\u8bf7\u81ea\u884c\u67e5\u627e\u8d44\u6599\uff0c\u5b9e\u73b0\u4ee5\u4e0b\u8fd9\u4e9b\u6587\u4ef6\u91cd\u5b9a\u5411\uff1a \u5f62\u5982 cmd 10> out.txt \u548c cmd 20< in.txt \u4ee5\u53ca cmd 10>&20 30< in.txt \u8fd9\u6837\u7684\u547d\u4ee4\u4f1a\u5c06\u6253\u5f00\u6587\u4ef6\u63cf\u8ff0\u7b26 10\u300120 \u548c 30 \u5e76\u91cd\u5b9a\u5411\u5230\u76f8\u5e94\u7684\u6587\u4ef6\u3002 cmd <<< text \u4f1a\u5c06 \"text\\n\" \u4f5c\u4e3a\u6807\u51c6\u8f93\u5165\u91cd\u5b9a\u5411\u7ed9 cmd \u3002 \u4ee5\u4e0b\u547d\u4ee4\u4f1a\u5c06\u5b57\u7b26\u4e32 \"this\\noutput\\n\" \u4f5c\u4e3a\u6807\u51c6\u8f93\u5165\u91cd\u5b9a\u5411\u7ed9 cmd \uff1a cmd << EOF this output EOF \u5904\u7406 Ctrl-C \u7684\u6309\u952e \u00b6 \u5728\u4f7f\u7528 shell \u7684\u65f6\u5019\u6309\u4e0b Ctrl-C \u53ef\u4ee5\u4e22\u5f03\u5f53\u524d\u8f93\u5165\u5230\u4e00\u534a\u7684\u547d\u4ee4\uff0c\u91cd\u65b0\u663e\u793a\u63d0\u793a\u7b26\u5e76\u63a5\u53d7\u65b0\u7684\u547d\u4ee4\u8f93\u5165\u3002\u5f53\u6709\u7a0b\u5e8f\u8fd0\u884c\u65f6\uff0c\u6309\u4e0b Ctrl-C \u53ef\u4ee5\u7ec8\u7ed3\u8fd0\u884c\u4e2d\u7684\u7a0b\u5e8f\uff0c\u7acb\u5373\u56de\u5230 shell \u5f00\u59cb\u65b0\u7684\u547d\u4ee4\u8f93\u5165\uff08shell \u6ca1\u6709\u968f\u7a0b\u5e8f\u4e00\u8d77\u7ed3\u675f\uff09\u3002 \u4f8b\u5982\uff08 ^C \u8868\u793a\u9047\u5230 Ctrl-C \u7684\u8f93\u5165\uff09\uff1a $ echo taokystrong taokystrong $ echo taokystrong^C $ sleep 5 # \u51e0\u79d2\u4e4b\u540e ^C $ # sleep \u6ca1\u6709\u8fd0\u884c\u5b8c $ ^C \u8bf7\u4e3a\u4f60\u7684 shell \u5b9e\u73b0\u5bf9 Ctrl-C \u7684\u5904\u7406\u3002\u4f60\u53ef\u80fd\u8981\u7528\u5230\u7684\u51fd\u6570\uff1a signal \u3001 waitpid \u3002 \u63d0\u793a\uff1a\u5f53\u4f60\u6b63\u786e\u5904\u7406\u7b2c\u4e00\u79cd\u60c5\u51b5\u540e\uff08\u4e22\u5f03\u672a\u8f93\u5165\u5b8c\u7684\u547d\u4ee4\uff09\uff0c\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff08\u7ec8\u7ed3\u8fd0\u884c\u4e2d\u7684\u7a0b\u5e8f\uff09\u5e76\u4e0d\u9700\u8981\u4f60\u505a\u4efb\u4f55\u5de5\u4f5c\u3002 \u652f\u6301 History \u00b6 \u5728\u4f7f\u7528 shell\uff08\u8fd9\u91cc\u7279\u6307 bash\uff09\u7684\u65f6\u5019\u8f93\u5165 history n \u53ef\u4ee5\u663e\u793a\u6700\u8fd1\u6267\u884c\u7684 n \u6761\u6307\u4ee4\uff08\u5bf9\u4e8e zsh \u7528\u6237\uff0c history \u547d\u4ee4\u4f1a\u88ab\u81ea\u52a8\u66ff\u6362\u4e3a\u5185\u5efa\u7684 fc -l \uff0c\u663e\u793a\u4ece n \u6761\u547d\u4ee4\u5f00\u59cb\u7684\u8bb0\u5f55\uff09\u3002\u540c\u65f6\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 !n \u91cd\u590d\u6267\u884c\u5386\u53f2\u8bb0\u5f55\u4e2d\u7684\u7b2c n \u6761\u547d\u4ee4\uff0c\u7528 !! \u547d\u4ee4\u91cd\u590d\u6267\u884c\u4e0a\u4e00\u6761\u547d\u4ee4\u3002 \u4f8b\u5982\uff1a $ history 3 843 echo taokystrong 844 echo taoky 845 history 3 $ !843 echo taokystrong taokystrong $ !! echo taokystrong taokystrong \u8bf7\u4e3a\u4f60\u7684 shell \u5b9e\u73b0\u5bf9\u5386\u53f2\u547d\u4ee4\u7684\u5904\u7406\uff0c\u652f\u6301 !n \u3001 !! \u548c history n \u547d\u4ee4\uff0c\u4e14 history n \u7684\u8f93\u51fa\u8bf7\u5c3d\u53ef\u80fd\u4e0e bash \u76f8\u540c\u3002 \u53ef\u9009\uff1a\u5c06\u5386\u53f2\u547d\u4ee4\u6301\u4e45\u5316\uff0c\u65b0\u6253\u5f00\u7684 shell \u80fd\u4f7f\u7528\u4e4b\u524d\u4fdd\u7559\u7684\u8bb0\u5f55\uff081 \u5206\uff09\u3002\u63d0\u793a\uff1a\u53ef\u4ee5\u5b66\u4e60 bash/zsh\uff0c\u5728\u9000\u51fa\u7a0b\u5e8f\u65f6\u5c06\u5386\u53f2\u547d\u4ee4\u8bb0\u5f55\u5728\u4e00\u4e2a\u6587\u4ef6\u4e2d\uff08\u5982 .bash_history \u548c .zsh_history \uff09\u3002 \u53ef\u9009\uff1a\u901a\u8fc7\u4e0a\u4e0b\u65b9\u5411\u952e\u5207\u6362\u5230\u4e0d\u540c\u7684\u5386\u53f2\u547d\u4ee4\uff081 \u5206\uff09\u3002 \u5904\u7406 Ctrl-D (EOF) \u6309\u952e\uff08\u9009\u505a\uff0c0.5 \u5206\uff09 \u00b6 \u5728\u4f7f\u7528 shell \u7684\u65f6\u5019\u8f93\u5165 exit \u5373\u53ef\u9000\u51fa shell\uff0cCtrl-D (EOF) \u5728\u8fd9\u79cd\u573a\u666f\u4e0b\u7b49\u540c\u4e8e exit \u3002 \u652f\u6301 Bash \u98ce\u683c\u7684 TCP \u91cd\u5b9a\u5411\uff08\u9009\u505a\uff0c1 \u5206\uff09 \u00b6 \u5728\u7cbe\u7b80\u7684 Linux \u73af\u5883\u4e2d\uff08\u5982 Docker \u5bb9\u5668\u91cc\uff09\uff0c\u5e38\u5e38\u662f\u6ca1\u6709 nc \u547d\u4ee4\u7528\u6765\u8fdb\u884c\u539f\u59cb\u7684 TCP \u7f51\u7edc\u901a\u4fe1\u7684\u3002Bash \u548c\u4e00\u4e9b\u5176\u4ed6 shell \u652f\u6301\u4e00\u79cd\u7279\u6b8a\u7684\u91cd\u5b9a\u5411\u8bed\u6cd5\uff1a /dev/tcp/<host>/<port> \u3002 \u901a\u8fc7\u67e5\u770b Bash \u7684 man \u6587\u6863 \uff0c REDIRECTION \u4e00\u8282\uff0c\u5f53\u91cd\u5b9a\u5411\u76ee\u6807\u662f\u4e0b\u9762\u51e0\u79cd\u8def\u5f84\uff0c\u4e14\u64cd\u4f5c\u7cfb\u7edf\u6ca1\u6709\u63d0\u4f9b\u8fd9\u4e2a\u8def\u5f84\u65f6\uff0cBash \u4f1a\u81ea\u884c\u5904\u7406\u5b83\u4eec\uff1a /dev/fd/<fd> /dev/stdin /dev/stdout /dev/stderr /dev/tcp/<host>/<port> /dev/udp/<host>/<port> \u9605\u8bfb\u76f8\u5173\u6587\u6863\uff0c\u6a21\u62df Bash \u7684\u884c\u4e3a\u5b9e\u73b0 cmd > /dev/tcp/<host>/<port> \u548c cmd < /dev/tcp/<host>/<port> \u7684\u91cd\u5b9a\u5411\u3002\u4f60\u53ef\u80fd\u8981\u7528\u5230\u7684\u51fd\u6570\uff1a socket , connect \u65b9\u4fbf\u8d77\u89c1\uff0c\u4f60\u53ea\u9700\u8981\u5904\u7406 <host> \u662f\u5178\u578b\u7684 IPv4 \u5730\u5740\uff08\u5373 a.b.c.d \u7684\u5f62\u5f0f\uff0c\u5176\u4e2d abcd \u5747\u4e3a 0 ~ 255 \u4e4b\u95f4\u7684\u6574\u6570\uff09\u4e14 <port> \u4e3a 1 ~ 65535 \u4e4b\u95f4\u7684\u6574\u6570\u65f6\u7684\u60c5\u51b5\u3002 \u66f4\u591a\u529f\u80fd\uff08\u9009\u505a\uff09 \u00b6 \u6211\u4eec\u4e00\u822c\u4f7f\u7528\u7684 shell \u975e\u5e38\u5f3a\u5927\uff0c\u4f60\u8fd8\u53ef\u4ee5\u81ea\u884c\u4e86\u89e3\u4e0b\u9762\u8fd9\u4e9b\u8bed\u6cd5\u7684\u542b\u4e49\uff1a echo ~root # 0.5 \u5206 echo $SHELL # 0.5 \u5206 A = 1 env # \u5269\u4e0b\u90fd 1 \u5206 alias ll = 'ls -l' ( sleep 10 ; echo aha ) & if true ; then ls ; fi ifdown eth0 && ifup eth0 set -u # check existence of variable \u8bf7\u81ea\u884c\u9009\u62e9\u4e00\u4e2a\u6216\u591a\u4e2a\u529f\u80fd\u5e76\u5b9e\u73b0\u5b83\u4eec\u3002 \u7f16\u5199 tiny strace \u5de5\u5177 \u00b6 Linux \u7cfb\u7edf\u4e2d\u6709\u8bb8\u591a\u7528\u4e8e\u76d1\u63a7\u3001\u8ffd\u8e2a\u7cfb\u7edf\u72b6\u6001\u7684\u5de5\u5177\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002 strace \u662f\u4e00\u4e2a\u7528\u4e8e\u76d1\u63a7\u8fdb\u7a0b\u7cfb\u7edf\u8c03\u7528\u7684\u7a0b\u5e8f\uff0c\u4f8b\u5982\uff0c\u5728 Debian \u7cfb\u7edf\u4e2d\u4f7f\u7528 strace \u8ffd\u8e2a true \u547d\u4ee4\uff08\u4e00\u4e2a\u4ec0\u4e48\u90fd\u4e0d\u505a\u5e76\u8fd4\u56de 0 \u7684\u547d\u4ee4\uff09\uff0c\u53ef\u4ee5\u770b\u5230\u7c7b\u4f3c\u4ee5\u4e0b\u8f93\u51fa\uff1a $ strace true execve ( \"/usr/bin/true\" , [ \"true\" ] , 0x7ffd34ea2230 /* 59 vars */ ) = 0 brk ( NULL ) = 0x55c95678b000 arch_prctl ( 0x3001 /* ARCH_??? */, 0x7fff46be7eb0 ) = -1 EINVAL ( Invalid argument ) access ( \"/etc/ld.so.preload\" , R_OK ) = -1 ENOENT ( No such file or directory ) openat ( AT_FDCWD, \"/etc/ld.so.cache\" , O_RDONLY | O_CLOEXEC ) = 3 newfstatat ( 3 , \"\" , { st_mode = S_IFREG | 0644 , st_size = 223491 , ... } , AT_EMPTY_PATH ) = 0 mmap ( NULL, 223491 , PROT_READ, MAP_PRIVATE, 3 , 0 ) = 0x7f16a8186000 close ( 3 ) = 0 openat ( AT_FDCWD, \"/usr/lib/libc.so.6\" , O_RDONLY | O_CLOEXEC ) = 3 read ( 3 , \"\\177ELF\\2\\1\\1\\3\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0>\\0\\1\\0\\0\\0\\320\\324\\2\\0\\0\\0\\0\\0\" ..., 832 ) = 832 pread64 ( 3 , \"\\6\\0\\0\\0\\4\\0\\0\\0@\\0\\0\\0\\0\\0\\0\\0@\\0\\0\\0\\0\\0\\0\\0@\\0\\0\\0\\0\\0\\0\\0\" ..., 784 , 64 ) = 784 pread64 ( 3 , \"\\4\\0\\0\\0@\\0\\0\\0\\5\\0\\0\\0GNU\\0\\2\\0\\0\\300\\4\\0\\0\\0\\3\\0\\0\\0\\0\\0\\0\\0\" ..., 80 , 848 ) = 80 pread64 ( 3 , \"\\4\\0\\0\\0\\24\\0\\0\\0\\3\\0\\0\\0GNU\\0\\205vn\\235\\204X\\261n\\234|\\346\\340|q,\\2\" ..., 68 , 928 ) = 68 newfstatat ( 3 , \"\" , { st_mode = S_IFREG | 0755 , st_size = 2463384 , ... } , AT_EMPTY_PATH ) = 0 mmap ( NULL, 8192 , PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0 ) = 0x7f16a8184000 pread64 ( 3 , \"\\6\\0\\0\\0\\4\\0\\0\\0@\\0\\0\\0\\0\\0\\0\\0@\\0\\0\\0\\0\\0\\0\\0@\\0\\0\\0\\0\\0\\0\\0\" ..., 784 , 64 ) = 784 mmap ( NULL, 2136752 , PROT_READ, MAP_PRIVATE | MAP_DENYWRITE, 3 , 0 ) = 0x7f16a7f7a000 mprotect ( 0x7f16a7fa6000, 1880064 , PROT_NONE ) = 0 mmap ( 0x7f16a7fa6000, 1531904 , PROT_READ | PROT_EXEC, MAP_PRIVATE | MAP_FIXED | MAP_DENYWRITE, 3 , 0x2c000 ) = 0x7f16a7fa6000 mmap ( 0x7f16a811c000, 344064 , PROT_READ, MAP_PRIVATE | MAP_FIXED | MAP_DENYWRITE, 3 , 0x1a2000 ) = 0x7f16a811c000 mmap ( 0x7f16a8171000, 24576 , PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_FIXED | MAP_DENYWRITE, 3 , 0x1f6000 ) = 0x7f16a8171000 mmap ( 0x7f16a8177000, 51888 , PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_FIXED | MAP_ANONYMOUS, -1, 0 ) = 0x7f16a8177000 close ( 3 ) = 0 mmap ( NULL, 12288 , PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0 ) = 0x7f16a7f77000 arch_prctl ( ARCH_SET_FS, 0x7f16a7f77740 ) = 0 set_tid_address ( 0x7f16a7f77a10 ) = 185317 set_robust_list ( 0x7f16a7f77a20, 24 ) = 0 rseq ( 0x7f16a7f780e0, 0x20, 0 , 0x53053053 ) = 0 mprotect ( 0x7f16a8171000, 12288 , PROT_READ ) = 0 mprotect ( 0x55c954a3b000, 4096 , PROT_READ ) = 0 mprotect ( 0x7f16a81f2000, 8192 , PROT_READ ) = 0 prlimit64 ( 0 , RLIMIT_STACK, NULL, { rlim_cur = 8192 *1024, rlim_max = RLIM64_INFINITY }) = 0 munmap ( 0x7f16a8186000, 223491 ) = 0 exit_group ( 0 ) = ? +++ exited with 0 +++ \u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0cstrace \u5217\u51fa\u4e86 true \u8fd9\u4e00\u7a0b\u5e8f\u8c03\u7528\u7684\u6240\u6709 Linux syscall\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u5229\u7528 ptrace \u8fd9\u4e00\u6846\u67b6\u5b9e\u73b0\u4e00\u4e2a\u7c7b\u4f3c strace \u7684\u5de5\u5177\u3002 \u6587\u6863 \u00b6 \u5728\u8fdb\u884c\u7a0b\u5e8f\u7f16\u5199\u524d\uff0c\u8bf7\u5148\u7b80\u8981\u9605\u8bfb ptrace \u6587\u6863 \u3002 \u4e00\u4e2a\u793a\u4f8b\u6027\u7684\u4f8b\u5b50\u53ef\u4ee5\u5728 \u8fd9\u7bc7\u6587\u7ae0 \u4e2d\u627e\u5230\u3002 \u6211\u4eec\u5c06\u56f4\u7ed5\u8fd9\u7bc7\u6587\u7ae0\u63d0\u4f9b\u4e00\u4e9b\u89e3\u91ca\uff0c\u7136\u540e\u5217\u51fa\u5177\u4f53\u9700\u8981\u5b9e\u73b0\u7684\u529f\u80fd \u7b80\u5355\u8ffd\u8e2a \u00b6 \u9996\u5148\u8981\u76d1\u542c\u4e00\u4e2a\u8fdb\u7a0b\u7684 syscall\uff0c\u9700\u8981\u6709\u53e6\u5916\u4e00\u4e2a\u8fdb\u7a0b\u3002 \u8fd9\u91cc\u6211\u4eec\u9996\u5148\u7528 fork() \u521b\u5efa\u4e00\u4e2a\u5b50\u8fdb\u7a0b\uff0c\u5728\u5b50\u8fdb\u7a0b\u4e2d\u5f00\u542f ptrace\uff0c\u7136\u540e\u8c03\u7528 execvp() \u8fd0\u884c\u76f8\u5e94\u7684\u7a0b\u5e8f\uff1a pid_t pid = fork (); switch ( pid ) { case -1 : exit ( 1 ) case 0 : ptrace ( PTRACE_TRACEME , 0 , 0 , 0 ); execvp ( argv [ 1 ], argv + 1 ); exit ( 1 ) } \u5b50\u8fdb\u7a0b\u5728\u6267\u884c\u5230 PTRACE_TRACEME \u540e\u4f1a\u505c\u4f4f\u7b49\u5f85\u7236\u8fdb\u7a0b\u6307\u4ee4\u3002 \u5728\u7236\u8fdb\u7a0b\u4e2d\uff0c\u4f7f\u7528\uff1a waitpid ( pid , 0 , 0 ); \u4e0d\u80fd\u4f7f\u7528 wait() \uff0c\u56e0\u4e3a\u9700\u8981\u4f20\u5165 PID \u6765\u7b49\u5f85\u5b50\u8fdb\u7a0b\u7684\u8fd9\u6b21\u505c\u6b62\u3002 \u7b49\u5230\u540e\uff0c\u4f7f\u7528\uff1a ptrace ( PTRACE_SETOPTIONS , pid , 0 , PTRACE_O_EXITKILL ); \u6765\u8bbe\u7f6e\u4e00\u4e9b\u53c2\u6570\u3002 \u8fd9\u91cc PTRACE_O_EXITKILL \u6307\u793a\u5b50\u8fdb\u7a0b\u5728\u7236\u8fdb\u7a0b\u9000\u51fa\u540e\u7acb\u5373\u9000\u51fa\u3002 \u66f4\u591a\u7684\u53c2\u6570\u53ca\u5177\u4f53\u542b\u4e49\u53ef\u4ee5\u5728\u524d\u8ff0\u6587\u6863\u4e2d\u627e\u5230\u3002 \u73b0\u5728\u5c31\u53ef\u4ee5\u6b63\u5f0f\u5f00\u59cb\u76d1\u542c\u5b50\u8fdb\u7a0b syscall \u4e86\u3002 \u9996\u5148\u5728\u7236\u8fdb\u7a0b\u4e2d\u8fd0\u884c\uff1a ptrace ( PTRACE_SYSCALL , pid , 0 , 0 ); waitpid ( pid , 0 , 0 ); \u6765\u8ba9\u5b50\u8fdb\u7a0b\u6062\u590d\u6267\u884c\uff0c\u5e76\u8ba9\u5b50\u8fdb\u7a0b\u5728\u4e0b\u4e00\u6b21 syscall \u7684\u5165\u53e3\u5904\u505c\u4f4f\uff1b waitpid() \u4f1a\u8ba9\u7236\u8fdb\u7a0b\u7b49\u5f85\u5230\u76ee\u6807\u65f6\u523b\u518d\u6062\u590d\u6267\u884c\u3002 waitpid() \u7ed3\u675f\u540e\uff0c\u5b50\u8fdb\u7a0b\u505c\u5728 syscall \u5165\u53e3\u5904\u3002 \u7236\u8fdb\u7a0b\u6b64\u65f6\u6062\u590d\u6267\u884c\u3002 \u6b64\u65f6\uff0c\u7236\u8fdb\u7a0b\u53ef\u4ee5\u4f7f\u7528\uff1a struct user_regs_struct regs ; ptrace ( PTRACE_GETREGS , pid , 0 , & regs ); long syscall = regs . orig_rax ; fprintf ( stderr , \"%ld(%ld, %ld, %ld, %ld, %ld, %ld)\" , syscall , ( long ) regs . rdi , ( long ) regs . rsi , ( long ) regs . rdx , ( long ) regs . r10 , ( long ) regs . r8 , ( long ) regs . r9 ); \u6765\u8bfb\u53d6\u5b50\u8fdb\u7a0b\u4e2d\u8fdb\u884c syscall \u65f6\u5404\u4e2a CPU \u5bc4\u5b58\u5668\u7684\u503c\u3002 \u7531\u4e8e\u662f\u5728 Linux \u73af\u5883\u4e2d\uff0cfunction call \u9075\u5faa Linux system call convention\uff0c\u53c2\u6570\u6309\u987a\u5e8f\u6392\u5217\u5728 rdi\u3001rsi\u3001rdx\u3001r10\u3001r8\u3001r9 \u5bc4\u5b58\u5668\u4e2d\uff0csyscall number \u7f6e\u4e8e rax \u5bc4\u5b58\u5668\u4e2d\u3002 \u901a\u8fc7\u8bfb\u53d6\u8fd9\u4e9b\u5bc4\u5b58\u5668\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u77e5\u9053\u53c2\u6570\u7684\u503c\u548c\u5b50\u8fdb\u7a0b\u5177\u4f53\u8981\u8c03\u7528\u7684 syscall\u3002 Info \u5f53\u53c2\u6570\u662f\u6307\u9488\u65f6\uff0c\u8fd9\u91cc\u4ece\u5bc4\u5b58\u5668\u4e2d\u8bfb\u51fa\u7684\u503c\u5f53\u7136\u662f\u6307\u9488\u7684\u503c\u3002 \u800c\u4e0d\u540c\u8fdb\u7a0b\u95f4\uff0c\u6307\u9488\u5e76\u4e0d\u80fd\u76f4\u63a5\u89e3\u5f15\u7528\u800c\u8bbf\u95ee\u5177\u4f53\u6570\u636e\u3002 ptrace \u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528 PTRACE_PEEKTEXT \u6216\u662f PTRACE_PEEKDATA \uff08Linux \u4e0a\u4e24\u8005\u7b49\u4ef7\uff09\u6765\u8bfb\u53d6\u6307\u9488\u6307\u5411\u7684\u6570\u636e\u3002 \u7136\u540e\uff0c\u5728\u672c\u6b21\u5b9e\u9a8c\u4e2d\uff0c \u5e76\u4e0d \u8981\u6c42\u5bf9\u6307\u9488\u8fdb\u884c\u89e3\u5f15\u7528\u3002 \u6d4b\u8bd5\u4e2d\u5c06\u4f1a\u4e3b\u8981\u8003\u5bdf integer \u7c7b\u578b\u7684\u53c2\u6570\u3002 \u5728\u7236\u8fdb\u7a0b\u4e2d\u5b8c\u6210\u4fe1\u606f\u83b7\u53d6\u540e\uff0c\u518d\u6b21\u8c03\u7528 PTRACE_SYSCALL \u6765\u8ba9\u5b50\u8fdb\u7a0b\u6062\u590d\u6267\u884c\u5e76\u505c\u5728 syscall \u51fa\u53e3\u5904\uff1a ptrace ( PTRACE_SYSCALL , pid , 0 , 0 ); waitpid ( pid , 0 , 0 ); \u8fd9\u91cc\u53ef\u4ee5\u770b\u5230\uff0c PTRACE_SYSCALL \u6709\u4e24\u79cd\u4f5c\u7528\uff0c\u80fd\u8ba9\u5b50\u8fdb\u7a0b\u6062\u590d\u6267\u884c\u5e76\u505c\u7559\u5728 syscall \u5165\u53e3\u6216\u51fa\u53e3\u5904\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\u5177\u4f53\u60c5\u51b5\u4e2d\u662f\u505c\u5728\u51fa\u53e3\u5904\u8fd8\u662f\u505c\u5728\u5165\u53e3\u5904\u662f \u65e0\u6cd5\u5206\u8fa8 \u7684\uff0c\u9700\u8981\u81ea\u5df1\u7528\u4ee3\u7801\u5728\u7236\u8fdb\u7a0b\u4e2d\u7ef4\u62a4\u72b6\u6001\u3002 \u5177\u4f53\u53ef\u80fd\u7684\u6d41\u7a0b\u5728\u524d\u8ff0\u6587\u6863\u4e2d\u6709\u8be6\u7ec6\u63cf\u5199\u3002 \u5728 syscall \u51fa\u53e3\u5904\u65f6\uff0c\u8fd4\u56de\u503c\u5b58\u5728 rax \u5bc4\u5b58\u5668\u4e2d\u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8bfb\u53d6\u5bc4\u5b58\u5668 rax \u6765\u83b7\u53d6\u8fd4\u56de\u503c\uff0c\u751a\u81f3\u662f\u4fee\u6539\u8fd4\u56de\u503c\uff1a ptrace ( PTRACE_GETREGS , pid , 0 , & regs ); fprintf ( stderr , \" = %ld \\n \" , ( long ) regs . rax ); \u6ce8\u610f\u4e0e\u5165\u53e3\u5904\u4e0d\u540c\uff0c\u51fa\u53e3\u5904\u7528\u7684\u662f rax field \u800c\u4e0d\u662f orig_rax field \u8fd9\u6837\uff0c\u4e00\u4e2a\u53ef\u7528\u7684\u7c7b strace \u5de5\u5177\u5c31\u5b9e\u73b0\u4e86\u3002 \u8f93\u51fa\u65f6\uff0c\u6bcf\u4e00\u4e2a syscall \u8bf7\u7528 \"%ld(%ld, %ld, %ld, %ld, %ld, %ld)\\n\" \u7684\u5f62\u5f0f\u8f93\u51fa\u3002 \u7531\u4e8e\u6d4b\u8bd5\u4e2d\u4f1a\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u8fdb\u884c\u5339\u914d\uff0c\u4e00\u4e9b\u5c0f\u7ec6\u8282\uff0c\u4f8b\u5982\u7a0b\u5e8f\u5f00\u59cb/\u7ed3\u5c3e\u989d\u5916\u8f93\u51fa\u7684\u4fe1\u606f\u3001\u591a\u4f59\u7684\u7a7a\u683c\uff0c\u4e0d\u4f1a\u5f71\u54cd\u7b54\u6848\u7684\u6d4b\u8bc4\u3002 \u4fdd\u8bc1 syscall number \u548c\u53c2\u6570\u6b63\u786e\u5373\u53ef\u3002 \u5904\u7406\u5b50\u8fdb\u7a0b\uff08\u9009\u505a\uff09 \u00b6 \u5728\u5b50\u8fdb\u7a0b fork() \u6216\u662f clone() \u540e\uff0c\u5b50\u8fdb\u7a0b\u7684\u5b50\u8fdb\u7a0b\u7531\u4e8e\u6ca1\u6709\u8fdb\u884c\u76f8\u5e94\u914d\u7f6e\uff0c\u662f\u65e0\u6cd5\u4f7f\u7528\u4e0a\u8ff0\u65b9\u6cd5\u8ffd\u8e2a syscall \u7684\u3002 ptrace \u63d0\u4f9b\u4e86\u76f8\u5e94\u7684\u89e3\u51b3\u65b9\u6cd5\u3002 \u5728 PTRACE_SETOPTIONS \u4e2d\uff0c\u53ef\u4ee5\u914d\u7f6e\u66f4\u591a\u7684\u9009\u9879\u6765\u81ea\u52a8\u8ffd\u8e2a\u5b50\u8fdb\u7a0b\u3002 \u8bf7\u4ed4\u7ec6\u9605\u8bfb ptrace \u6587\u6863\uff0c\u7406\u89e3\u5177\u4f53\u65b9\u6848\uff0c\u63d0\u4f9b\u4e00\u4e2a\u7c7b\u4f3c\u4e0a\u8ff0\u7a0b\u5e8f\u3001\u4f46\u80fd\u591f\u6b63\u786e\u5904\u7406\u5b50\u8fdb\u7a0b\u7684\u5b9e\u73b0\u3002 \u4e00\u4e9b\u53ef\u80fd\u6709\u7528\u7684\u4fe1\u606f\uff1a PTRACE_SYSCALL \u548c waitpid() \u53ef\u80fd\u56e0 signal \u800c\u9000\u51fa\uff0c\u4f46\u6b64\u6b21\u5b9e\u73b0\u4e0d\u8003\u8651 signal \u7684\u95ee\u9898 PTRACE_O_TRACEFORK \u548c PTRACE_O_TRACECLONE \u4f1a\u5728 syscall \u51fa\u53e3\u5904 \u8fdb\u884c\u901a\u77e5 \u5b9e\u9a8c\u8981\u6c42\u4e0e DDL \u00b6 \u8bf7\u6309\u7167\u4ee5\u4e0b\u76ee\u5f55\u7ed3\u6784\u7ec4\u7ec7\u4f60\u7684 GitHub \u4ed3\u5e93\uff1a . // Git \u4ed3\u5e93\u76ee\u5f55 \u251c\u2500\u2500 lab2 // \u5b9e\u9a8c\u4e8c\u6839\u76ee\u5f55 \u2502 \u251c\u2500\u2500 shell // \u5b9e\u9a8c\u7684 shell \u90e8\u5206 \u2502 \u2502 \u251c\u2500\u2500 shell.cpp // \u4f60\u7684 shell \u7684\u6e90\u4ee3\u7801 \u2502 \u2502 \u251c\u2500\u2500 other.cpp \u2502 \u2502 \u2514\u2500\u2500 Makefile // \uff08\u53ef\u9009\uff09\u4f60\u63d0\u4f9b\u7684 Makefile \u2502 \u251c\u2500\u2500 strace // \u5b9e\u9a8c\u7684 strace \u90e8\u5206 \u2502 \u2502 \u251c\u2500\u2500 strace.cpp // \u4f60\u7684 strace \u7684\u6e90\u4ee3\u7801 \u2502 \u2502 \u251c\u2500\u2500 other.cpp \u2502 \u2502 \u2514\u2500\u2500 Makefile // \uff08\u53ef\u9009\uff09\u4f60\u63d0\u4f9b\u7684 Makefile \u2502 \u2514\u2500\u2500 README.md // \u7b80\u5355\u63cf\u8ff0\u7684\u5b9e\u9a8c\u62a5\u544a\uff0c\u4e0d\u5fc5\u8fc7\u957f \u251c\u2500\u2500 .gitignore \u2514\u2500\u2500 README.md \u672c\u6b21\u5b9e\u9a8c\u6ee1\u5206 12 \u5206\u3002\u6240\u83b7\u603b\u5206\u5982\u679c\u9ad8\u4e8e 12 \u5206\uff0c\u5c06\u88ab\u622a\u65ad\u4e3a 12 \u5206\u3002\u4f60\u9700\u8981\u5b8c\u6210\uff1a \u6309\u7167\u4e0a\u9762\u7684\u8981\u6c42\u7ec4\u7ec7\u4ed3\u5e93\u7ed3\u6784\uff0c\u63d0\u4ea4\u4f60\u7684 shell \u6e90\u4ee3\u7801\u548c strace \u6e90\u4ee3\u7801 \u5982\u679c\u4f60\u63d0\u4ea4\u7684\u5185\u5bb9\u65e0\u6cd5\u6b63\u5e38\u7f16\u8bd1\uff0c\u6211\u4eec\u4f1a\u5c1d\u8bd5\u4fee\u590d\u5e76\u914c\u60c5\u6263\u9664\u4e00\u5b9a\u5206\u6570 \u5b9e\u9a8c\u4e00\u4e2d\u5bf9\u4e8e Git \u5de5\u5177\u7684\u4f7f\u7528\u8981\u6c42\u4ecd\u7136\u9002\u7528\u4e8e\u672c\u5b9e\u9a8c\uff0c\u5373\u5f53\u51fa\u73b0\u4ee5\u4e0b\u60c5\u51b5\u65f6\uff0c\u6211\u4eec\u4f1a\u914c\u60c5\u6263\u9664\u4e00\u5b9a\u5206\u6570 \u5f88\u5927\u4e00\u90e8\u5206\u7684 commit \u7531 GitHub \u7f51\u9875\u7248\u751f\u6210\uff0c\u5373\u901a\u8fc7\u7f51\u9875\u7248\u6587\u4ef6\u4e0a\u4f20\u7684\u65b9\u5f0f\u63d0\u4ea4\u5b9e\u9a8c\u7684\u6587\u4ef6 \u53ea\u6709\u5be5\u5be5\u65e0\u51e0\u7684 commit \u4e0a\u4f20\u4e86\u5927\u91cf\u4e0e\u5b9e\u9a8c\u8981\u6c42\u65e0\u5173\u7684\u6587\u4ef6 shell \u90e8\u5206\uff1a\u5fc5\u505a\u9879\u76ee\u5171 8 \u5206\u3002\u5bf9\u4e8e\u989d\u5916\u7684\u9009\u505a\u9879\u76ee\uff0cshell \u90e8\u5206\u603b\u5206\u4e0d\u8d85\u8fc7 10 \u5206\uff1a \u4f60\u7684 shell \u80fd\u591f\u6b63\u786e\u5904\u7406\u542b\u6709 1 \u4e2a\u7ba1\u9053\u7684\u547d\u4ee4\uff081 \u5206\uff09 \u4f60\u7684 shell \u80fd\u591f\u6b63\u786e\u5904\u7406\u542b\u6709\u591a\u4e2a\u7ba1\u9053\u7684\u547d\u4ee4\uff081 \u5206\uff09 \u4f60\u7684 shell \u652f\u6301 > , >> , < \u91cd\u5b9a\u5411\uff08\u5404 0.5 \u5206\uff09 \u4f60\u7684 shell \u5728\u9047\u5230 Ctrl-C \u4fe1\u53f7\u65f6\u4e0d\u4f1a\u4e2d\u65ad \uff080.5 \u5206\uff09 \u4f60\u7684 shell \u5728\u9047\u5230 Ctrl-C \u65f6\u80fd\u4e22\u5f03\u5df2\u7ecf\u8f93\u5165\u4e00\u534a\u7684\u547d\u4ee4\u884c\uff0c\u663e\u793a # \u63d0\u793a\u7b26\u5e76\u91cd\u65b0\u63a5\u53d7\u8f93\u5165\uff081 \u5206\uff09 \u4f60\u7684 shell \u652f\u6301 history n \u547d\u4ee4\uff081 \u5206\uff09 \u4f60\u7684 shell \u652f\u6301\u901a\u8fc7 !n \u548c !! \u547d\u4ee4\uff08\u5404 1 \u5206\uff09 strace \u90e8\u5206\uff1a\u5fc5\u505a\u9879\u76ee\u5171 2 \u5206\u3002\u5bf9\u4e8e\u989d\u5916\u7684\u9009\u505a\u9879\u76ee\uff0cstrace \u90e8\u5206\u603b\u5206\u4e0d\u8d85\u8fc7 4 \u5206\uff1a \u4f60\u7684 strace \u7a0b\u5e8f\u80fd\u591f\u8ffd\u8e2a syscall\uff082 \u5206\uff09 \u4f60\u7684 strace \u7a0b\u5e8f\u652f\u6301\u8ffd\u8e2a fork \u548c clone \u540e\u7684\u5b50\u8fdb\u7a0b\uff08\u5404 1 \u5206\uff09 \u672c\u5b9e\u9a8c\u53ef\u4ee5\u4f7f\u7528 C/C++ \u6216 Rust \u8bed\u8a00\u5b8c\u6210\u3002 \u672c\u5b9e\u9a8c\u53ef\u4ee5\u4f7f\u7528 libc, libstdc++, libm \u4ee5\u53ca iostream, STL \u7b49 C/C++ \u8bed\u8a00\u6807\u51c6\u548c\u5e38\u7528\u5e93\u3002\u5982\u679c\u4f60\u613f\u610f\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 readline \u548c ncurses \u7b49 Linux \u7a0b\u5e8f\u5e38\u7528\u5e93\u3002\u4f7f\u7528\u6b64\u5904\u6ca1\u6709\u5217\u51fa\u7684\u5e93\u524d\u8bf7\u8be2\u95ee\u52a9\u6559\u3002 \u6b64\u6b21\u5b9e\u9a8c\u622a\u81f3\u65f6\u95f4\u4e3a 5 \u6708 9 \u65e5 23:59\u3002 \u5173\u4e8e\u5b9e\u9a8c\u62a5\u544a \u00b6 \u6211\u4eec\u63a8\u8350\u4f60\u5728 README.md \u4e2d\u5199\u5c11\u91cf\u5185\u5bb9\uff1a \u4f60\u7684 shell \u5b9e\u73b0\u53ef\u80fd\u4e0e\u7cfb\u7edf\u4e2d\u7684 bash \uff08\u6216\u52a9\u6559\u671f\u671b\u7684\u8868\u73b0\uff09\u6709\u6240\u4e0d\u540c\uff0c\u7b80\u8981\u4ecb\u7ecd\u8fd9\u4e9b\u6f5c\u5728\u7684\u533a\u522b\uff0c\u4ee5\u514d\u4ea7\u751f\u8bef\u4f1a\uff0c\u5bfc\u81f4\u4e0d\u5fc5\u8981\u7684\u6263\u5206\u3002 \u4f60\u5b8c\u6210\u4e86\u4e00\u4e9b\u9009\u505a\u9879\u76ee\uff0c\u4e5f\u53ef\u4ee5\u7b80\u5355\u4ecb\u7ecd\uff0c\u65b9\u4fbf\u52a9\u6559\u8fdb\u884c\u66f4\u51c6\u786e\u7684\u8bc4\u4f30 \u672c\u5b9e\u9a8c\u7684\u4e3b\u8981\u5185\u5bb9\u4e3a shell \u7a0b\u5e8f\u7684\u7f16\u5199\uff0c\u56e0\u6b64\u4e0d\u5fc5\u82b1\u8d39\u592a\u591a\u5de5\u592b\u5728\u5b9e\u9a8c\u62a5\u544a\u4e0a\u3002 \u5173\u4e8e\u9009\u505a\u9879\u76ee \u00b6 \u5728\u5fc5\u505a\u90e8\u5206\u4ee5\u5916\uff0c\u4f60\u53ef\u4ee5\u53c2\u8003\u6807\u8bb0\u4e3a\u300c\u9009\u505a\u300d\u7684\u51e0\u4e2a\u5c0f\u8282\u4e2d\u4ecb\u7ecd\u7684 shell \u7684\u5e38\u89c1\u529f\u80fd\u5e76\u5b9e\u73b0\u6765\u5f97\u5230\u9009\u505a\u5206\u6570\uff08\u4e0d\u9650\u5236\u4e3a\u672c\u6587\u6863\u5217\u51fa\u7684\u529f\u80fd\uff0c\u89c1\u4e0b\uff09\u3002\u6bcf\u4e00\u9879\u989d\u5916\u529f\u80fd\u90fd\u4f1a\u7531\u52a9\u6559\u8ba8\u8bba\u8bc4\u4f30\uff0c\u4f46\u901a\u5e38\u5355\u4e2a\u9879\u76ee\u4e0d\u4f1a\u8d85\u8fc7 1 \u5206\u3002 \u6211\u4eec\u9f13\u52b1\u8fdb\u884c\u4e0e\u64cd\u4f5c\u7cfb\u7edf\u76f8\u5173\u7684\u5b9e\u9a8c\u63a2\u7a76\uff0c\u56e0\u6b64\u8fc7\u5ea6\u8131\u79bb\u4e3b\u9898\u7684\u9879\u76ee\u53ef\u80fd\u4e0d\u4f1a\u83b7\u5f97\u52a0\u5206\uff0c\u4f8b\u5982\uff1a \u8fc7\u4e8e\u7b80\u5355\u7684\u5185\u7f6e\u547d\u4ee4\uff0c\u5982 : (colon), true , false , help \u7b49 \u4e25\u91cd\u504f\u79bb shell \u7684\u57fa\u672c\u529f\u80fd\u7684\u9879\u76ee\uff0c\u4f8b\u5982\u4f60 \u6a21\u4eff Zsh \u4e3a\u4f60\u7684 shell \u5185\u7f6e\u4e86\u4e00\u4e2a\u4fc4\u7f57\u65af\u65b9\u5757\u6e38\u620f \u4f5c\u4e3a\u4e00\u4e2a\u53c2\u8003\u57fa\u51c6\uff0cGNU Bash \u5177\u6709\u7684\u529f\u80fd\u5927\u90e8\u5206\u90fd\u4f1a\u88ab\u8ba4\u53ef\u3002 \u5173\u4e8e\u7f16\u8bd1 \u00b6 \u672c\u5b9e\u9a8c\u4e2d\uff0c\u5982\u679c\u4f60\u63d0\u4f9b\u4e86 Makefile \u6216\u8005 cargo.toml \u6587\u4ef6\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u5b83\u6765\u7f16\u8bd1\u4f60\u63d0\u4ea4\u7684\u7a0b\u5e8f\uff1b\u5426\u5219\uff0c\u6211\u4eec\u5c06\u5c3d\u53ef\u80fd\u53bb\u5c1d\u8bd5\u7f16\u8bd1 lab2/ \u76ee\u5f55\u4e0b\u6240\u6709\u7684 *.c \u3001 *.cpp \u6216\u8005 *.rs \u6587\u4ef6\u3002\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5728 README.md \u4e2d\u8bf4\u660e\u7f16\u8bd1\u4e0e\u8fd0\u884c\u76f8\u5173\u7684\u6ce8\u610f\u4e8b\u9879\u3002 \u793a\u4f8b\u7a0b\u5e8f \u00b6 // IO #include <iostream> // std::string #include <string> // std::vector #include <vector> // std::string \u8f6c int #include <sstream> // PATH_MAX \u7b49\u5e38\u91cf #include <climits> // POSIX API #include <unistd.h> // wait #include <sys/wait.h> std :: vector < std :: string > split ( std :: string s , const std :: string & delimiter ); int main () { // \u4e0d\u540c\u6b65 iostream \u548c cstdio \u7684 buffer std :: ios :: sync_with_stdio ( false ); // \u7528\u6765\u5b58\u50a8\u8bfb\u5165\u7684\u4e00\u884c\u547d\u4ee4 std :: string cmd ; while ( true ) { // \u6253\u5370\u63d0\u793a\u7b26 std :: cout << \"# \" ; // \u8bfb\u5165\u4e00\u884c\u3002std::getline \u7ed3\u679c\u4e0d\u5305\u542b\u6362\u884c\u7b26\u3002 std :: getline ( std :: cin , cmd ); // \u6309\u7a7a\u683c\u5206\u5272\u547d\u4ee4\u4e3a\u5355\u8bcd std :: vector < std :: string > args = split ( cmd , \" \" ); // \u6ca1\u6709\u53ef\u5904\u7406\u7684\u547d\u4ee4 if ( args . empty ()) { continue ; } // \u66f4\u6539\u5de5\u4f5c\u76ee\u5f55\u4e3a\u76ee\u6807\u76ee\u5f55 if ( args [ 0 ] == \"cd\" ) { if ( args . size () <= 1 ) { // \u8f93\u51fa\u7684\u4fe1\u606f\u5c3d\u91cf\u4e3a\u82f1\u6587\uff0c\u975e\u82f1\u6587\u8f93\u51fa\uff08\u5176\u5b9e\u662f\u975e ASCII \u8f93\u51fa\uff09\u5728\u6ca1\u6709\u7279\u522b\u914d\u7f6e\u7684\u60c5\u51b5\u4e0b\uff08\u7279\u522b\u662f Windows \u4e0b\uff09\u4f1a\u4e71\u7801 // \u5982\u611f\u5174\u8da3\u53ef\u4ee5\u81ea\u884c\u641c\u7d22 GBK Unicode UTF-8 Codepage UTF-16 \u7b49\u8fdb\u884c\u5b66\u4e60 std :: cout << \"Insufficient arguments \\n \" ; // \u4e0d\u8981\u7528 std::endl\uff0cstd::endl = \"\\n\" + fflush(stdout) continue ; } // \u8c03\u7528\u7cfb\u7edf API int ret = chdir ( args [ 1 ]. c_str ()); if ( ret < 0 ) { std :: cout << \"cd failed \\n \" ; } continue ; } // \u663e\u793a\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55 if ( args [ 0 ] == \"pwd\" ) { std :: string cwd ; // \u9884\u5148\u5206\u914d\u597d\u7a7a\u95f4 cwd . resize ( PATH_MAX ); // std::string to char *: &s[0]\uff08C++17 \u4ee5\u4e0a\u53ef\u4ee5\u7528 s.data()\uff09 // std::string \u4fdd\u8bc1\u5176\u5185\u5b58\u662f\u8fde\u7eed\u7684 // \u66f4\u65b0\uff0805-07\uff09:\u8fd9\u91cc CWD \u6ca1\u6709 print \u51fa\u6765\uff0c\u8981 print \u6216\u662f\u8fdb\u884c\u8fdb\u4e00\u6b65\u7684\u5b57\u7b26\u4e32\u5904\u7406\u7684\u8bdd\u9700\u8981\u5148\u81ea\u884c resize \u628a std::string \u4e2d\u672b\u5c3e\u7684 \\0 \u53bb\u6389\uff0c\u540c\u65f6\u53bb\u6389\u672b\u5c3e\u591a\u4f59\u7684\u7a7a\u95f4 const char * ret = getcwd ( & cwd [ 0 ], PATH_MAX ); if ( ret == nullptr ) { std :: cout << \"cwd failed \\n \" ; } else { std :: cout << ret << \" \\n \" ; } continue ; } // \u8bbe\u7f6e\u73af\u5883\u53d8\u91cf if ( args [ 0 ] == \"export\" ) { for ( auto i = ++ args . begin (); i != args . end (); i ++ ) { std :: string key = * i ; // std::string \u9ed8\u8ba4\u4e3a\u7a7a std :: string value ; // std::string::npos = std::string end // std::string \u4e0d\u662f nullptr \u7ed3\u5c3e\u7684\uff0c\u4f46\u786e\u5b9e\u4f1a\u6709\u4e00\u4e2a\u7ed3\u5c3e\u5b57\u7b26 npos size_t pos ; if (( pos = i -> find ( '=' )) != std :: string :: npos ) { key = i -> substr ( 0 , pos ); value = i -> substr ( pos + 1 ); } int ret = setenv ( key . c_str (), value . c_str (), 1 ); if ( ret < 0 ) { std :: cout << \"export failed \\n \" ; } } } // \u9000\u51fa if ( args [ 0 ] == \"exit\" ) { if ( args . size () <= 1 ) { return 0 ; } // std::string \u8f6c int std :: stringstream code_stream ( args [ 1 ]); int code = 0 ; code_stream >> code ; // \u8f6c\u6362\u5931\u8d25 if ( ! code_stream . eof () || code_stream . fail ()) { std :: cout << \"Invalid exit code \\n \" ; continue ; } return code ; } // \u5916\u90e8\u547d\u4ee4 pid_t pid = fork (); // std::vector<std::string> \u8f6c char ** char * arg_ptrs [ args . size () + 1 ]; for ( auto i = 0 ; i < args . size (); i ++ ) { arg_ptrs [ i ] = & args [ i ][ 0 ]; } // exec p \u7cfb\u5217\u7684 argv \u9700\u8981\u4ee5 nullptr \u7ed3\u5c3e arg_ptrs [ args . size ()] = nullptr ; if ( pid == 0 ) { // \u8fd9\u91cc\u53ea\u6709\u5b50\u8fdb\u7a0b\u624d\u4f1a\u8fdb\u5165 // execvp \u4f1a\u5b8c\u5168\u66f4\u6362\u5b50\u8fdb\u7a0b\u63a5\u4e0b\u6765\u7684\u4ee3\u7801\uff0c\u6240\u4ee5\u6b63\u5e38\u60c5\u51b5\u4e0b execvp \u4e4b\u540e\u8fd9\u91cc\u7684\u4ee3\u7801\u5c31\u6ca1\u610f\u4e49\u4e86 // \u5982\u679c execvp \u4e4b\u540e\u7684\u4ee3\u7801\u88ab\u8fd0\u884c\u4e86\uff0c\u90a3\u5c31\u662f execvp \u51fa\u95ee\u9898\u4e86 execvp ( args [ 0 ]. c_str (), arg_ptrs ); // \u6240\u4ee5\u8fd9\u91cc\u76f4\u63a5\u62a5\u9519 exit ( 255 ); } // \u8fd9\u91cc\u53ea\u6709\u7236\u8fdb\u7a0b\uff08\u539f\u8fdb\u7a0b\uff09\u624d\u4f1a\u8fdb\u5165 int ret = wait ( nullptr ); if ( ret < 0 ) { std :: cout << \"wait failed\" ; } } } // \u7ecf\u5178\u7684 cpp string split \u5b9e\u73b0 // https://stackoverflow.com/a/14266139/11691878 std :: vector < std :: string > split ( std :: string s , const std :: string & delimiter ) { std :: vector < std :: string > res ; size_t pos = 0 ; std :: string token ; while (( pos = s . find ( delimiter )) != std :: string :: npos ) { token = s . substr ( 0 , pos ); res . push_back ( token ); s = s . substr ( pos + delimiter . length ()); } res . push_back ( s ); return res ; }","title":"\u5b9e\u9a8c\u4e8c"},{"location":"lab2/#\u5b9e\u9a8c\u4e8c","text":"\u5728\u5b9e\u9a8c\u4e00\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u8bb8\u591a\u547d\u4ee4\u884c\u64cd\u4f5c\u6765\u5b8c\u6210\u4e00\u7cfb\u5217\u5de5\u4f5c\uff0c\u5982\u7f16\u8bd1 Linux \u5185\u6838\u3001\u6253\u5305 initrd \u7b49\u3002\u6240\u6709\u7684\u547d\u4ee4\u884c\u90fd\u7531\u4e00\u4e2a\u53eb\u505a shell \u7684\u7a0b\u5e8f\u89e3\u91ca\u5e76\u6267\u884c\u3002\u672c\u5b9e\u9a8c\u6211\u4eec\u5c06\u81ea\u5df1\u7f16\u5199\u4e00\u4e2a\u7b80\u5355\u7684 shell \u5e76\u7406\u89e3 Linux shell \u7a0b\u5e8f\u7684\u5de5\u4f5c\u539f\u7406\u3002","title":"\u5b9e\u9a8c\u4e8c"},{"location":"lab2/#\u7f16\u5199-shell-\u7a0b\u5e8f","text":"\u9996\u5148\uff0c\u5927\u5bb6\u53ef\u4ee5\u5c06\u672c\u9875\u5e95\u90e8\u52a9\u6559\u7f16\u5199\u7684\u4e00\u4e2a\u793a\u4f8b\u7a0b\u5e8f\u547d\u540d\u4e3a shell.cpp \uff1a g++ shell.cpp -o shell \u4ee5\u4e0a\u547d\u4ee4\u4f1a\u8c03\u7528 g++ \u7f16\u8bd1\u5668\u7f16\u8bd1\u51fa\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6 shell\uff0c\u4f60\u53ef\u4ee5\u7ee7\u7eed\u8f93\u5165 ./shell \u6765\u8fd0\u884c\u5b83\u3002\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u7b80\u964b\u7684 shell\uff0c\u5b83\u4f1a\u63d0\u793a\u4f60\u8f93\u5165\u547d\u4ee4\uff0c\u4f60\u53ef\u4ee5\u8f93\u5165 cd \u6765\u5207\u6362\u5de5\u4f5c\u76ee\u5f55\uff0c\u8f93\u5165 pwd \u663e\u793a\u5f53\u524d\u76ee\u5f55\uff0c\u8f93\u5165 export \u5bfc\u51fa\u73af\u5883\u53d8\u91cf\uff0c\u8f93\u5165 exit \u9000\u51fa\uff0c\u6216\u8005\u8c03\u7528\u7cfb\u7edf\u4e2d\u6709\u7684\u5176\u4ed6\u547d\u4ee4\u6765\u8fd0\u884c\uff0c\u4f8b\u5982 ls \u3001 cat \u7b49\u3002 \u4f60\u7684\u4efb\u52a1\u662f\u5bf9\u8fd9\u4e2a shell \u7a0b\u5e8f\u8fdb\u884c\u4fee\u6539\u5347\u7ea7\uff08\u5f53\u7136\uff0c\u4f60\u4e5f\u53ef\u4ee5\u9009\u62e9\u81ea\u5df1\u4ece\u5934\u6216\u9009\u62e9\u5176\u4ed6\u8bed\u8a00\u7f16\u5199\uff09\uff0c\u5e76\u5b8c\u6210\u4e0b\u9762\u7684\u4efb\u52a1\u3002","title":"\u7f16\u5199 Shell \u7a0b\u5e8f"},{"location":"lab2/#\u66f4\u5065\u58ee\u63a8\u8350\u4f46\u4e0d\u8981\u6c42","text":"\u76ee\u524d\u7684\u793a\u4f8b\u7a0b\u5e8f\u975e\u5e38\u8106\u5f31\uff0c\u4ec5\u968f\u610f\u68c0\u67e5\u4e86\u90e8\u5206\u53ef\u80fd\u7684\u9519\u8bef\u3002\u5efa\u8bae\u4f60\u5c06\u5b83\u6539\u5f97\u66f4\u5065\u58ee\uff0c\u4ee5\u65b9\u4fbf\u4e4b\u540e\u7684\u8fdb\u4e00\u6b65\u5f00\u53d1\u548c\u8c03\u8bd5\u3002","title":"\u66f4\u5065\u58ee\uff08\u63a8\u8350\uff0c\u4f46\u4e0d\u8981\u6c42\uff09"},{"location":"lab2/#\u652f\u6301\u7ba1\u9053","text":"\u5f62\u5982 env | wc \u8fd9\u6837\u7684\u547d\u4ee4\u5229\u7528\u4e86\u300c\u7ba1\u9053\u300d\u8bed\u6cd5\uff0c\u5c06\u4e24\u6761\u4e0d\u540c\u7684\u547d\u4ee4\u5bf9\u63a5\u5728\u4e00\u8d77\u540c\u65f6\u8fd0\u884c\u3002 | \u7684\u610f\u601d\u662f\u5c06\u524d\u9762\u7684\u547d\u4ee4 env \uff08\u8f93\u51fa\u6240\u6709\u73af\u5883\u53d8\u91cf\uff09\u7684\u6807\u51c6\u8f93\u51fa\u8fde\u63a5\u5230\u540e\u9762\u547d\u4ee4 wc \uff08\u7edf\u8ba1\u884c\u6570\uff09\u7684\u6807\u51c6\u8f93\u5165\uff08\u8fd9\u6837\u5c31\u80fd\u7edf\u8ba1\u51fa\u73af\u5883\u53d8\u91cf\u7684\u603b\u6570\uff09\u3002 \u8bf7\u4f60\u89c2\u5bdf\u5e76\u5b66\u4e60\u8fd9\u4e2a\u8bed\u6cd5\uff0c\u4e3a\u4f60\u7684 shell \u7a0b\u5e8f\u5b9e\u73b0\u8fd9\u4e00\u529f\u80fd\u3002\u4f60\u53ef\u80fd\u8981\u7528\u5230\u7684\u51fd\u6570\uff1a pipe \u3001 close \u3001 dup \u3002\u4f60\u53ef\u4ee5\u8fd0\u884c man \u51fd\u6570\u540d \u6765\u67e5\u770b\u7cfb\u7edf\u81ea\u5e26\u7684\u6587\u6863\uff0c\u6216\u8005\u4e0a\u7f51\u641c\u7d22\u66f4\u591a\u4fe1\u606f\u3002 \u6837\u4f8b\uff1a $ ls | cat -n 1 Cargo.lock 2 Cargo.toml 3 README.md 4 src 5 target $ ls | cat -n | grep 1 1 Cargo.lock","title":"\u652f\u6301\u7ba1\u9053"},{"location":"lab2/#\u652f\u6301\u57fa\u672c\u7684\u6587\u4ef6\u91cd\u5b9a\u5411","text":"\u5f62\u5982 ls > out.txt \u4f1a\u5c06 ls \u547d\u4ee4\u7684\u6807\u51c6\u8f93\u51fa\uff08stdout\uff09\u91cd\u5b9a\u5411\u5230 out.txt \u6587\u4ef6\u4e2d\uff0c\u5177\u4f53\u5730\u8bf4\uff0c\u4f1a\u5c06 out.txt \u5173\u8054\u5230\u7a0b\u5e8f\u7684\u6807\u51c6\u8f93\u51fa\uff0c\u7136\u540e\u518d\u8fd0\u884c\u76f8\u5e94\u7684\u547d\u4ee4\u3002\u7c7b\u4f3c\u7684\uff0c ls >> out.txt \u4f1a\u5c06\u8f93\u51fa\u8ffd\u52a0\uff08\u800c\u4e0d\u662f\u8986\u76d6\uff09\u5230 out.txt \u6587\u4ef6\uff0c cat < in.txt \u4f1a\u5c06\u7a0b\u5e8f\u7684\u6807\u51c6\u8f93\u5165\uff08stdin\uff09\u91cd\u5b9a\u5411\u5230\u6587\u4ef6 in.txt \u3002 \u8bf7\u4e3a\u4f60\u7684 shell \u7a0b\u5e8f\u5b9e\u73b0 > \u3001 >> \u548c < \u7684\u529f\u80fd\u3002\u4f60\u53ef\u80fd\u8981\u7528\u5230\u7684\u51fd\u6570\uff1a open \u3001 close \u3001 dup \u3002 \u6837\u4f8b\uff1a $ ls | cat -n | grep 1 > out $ cat out 1 Cargo.lock $ cat < out 1 Cargo.lock $ ls | cat -n | grep 5 >> out $ cat out 1 Cargo.lock 5 target","title":"\u652f\u6301\u57fa\u672c\u7684\u6587\u4ef6\u91cd\u5b9a\u5411"},{"location":"lab2/#\u652f\u6301\u57fa\u4e8e\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u6587\u4ef6\u91cd\u5b9a\u5411\u6587\u4ef6\u91cd\u5b9a\u5411\u7ec4\u5408\u9009\u505a","text":"\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6bcf\u4e2a Unix/Linux \u547d\u4ee4\u8fd0\u884c\u65f6\u90fd\u4f1a\u6253\u5f00\u4e09\u4e2a\u6587\u4ef6\uff1a \u6807\u51c6\u8f93\u5165\u6587\u4ef6\uff08stdin\uff09\uff1a\u6587\u4ef6\u63cf\u8ff0\u7b26\u4e3a 0\uff0cUnix/Linux \u7a0b\u5e8f\u9ed8\u8ba4\u4ece stdin \u8bfb\u53d6\u6570\u636e\u3002 \u6807\u51c6\u8f93\u51fa\u6587\u4ef6\uff08stdout\uff09\uff1a\u6587\u4ef6\u63cf\u8ff0\u7b26\u4e3a 1\uff0cUnix/Linux \u7a0b\u5e8f\u9ed8\u8ba4\u5411 stdout \u8f93\u51fa\u6570\u636e\u3002 \u6807\u51c6\u9519\u8bef\u6587\u4ef6\uff08stderr\uff09\uff1a\u6587\u4ef6\u63cf\u8ff0\u7b26\u4e3a 2\uff0cUnix/Linux \u7a0b\u5e8f\u4f1a\u5411 stderr \u6d41\u4e2d\u5199\u5165\u9519\u8bef\u4fe1\u606f\u3002 \u6211\u4eec\u53ef\u4ee5\u624b\u52a8\u66f4\u6539\u8f93\u5165\u8f93\u51fa\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002\u8bf7\u81ea\u884c\u67e5\u627e\u8d44\u6599\uff0c\u5b9e\u73b0\u4ee5\u4e0b\u8fd9\u4e9b\u6587\u4ef6\u91cd\u5b9a\u5411\uff1a \u5f62\u5982 cmd 10> out.txt \u548c cmd 20< in.txt \u4ee5\u53ca cmd 10>&20 30< in.txt \u8fd9\u6837\u7684\u547d\u4ee4\u4f1a\u5c06\u6253\u5f00\u6587\u4ef6\u63cf\u8ff0\u7b26 10\u300120 \u548c 30 \u5e76\u91cd\u5b9a\u5411\u5230\u76f8\u5e94\u7684\u6587\u4ef6\u3002 cmd <<< text \u4f1a\u5c06 \"text\\n\" \u4f5c\u4e3a\u6807\u51c6\u8f93\u5165\u91cd\u5b9a\u5411\u7ed9 cmd \u3002 \u4ee5\u4e0b\u547d\u4ee4\u4f1a\u5c06\u5b57\u7b26\u4e32 \"this\\noutput\\n\" \u4f5c\u4e3a\u6807\u51c6\u8f93\u5165\u91cd\u5b9a\u5411\u7ed9 cmd \uff1a cmd << EOF this output EOF","title":"\u652f\u6301\u57fa\u4e8e\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u6587\u4ef6\u91cd\u5b9a\u5411\u3001\u6587\u4ef6\u91cd\u5b9a\u5411\u7ec4\u5408\uff08\u9009\u505a\uff09"},{"location":"lab2/#\u5904\u7406-ctrl-c-\u7684\u6309\u952e","text":"\u5728\u4f7f\u7528 shell \u7684\u65f6\u5019\u6309\u4e0b Ctrl-C \u53ef\u4ee5\u4e22\u5f03\u5f53\u524d\u8f93\u5165\u5230\u4e00\u534a\u7684\u547d\u4ee4\uff0c\u91cd\u65b0\u663e\u793a\u63d0\u793a\u7b26\u5e76\u63a5\u53d7\u65b0\u7684\u547d\u4ee4\u8f93\u5165\u3002\u5f53\u6709\u7a0b\u5e8f\u8fd0\u884c\u65f6\uff0c\u6309\u4e0b Ctrl-C \u53ef\u4ee5\u7ec8\u7ed3\u8fd0\u884c\u4e2d\u7684\u7a0b\u5e8f\uff0c\u7acb\u5373\u56de\u5230 shell \u5f00\u59cb\u65b0\u7684\u547d\u4ee4\u8f93\u5165\uff08shell \u6ca1\u6709\u968f\u7a0b\u5e8f\u4e00\u8d77\u7ed3\u675f\uff09\u3002 \u4f8b\u5982\uff08 ^C \u8868\u793a\u9047\u5230 Ctrl-C \u7684\u8f93\u5165\uff09\uff1a $ echo taokystrong taokystrong $ echo taokystrong^C $ sleep 5 # \u51e0\u79d2\u4e4b\u540e ^C $ # sleep \u6ca1\u6709\u8fd0\u884c\u5b8c $ ^C \u8bf7\u4e3a\u4f60\u7684 shell \u5b9e\u73b0\u5bf9 Ctrl-C \u7684\u5904\u7406\u3002\u4f60\u53ef\u80fd\u8981\u7528\u5230\u7684\u51fd\u6570\uff1a signal \u3001 waitpid \u3002 \u63d0\u793a\uff1a\u5f53\u4f60\u6b63\u786e\u5904\u7406\u7b2c\u4e00\u79cd\u60c5\u51b5\u540e\uff08\u4e22\u5f03\u672a\u8f93\u5165\u5b8c\u7684\u547d\u4ee4\uff09\uff0c\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff08\u7ec8\u7ed3\u8fd0\u884c\u4e2d\u7684\u7a0b\u5e8f\uff09\u5e76\u4e0d\u9700\u8981\u4f60\u505a\u4efb\u4f55\u5de5\u4f5c\u3002","title":"\u5904\u7406 Ctrl-C \u7684\u6309\u952e"},{"location":"lab2/#\u652f\u6301-history","text":"\u5728\u4f7f\u7528 shell\uff08\u8fd9\u91cc\u7279\u6307 bash\uff09\u7684\u65f6\u5019\u8f93\u5165 history n \u53ef\u4ee5\u663e\u793a\u6700\u8fd1\u6267\u884c\u7684 n \u6761\u6307\u4ee4\uff08\u5bf9\u4e8e zsh \u7528\u6237\uff0c history \u547d\u4ee4\u4f1a\u88ab\u81ea\u52a8\u66ff\u6362\u4e3a\u5185\u5efa\u7684 fc -l \uff0c\u663e\u793a\u4ece n \u6761\u547d\u4ee4\u5f00\u59cb\u7684\u8bb0\u5f55\uff09\u3002\u540c\u65f6\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 !n \u91cd\u590d\u6267\u884c\u5386\u53f2\u8bb0\u5f55\u4e2d\u7684\u7b2c n \u6761\u547d\u4ee4\uff0c\u7528 !! \u547d\u4ee4\u91cd\u590d\u6267\u884c\u4e0a\u4e00\u6761\u547d\u4ee4\u3002 \u4f8b\u5982\uff1a $ history 3 843 echo taokystrong 844 echo taoky 845 history 3 $ !843 echo taokystrong taokystrong $ !! echo taokystrong taokystrong \u8bf7\u4e3a\u4f60\u7684 shell \u5b9e\u73b0\u5bf9\u5386\u53f2\u547d\u4ee4\u7684\u5904\u7406\uff0c\u652f\u6301 !n \u3001 !! \u548c history n \u547d\u4ee4\uff0c\u4e14 history n \u7684\u8f93\u51fa\u8bf7\u5c3d\u53ef\u80fd\u4e0e bash \u76f8\u540c\u3002 \u53ef\u9009\uff1a\u5c06\u5386\u53f2\u547d\u4ee4\u6301\u4e45\u5316\uff0c\u65b0\u6253\u5f00\u7684 shell \u80fd\u4f7f\u7528\u4e4b\u524d\u4fdd\u7559\u7684\u8bb0\u5f55\uff081 \u5206\uff09\u3002\u63d0\u793a\uff1a\u53ef\u4ee5\u5b66\u4e60 bash/zsh\uff0c\u5728\u9000\u51fa\u7a0b\u5e8f\u65f6\u5c06\u5386\u53f2\u547d\u4ee4\u8bb0\u5f55\u5728\u4e00\u4e2a\u6587\u4ef6\u4e2d\uff08\u5982 .bash_history \u548c .zsh_history \uff09\u3002 \u53ef\u9009\uff1a\u901a\u8fc7\u4e0a\u4e0b\u65b9\u5411\u952e\u5207\u6362\u5230\u4e0d\u540c\u7684\u5386\u53f2\u547d\u4ee4\uff081 \u5206\uff09\u3002","title":"\u652f\u6301 History"},{"location":"lab2/#\u5904\u7406-ctrl-d-eof-\u6309\u952e\u9009\u505a05-\u5206","text":"\u5728\u4f7f\u7528 shell \u7684\u65f6\u5019\u8f93\u5165 exit \u5373\u53ef\u9000\u51fa shell\uff0cCtrl-D (EOF) \u5728\u8fd9\u79cd\u573a\u666f\u4e0b\u7b49\u540c\u4e8e exit \u3002","title":"\u5904\u7406 Ctrl-D (EOF) \u6309\u952e\uff08\u9009\u505a\uff0c0.5 \u5206\uff09"},{"location":"lab2/#\u652f\u6301-bash-\u98ce\u683c\u7684-tcp-\u91cd\u5b9a\u5411\u9009\u505a1-\u5206","text":"\u5728\u7cbe\u7b80\u7684 Linux \u73af\u5883\u4e2d\uff08\u5982 Docker \u5bb9\u5668\u91cc\uff09\uff0c\u5e38\u5e38\u662f\u6ca1\u6709 nc \u547d\u4ee4\u7528\u6765\u8fdb\u884c\u539f\u59cb\u7684 TCP \u7f51\u7edc\u901a\u4fe1\u7684\u3002Bash \u548c\u4e00\u4e9b\u5176\u4ed6 shell \u652f\u6301\u4e00\u79cd\u7279\u6b8a\u7684\u91cd\u5b9a\u5411\u8bed\u6cd5\uff1a /dev/tcp/<host>/<port> \u3002 \u901a\u8fc7\u67e5\u770b Bash \u7684 man \u6587\u6863 \uff0c REDIRECTION \u4e00\u8282\uff0c\u5f53\u91cd\u5b9a\u5411\u76ee\u6807\u662f\u4e0b\u9762\u51e0\u79cd\u8def\u5f84\uff0c\u4e14\u64cd\u4f5c\u7cfb\u7edf\u6ca1\u6709\u63d0\u4f9b\u8fd9\u4e2a\u8def\u5f84\u65f6\uff0cBash \u4f1a\u81ea\u884c\u5904\u7406\u5b83\u4eec\uff1a /dev/fd/<fd> /dev/stdin /dev/stdout /dev/stderr /dev/tcp/<host>/<port> /dev/udp/<host>/<port> \u9605\u8bfb\u76f8\u5173\u6587\u6863\uff0c\u6a21\u62df Bash \u7684\u884c\u4e3a\u5b9e\u73b0 cmd > /dev/tcp/<host>/<port> \u548c cmd < /dev/tcp/<host>/<port> \u7684\u91cd\u5b9a\u5411\u3002\u4f60\u53ef\u80fd\u8981\u7528\u5230\u7684\u51fd\u6570\uff1a socket , connect \u65b9\u4fbf\u8d77\u89c1\uff0c\u4f60\u53ea\u9700\u8981\u5904\u7406 <host> \u662f\u5178\u578b\u7684 IPv4 \u5730\u5740\uff08\u5373 a.b.c.d \u7684\u5f62\u5f0f\uff0c\u5176\u4e2d abcd \u5747\u4e3a 0 ~ 255 \u4e4b\u95f4\u7684\u6574\u6570\uff09\u4e14 <port> \u4e3a 1 ~ 65535 \u4e4b\u95f4\u7684\u6574\u6570\u65f6\u7684\u60c5\u51b5\u3002","title":"\u652f\u6301 Bash \u98ce\u683c\u7684 TCP \u91cd\u5b9a\u5411\uff08\u9009\u505a\uff0c1 \u5206\uff09"},{"location":"lab2/#\u66f4\u591a\u529f\u80fd\u9009\u505a","text":"\u6211\u4eec\u4e00\u822c\u4f7f\u7528\u7684 shell \u975e\u5e38\u5f3a\u5927\uff0c\u4f60\u8fd8\u53ef\u4ee5\u81ea\u884c\u4e86\u89e3\u4e0b\u9762\u8fd9\u4e9b\u8bed\u6cd5\u7684\u542b\u4e49\uff1a echo ~root # 0.5 \u5206 echo $SHELL # 0.5 \u5206 A = 1 env # \u5269\u4e0b\u90fd 1 \u5206 alias ll = 'ls -l' ( sleep 10 ; echo aha ) & if true ; then ls ; fi ifdown eth0 && ifup eth0 set -u # check existence of variable \u8bf7\u81ea\u884c\u9009\u62e9\u4e00\u4e2a\u6216\u591a\u4e2a\u529f\u80fd\u5e76\u5b9e\u73b0\u5b83\u4eec\u3002","title":"\u66f4\u591a\u529f\u80fd\uff08\u9009\u505a\uff09"},{"location":"lab2/#\u7f16\u5199-tiny-strace-\u5de5\u5177","text":"Linux \u7cfb\u7edf\u4e2d\u6709\u8bb8\u591a\u7528\u4e8e\u76d1\u63a7\u3001\u8ffd\u8e2a\u7cfb\u7edf\u72b6\u6001\u7684\u5de5\u5177\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002 strace \u662f\u4e00\u4e2a\u7528\u4e8e\u76d1\u63a7\u8fdb\u7a0b\u7cfb\u7edf\u8c03\u7528\u7684\u7a0b\u5e8f\uff0c\u4f8b\u5982\uff0c\u5728 Debian \u7cfb\u7edf\u4e2d\u4f7f\u7528 strace \u8ffd\u8e2a true \u547d\u4ee4\uff08\u4e00\u4e2a\u4ec0\u4e48\u90fd\u4e0d\u505a\u5e76\u8fd4\u56de 0 \u7684\u547d\u4ee4\uff09\uff0c\u53ef\u4ee5\u770b\u5230\u7c7b\u4f3c\u4ee5\u4e0b\u8f93\u51fa\uff1a $ strace true execve ( \"/usr/bin/true\" , [ \"true\" ] , 0x7ffd34ea2230 /* 59 vars */ ) = 0 brk ( NULL ) = 0x55c95678b000 arch_prctl ( 0x3001 /* ARCH_??? */, 0x7fff46be7eb0 ) = -1 EINVAL ( Invalid argument ) access ( \"/etc/ld.so.preload\" , R_OK ) = -1 ENOENT ( No such file or directory ) openat ( AT_FDCWD, \"/etc/ld.so.cache\" , O_RDONLY | O_CLOEXEC ) = 3 newfstatat ( 3 , \"\" , { st_mode = S_IFREG | 0644 , st_size = 223491 , ... } , AT_EMPTY_PATH ) = 0 mmap ( NULL, 223491 , PROT_READ, MAP_PRIVATE, 3 , 0 ) = 0x7f16a8186000 close ( 3 ) = 0 openat ( AT_FDCWD, \"/usr/lib/libc.so.6\" , O_RDONLY | O_CLOEXEC ) = 3 read ( 3 , \"\\177ELF\\2\\1\\1\\3\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0>\\0\\1\\0\\0\\0\\320\\324\\2\\0\\0\\0\\0\\0\" ..., 832 ) = 832 pread64 ( 3 , \"\\6\\0\\0\\0\\4\\0\\0\\0@\\0\\0\\0\\0\\0\\0\\0@\\0\\0\\0\\0\\0\\0\\0@\\0\\0\\0\\0\\0\\0\\0\" ..., 784 , 64 ) = 784 pread64 ( 3 , \"\\4\\0\\0\\0@\\0\\0\\0\\5\\0\\0\\0GNU\\0\\2\\0\\0\\300\\4\\0\\0\\0\\3\\0\\0\\0\\0\\0\\0\\0\" ..., 80 , 848 ) = 80 pread64 ( 3 , \"\\4\\0\\0\\0\\24\\0\\0\\0\\3\\0\\0\\0GNU\\0\\205vn\\235\\204X\\261n\\234|\\346\\340|q,\\2\" ..., 68 , 928 ) = 68 newfstatat ( 3 , \"\" , { st_mode = S_IFREG | 0755 , st_size = 2463384 , ... } , AT_EMPTY_PATH ) = 0 mmap ( NULL, 8192 , PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0 ) = 0x7f16a8184000 pread64 ( 3 , \"\\6\\0\\0\\0\\4\\0\\0\\0@\\0\\0\\0\\0\\0\\0\\0@\\0\\0\\0\\0\\0\\0\\0@\\0\\0\\0\\0\\0\\0\\0\" ..., 784 , 64 ) = 784 mmap ( NULL, 2136752 , PROT_READ, MAP_PRIVATE | MAP_DENYWRITE, 3 , 0 ) = 0x7f16a7f7a000 mprotect ( 0x7f16a7fa6000, 1880064 , PROT_NONE ) = 0 mmap ( 0x7f16a7fa6000, 1531904 , PROT_READ | PROT_EXEC, MAP_PRIVATE | MAP_FIXED | MAP_DENYWRITE, 3 , 0x2c000 ) = 0x7f16a7fa6000 mmap ( 0x7f16a811c000, 344064 , PROT_READ, MAP_PRIVATE | MAP_FIXED | MAP_DENYWRITE, 3 , 0x1a2000 ) = 0x7f16a811c000 mmap ( 0x7f16a8171000, 24576 , PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_FIXED | MAP_DENYWRITE, 3 , 0x1f6000 ) = 0x7f16a8171000 mmap ( 0x7f16a8177000, 51888 , PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_FIXED | MAP_ANONYMOUS, -1, 0 ) = 0x7f16a8177000 close ( 3 ) = 0 mmap ( NULL, 12288 , PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0 ) = 0x7f16a7f77000 arch_prctl ( ARCH_SET_FS, 0x7f16a7f77740 ) = 0 set_tid_address ( 0x7f16a7f77a10 ) = 185317 set_robust_list ( 0x7f16a7f77a20, 24 ) = 0 rseq ( 0x7f16a7f780e0, 0x20, 0 , 0x53053053 ) = 0 mprotect ( 0x7f16a8171000, 12288 , PROT_READ ) = 0 mprotect ( 0x55c954a3b000, 4096 , PROT_READ ) = 0 mprotect ( 0x7f16a81f2000, 8192 , PROT_READ ) = 0 prlimit64 ( 0 , RLIMIT_STACK, NULL, { rlim_cur = 8192 *1024, rlim_max = RLIM64_INFINITY }) = 0 munmap ( 0x7f16a8186000, 223491 ) = 0 exit_group ( 0 ) = ? +++ exited with 0 +++ \u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0cstrace \u5217\u51fa\u4e86 true \u8fd9\u4e00\u7a0b\u5e8f\u8c03\u7528\u7684\u6240\u6709 Linux syscall\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u5229\u7528 ptrace \u8fd9\u4e00\u6846\u67b6\u5b9e\u73b0\u4e00\u4e2a\u7c7b\u4f3c strace \u7684\u5de5\u5177\u3002","title":"\u7f16\u5199 tiny strace \u5de5\u5177"},{"location":"lab2/#\u6587\u6863","text":"\u5728\u8fdb\u884c\u7a0b\u5e8f\u7f16\u5199\u524d\uff0c\u8bf7\u5148\u7b80\u8981\u9605\u8bfb ptrace \u6587\u6863 \u3002 \u4e00\u4e2a\u793a\u4f8b\u6027\u7684\u4f8b\u5b50\u53ef\u4ee5\u5728 \u8fd9\u7bc7\u6587\u7ae0 \u4e2d\u627e\u5230\u3002 \u6211\u4eec\u5c06\u56f4\u7ed5\u8fd9\u7bc7\u6587\u7ae0\u63d0\u4f9b\u4e00\u4e9b\u89e3\u91ca\uff0c\u7136\u540e\u5217\u51fa\u5177\u4f53\u9700\u8981\u5b9e\u73b0\u7684\u529f\u80fd","title":"\u6587\u6863"},{"location":"lab2/#\u7b80\u5355\u8ffd\u8e2a","text":"\u9996\u5148\u8981\u76d1\u542c\u4e00\u4e2a\u8fdb\u7a0b\u7684 syscall\uff0c\u9700\u8981\u6709\u53e6\u5916\u4e00\u4e2a\u8fdb\u7a0b\u3002 \u8fd9\u91cc\u6211\u4eec\u9996\u5148\u7528 fork() \u521b\u5efa\u4e00\u4e2a\u5b50\u8fdb\u7a0b\uff0c\u5728\u5b50\u8fdb\u7a0b\u4e2d\u5f00\u542f ptrace\uff0c\u7136\u540e\u8c03\u7528 execvp() \u8fd0\u884c\u76f8\u5e94\u7684\u7a0b\u5e8f\uff1a pid_t pid = fork (); switch ( pid ) { case -1 : exit ( 1 ) case 0 : ptrace ( PTRACE_TRACEME , 0 , 0 , 0 ); execvp ( argv [ 1 ], argv + 1 ); exit ( 1 ) } \u5b50\u8fdb\u7a0b\u5728\u6267\u884c\u5230 PTRACE_TRACEME \u540e\u4f1a\u505c\u4f4f\u7b49\u5f85\u7236\u8fdb\u7a0b\u6307\u4ee4\u3002 \u5728\u7236\u8fdb\u7a0b\u4e2d\uff0c\u4f7f\u7528\uff1a waitpid ( pid , 0 , 0 ); \u4e0d\u80fd\u4f7f\u7528 wait() \uff0c\u56e0\u4e3a\u9700\u8981\u4f20\u5165 PID \u6765\u7b49\u5f85\u5b50\u8fdb\u7a0b\u7684\u8fd9\u6b21\u505c\u6b62\u3002 \u7b49\u5230\u540e\uff0c\u4f7f\u7528\uff1a ptrace ( PTRACE_SETOPTIONS , pid , 0 , PTRACE_O_EXITKILL ); \u6765\u8bbe\u7f6e\u4e00\u4e9b\u53c2\u6570\u3002 \u8fd9\u91cc PTRACE_O_EXITKILL \u6307\u793a\u5b50\u8fdb\u7a0b\u5728\u7236\u8fdb\u7a0b\u9000\u51fa\u540e\u7acb\u5373\u9000\u51fa\u3002 \u66f4\u591a\u7684\u53c2\u6570\u53ca\u5177\u4f53\u542b\u4e49\u53ef\u4ee5\u5728\u524d\u8ff0\u6587\u6863\u4e2d\u627e\u5230\u3002 \u73b0\u5728\u5c31\u53ef\u4ee5\u6b63\u5f0f\u5f00\u59cb\u76d1\u542c\u5b50\u8fdb\u7a0b syscall \u4e86\u3002 \u9996\u5148\u5728\u7236\u8fdb\u7a0b\u4e2d\u8fd0\u884c\uff1a ptrace ( PTRACE_SYSCALL , pid , 0 , 0 ); waitpid ( pid , 0 , 0 ); \u6765\u8ba9\u5b50\u8fdb\u7a0b\u6062\u590d\u6267\u884c\uff0c\u5e76\u8ba9\u5b50\u8fdb\u7a0b\u5728\u4e0b\u4e00\u6b21 syscall \u7684\u5165\u53e3\u5904\u505c\u4f4f\uff1b waitpid() \u4f1a\u8ba9\u7236\u8fdb\u7a0b\u7b49\u5f85\u5230\u76ee\u6807\u65f6\u523b\u518d\u6062\u590d\u6267\u884c\u3002 waitpid() \u7ed3\u675f\u540e\uff0c\u5b50\u8fdb\u7a0b\u505c\u5728 syscall \u5165\u53e3\u5904\u3002 \u7236\u8fdb\u7a0b\u6b64\u65f6\u6062\u590d\u6267\u884c\u3002 \u6b64\u65f6\uff0c\u7236\u8fdb\u7a0b\u53ef\u4ee5\u4f7f\u7528\uff1a struct user_regs_struct regs ; ptrace ( PTRACE_GETREGS , pid , 0 , & regs ); long syscall = regs . orig_rax ; fprintf ( stderr , \"%ld(%ld, %ld, %ld, %ld, %ld, %ld)\" , syscall , ( long ) regs . rdi , ( long ) regs . rsi , ( long ) regs . rdx , ( long ) regs . r10 , ( long ) regs . r8 , ( long ) regs . r9 ); \u6765\u8bfb\u53d6\u5b50\u8fdb\u7a0b\u4e2d\u8fdb\u884c syscall \u65f6\u5404\u4e2a CPU \u5bc4\u5b58\u5668\u7684\u503c\u3002 \u7531\u4e8e\u662f\u5728 Linux \u73af\u5883\u4e2d\uff0cfunction call \u9075\u5faa Linux system call convention\uff0c\u53c2\u6570\u6309\u987a\u5e8f\u6392\u5217\u5728 rdi\u3001rsi\u3001rdx\u3001r10\u3001r8\u3001r9 \u5bc4\u5b58\u5668\u4e2d\uff0csyscall number \u7f6e\u4e8e rax \u5bc4\u5b58\u5668\u4e2d\u3002 \u901a\u8fc7\u8bfb\u53d6\u8fd9\u4e9b\u5bc4\u5b58\u5668\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u77e5\u9053\u53c2\u6570\u7684\u503c\u548c\u5b50\u8fdb\u7a0b\u5177\u4f53\u8981\u8c03\u7528\u7684 syscall\u3002 Info \u5f53\u53c2\u6570\u662f\u6307\u9488\u65f6\uff0c\u8fd9\u91cc\u4ece\u5bc4\u5b58\u5668\u4e2d\u8bfb\u51fa\u7684\u503c\u5f53\u7136\u662f\u6307\u9488\u7684\u503c\u3002 \u800c\u4e0d\u540c\u8fdb\u7a0b\u95f4\uff0c\u6307\u9488\u5e76\u4e0d\u80fd\u76f4\u63a5\u89e3\u5f15\u7528\u800c\u8bbf\u95ee\u5177\u4f53\u6570\u636e\u3002 ptrace \u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528 PTRACE_PEEKTEXT \u6216\u662f PTRACE_PEEKDATA \uff08Linux \u4e0a\u4e24\u8005\u7b49\u4ef7\uff09\u6765\u8bfb\u53d6\u6307\u9488\u6307\u5411\u7684\u6570\u636e\u3002 \u7136\u540e\uff0c\u5728\u672c\u6b21\u5b9e\u9a8c\u4e2d\uff0c \u5e76\u4e0d \u8981\u6c42\u5bf9\u6307\u9488\u8fdb\u884c\u89e3\u5f15\u7528\u3002 \u6d4b\u8bd5\u4e2d\u5c06\u4f1a\u4e3b\u8981\u8003\u5bdf integer \u7c7b\u578b\u7684\u53c2\u6570\u3002 \u5728\u7236\u8fdb\u7a0b\u4e2d\u5b8c\u6210\u4fe1\u606f\u83b7\u53d6\u540e\uff0c\u518d\u6b21\u8c03\u7528 PTRACE_SYSCALL \u6765\u8ba9\u5b50\u8fdb\u7a0b\u6062\u590d\u6267\u884c\u5e76\u505c\u5728 syscall \u51fa\u53e3\u5904\uff1a ptrace ( PTRACE_SYSCALL , pid , 0 , 0 ); waitpid ( pid , 0 , 0 ); \u8fd9\u91cc\u53ef\u4ee5\u770b\u5230\uff0c PTRACE_SYSCALL \u6709\u4e24\u79cd\u4f5c\u7528\uff0c\u80fd\u8ba9\u5b50\u8fdb\u7a0b\u6062\u590d\u6267\u884c\u5e76\u505c\u7559\u5728 syscall \u5165\u53e3\u6216\u51fa\u53e3\u5904\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\u5177\u4f53\u60c5\u51b5\u4e2d\u662f\u505c\u5728\u51fa\u53e3\u5904\u8fd8\u662f\u505c\u5728\u5165\u53e3\u5904\u662f \u65e0\u6cd5\u5206\u8fa8 \u7684\uff0c\u9700\u8981\u81ea\u5df1\u7528\u4ee3\u7801\u5728\u7236\u8fdb\u7a0b\u4e2d\u7ef4\u62a4\u72b6\u6001\u3002 \u5177\u4f53\u53ef\u80fd\u7684\u6d41\u7a0b\u5728\u524d\u8ff0\u6587\u6863\u4e2d\u6709\u8be6\u7ec6\u63cf\u5199\u3002 \u5728 syscall \u51fa\u53e3\u5904\u65f6\uff0c\u8fd4\u56de\u503c\u5b58\u5728 rax \u5bc4\u5b58\u5668\u4e2d\u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8bfb\u53d6\u5bc4\u5b58\u5668 rax \u6765\u83b7\u53d6\u8fd4\u56de\u503c\uff0c\u751a\u81f3\u662f\u4fee\u6539\u8fd4\u56de\u503c\uff1a ptrace ( PTRACE_GETREGS , pid , 0 , & regs ); fprintf ( stderr , \" = %ld \\n \" , ( long ) regs . rax ); \u6ce8\u610f\u4e0e\u5165\u53e3\u5904\u4e0d\u540c\uff0c\u51fa\u53e3\u5904\u7528\u7684\u662f rax field \u800c\u4e0d\u662f orig_rax field \u8fd9\u6837\uff0c\u4e00\u4e2a\u53ef\u7528\u7684\u7c7b strace \u5de5\u5177\u5c31\u5b9e\u73b0\u4e86\u3002 \u8f93\u51fa\u65f6\uff0c\u6bcf\u4e00\u4e2a syscall \u8bf7\u7528 \"%ld(%ld, %ld, %ld, %ld, %ld, %ld)\\n\" \u7684\u5f62\u5f0f\u8f93\u51fa\u3002 \u7531\u4e8e\u6d4b\u8bd5\u4e2d\u4f1a\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u8fdb\u884c\u5339\u914d\uff0c\u4e00\u4e9b\u5c0f\u7ec6\u8282\uff0c\u4f8b\u5982\u7a0b\u5e8f\u5f00\u59cb/\u7ed3\u5c3e\u989d\u5916\u8f93\u51fa\u7684\u4fe1\u606f\u3001\u591a\u4f59\u7684\u7a7a\u683c\uff0c\u4e0d\u4f1a\u5f71\u54cd\u7b54\u6848\u7684\u6d4b\u8bc4\u3002 \u4fdd\u8bc1 syscall number \u548c\u53c2\u6570\u6b63\u786e\u5373\u53ef\u3002","title":"\u7b80\u5355\u8ffd\u8e2a"},{"location":"lab2/#\u5904\u7406\u5b50\u8fdb\u7a0b\u9009\u505a","text":"\u5728\u5b50\u8fdb\u7a0b fork() \u6216\u662f clone() \u540e\uff0c\u5b50\u8fdb\u7a0b\u7684\u5b50\u8fdb\u7a0b\u7531\u4e8e\u6ca1\u6709\u8fdb\u884c\u76f8\u5e94\u914d\u7f6e\uff0c\u662f\u65e0\u6cd5\u4f7f\u7528\u4e0a\u8ff0\u65b9\u6cd5\u8ffd\u8e2a syscall \u7684\u3002 ptrace \u63d0\u4f9b\u4e86\u76f8\u5e94\u7684\u89e3\u51b3\u65b9\u6cd5\u3002 \u5728 PTRACE_SETOPTIONS \u4e2d\uff0c\u53ef\u4ee5\u914d\u7f6e\u66f4\u591a\u7684\u9009\u9879\u6765\u81ea\u52a8\u8ffd\u8e2a\u5b50\u8fdb\u7a0b\u3002 \u8bf7\u4ed4\u7ec6\u9605\u8bfb ptrace \u6587\u6863\uff0c\u7406\u89e3\u5177\u4f53\u65b9\u6848\uff0c\u63d0\u4f9b\u4e00\u4e2a\u7c7b\u4f3c\u4e0a\u8ff0\u7a0b\u5e8f\u3001\u4f46\u80fd\u591f\u6b63\u786e\u5904\u7406\u5b50\u8fdb\u7a0b\u7684\u5b9e\u73b0\u3002 \u4e00\u4e9b\u53ef\u80fd\u6709\u7528\u7684\u4fe1\u606f\uff1a PTRACE_SYSCALL \u548c waitpid() \u53ef\u80fd\u56e0 signal \u800c\u9000\u51fa\uff0c\u4f46\u6b64\u6b21\u5b9e\u73b0\u4e0d\u8003\u8651 signal \u7684\u95ee\u9898 PTRACE_O_TRACEFORK \u548c PTRACE_O_TRACECLONE \u4f1a\u5728 syscall \u51fa\u53e3\u5904 \u8fdb\u884c\u901a\u77e5","title":"\u5904\u7406\u5b50\u8fdb\u7a0b\uff08\u9009\u505a\uff09"},{"location":"lab2/#\u5b9e\u9a8c\u8981\u6c42\u4e0e-ddl","text":"\u8bf7\u6309\u7167\u4ee5\u4e0b\u76ee\u5f55\u7ed3\u6784\u7ec4\u7ec7\u4f60\u7684 GitHub \u4ed3\u5e93\uff1a . // Git \u4ed3\u5e93\u76ee\u5f55 \u251c\u2500\u2500 lab2 // \u5b9e\u9a8c\u4e8c\u6839\u76ee\u5f55 \u2502 \u251c\u2500\u2500 shell // \u5b9e\u9a8c\u7684 shell \u90e8\u5206 \u2502 \u2502 \u251c\u2500\u2500 shell.cpp // \u4f60\u7684 shell \u7684\u6e90\u4ee3\u7801 \u2502 \u2502 \u251c\u2500\u2500 other.cpp \u2502 \u2502 \u2514\u2500\u2500 Makefile // \uff08\u53ef\u9009\uff09\u4f60\u63d0\u4f9b\u7684 Makefile \u2502 \u251c\u2500\u2500 strace // \u5b9e\u9a8c\u7684 strace \u90e8\u5206 \u2502 \u2502 \u251c\u2500\u2500 strace.cpp // \u4f60\u7684 strace \u7684\u6e90\u4ee3\u7801 \u2502 \u2502 \u251c\u2500\u2500 other.cpp \u2502 \u2502 \u2514\u2500\u2500 Makefile // \uff08\u53ef\u9009\uff09\u4f60\u63d0\u4f9b\u7684 Makefile \u2502 \u2514\u2500\u2500 README.md // \u7b80\u5355\u63cf\u8ff0\u7684\u5b9e\u9a8c\u62a5\u544a\uff0c\u4e0d\u5fc5\u8fc7\u957f \u251c\u2500\u2500 .gitignore \u2514\u2500\u2500 README.md \u672c\u6b21\u5b9e\u9a8c\u6ee1\u5206 12 \u5206\u3002\u6240\u83b7\u603b\u5206\u5982\u679c\u9ad8\u4e8e 12 \u5206\uff0c\u5c06\u88ab\u622a\u65ad\u4e3a 12 \u5206\u3002\u4f60\u9700\u8981\u5b8c\u6210\uff1a \u6309\u7167\u4e0a\u9762\u7684\u8981\u6c42\u7ec4\u7ec7\u4ed3\u5e93\u7ed3\u6784\uff0c\u63d0\u4ea4\u4f60\u7684 shell \u6e90\u4ee3\u7801\u548c strace \u6e90\u4ee3\u7801 \u5982\u679c\u4f60\u63d0\u4ea4\u7684\u5185\u5bb9\u65e0\u6cd5\u6b63\u5e38\u7f16\u8bd1\uff0c\u6211\u4eec\u4f1a\u5c1d\u8bd5\u4fee\u590d\u5e76\u914c\u60c5\u6263\u9664\u4e00\u5b9a\u5206\u6570 \u5b9e\u9a8c\u4e00\u4e2d\u5bf9\u4e8e Git \u5de5\u5177\u7684\u4f7f\u7528\u8981\u6c42\u4ecd\u7136\u9002\u7528\u4e8e\u672c\u5b9e\u9a8c\uff0c\u5373\u5f53\u51fa\u73b0\u4ee5\u4e0b\u60c5\u51b5\u65f6\uff0c\u6211\u4eec\u4f1a\u914c\u60c5\u6263\u9664\u4e00\u5b9a\u5206\u6570 \u5f88\u5927\u4e00\u90e8\u5206\u7684 commit \u7531 GitHub \u7f51\u9875\u7248\u751f\u6210\uff0c\u5373\u901a\u8fc7\u7f51\u9875\u7248\u6587\u4ef6\u4e0a\u4f20\u7684\u65b9\u5f0f\u63d0\u4ea4\u5b9e\u9a8c\u7684\u6587\u4ef6 \u53ea\u6709\u5be5\u5be5\u65e0\u51e0\u7684 commit \u4e0a\u4f20\u4e86\u5927\u91cf\u4e0e\u5b9e\u9a8c\u8981\u6c42\u65e0\u5173\u7684\u6587\u4ef6 shell \u90e8\u5206\uff1a\u5fc5\u505a\u9879\u76ee\u5171 8 \u5206\u3002\u5bf9\u4e8e\u989d\u5916\u7684\u9009\u505a\u9879\u76ee\uff0cshell \u90e8\u5206\u603b\u5206\u4e0d\u8d85\u8fc7 10 \u5206\uff1a \u4f60\u7684 shell \u80fd\u591f\u6b63\u786e\u5904\u7406\u542b\u6709 1 \u4e2a\u7ba1\u9053\u7684\u547d\u4ee4\uff081 \u5206\uff09 \u4f60\u7684 shell \u80fd\u591f\u6b63\u786e\u5904\u7406\u542b\u6709\u591a\u4e2a\u7ba1\u9053\u7684\u547d\u4ee4\uff081 \u5206\uff09 \u4f60\u7684 shell \u652f\u6301 > , >> , < \u91cd\u5b9a\u5411\uff08\u5404 0.5 \u5206\uff09 \u4f60\u7684 shell \u5728\u9047\u5230 Ctrl-C \u4fe1\u53f7\u65f6\u4e0d\u4f1a\u4e2d\u65ad \uff080.5 \u5206\uff09 \u4f60\u7684 shell \u5728\u9047\u5230 Ctrl-C \u65f6\u80fd\u4e22\u5f03\u5df2\u7ecf\u8f93\u5165\u4e00\u534a\u7684\u547d\u4ee4\u884c\uff0c\u663e\u793a # \u63d0\u793a\u7b26\u5e76\u91cd\u65b0\u63a5\u53d7\u8f93\u5165\uff081 \u5206\uff09 \u4f60\u7684 shell \u652f\u6301 history n \u547d\u4ee4\uff081 \u5206\uff09 \u4f60\u7684 shell \u652f\u6301\u901a\u8fc7 !n \u548c !! \u547d\u4ee4\uff08\u5404 1 \u5206\uff09 strace \u90e8\u5206\uff1a\u5fc5\u505a\u9879\u76ee\u5171 2 \u5206\u3002\u5bf9\u4e8e\u989d\u5916\u7684\u9009\u505a\u9879\u76ee\uff0cstrace \u90e8\u5206\u603b\u5206\u4e0d\u8d85\u8fc7 4 \u5206\uff1a \u4f60\u7684 strace \u7a0b\u5e8f\u80fd\u591f\u8ffd\u8e2a syscall\uff082 \u5206\uff09 \u4f60\u7684 strace \u7a0b\u5e8f\u652f\u6301\u8ffd\u8e2a fork \u548c clone \u540e\u7684\u5b50\u8fdb\u7a0b\uff08\u5404 1 \u5206\uff09 \u672c\u5b9e\u9a8c\u53ef\u4ee5\u4f7f\u7528 C/C++ \u6216 Rust \u8bed\u8a00\u5b8c\u6210\u3002 \u672c\u5b9e\u9a8c\u53ef\u4ee5\u4f7f\u7528 libc, libstdc++, libm \u4ee5\u53ca iostream, STL \u7b49 C/C++ \u8bed\u8a00\u6807\u51c6\u548c\u5e38\u7528\u5e93\u3002\u5982\u679c\u4f60\u613f\u610f\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 readline \u548c ncurses \u7b49 Linux \u7a0b\u5e8f\u5e38\u7528\u5e93\u3002\u4f7f\u7528\u6b64\u5904\u6ca1\u6709\u5217\u51fa\u7684\u5e93\u524d\u8bf7\u8be2\u95ee\u52a9\u6559\u3002 \u6b64\u6b21\u5b9e\u9a8c\u622a\u81f3\u65f6\u95f4\u4e3a 5 \u6708 9 \u65e5 23:59\u3002","title":"\u5b9e\u9a8c\u8981\u6c42\u4e0e DDL"},{"location":"lab2/#\u5173\u4e8e\u5b9e\u9a8c\u62a5\u544a","text":"\u6211\u4eec\u63a8\u8350\u4f60\u5728 README.md \u4e2d\u5199\u5c11\u91cf\u5185\u5bb9\uff1a \u4f60\u7684 shell \u5b9e\u73b0\u53ef\u80fd\u4e0e\u7cfb\u7edf\u4e2d\u7684 bash \uff08\u6216\u52a9\u6559\u671f\u671b\u7684\u8868\u73b0\uff09\u6709\u6240\u4e0d\u540c\uff0c\u7b80\u8981\u4ecb\u7ecd\u8fd9\u4e9b\u6f5c\u5728\u7684\u533a\u522b\uff0c\u4ee5\u514d\u4ea7\u751f\u8bef\u4f1a\uff0c\u5bfc\u81f4\u4e0d\u5fc5\u8981\u7684\u6263\u5206\u3002 \u4f60\u5b8c\u6210\u4e86\u4e00\u4e9b\u9009\u505a\u9879\u76ee\uff0c\u4e5f\u53ef\u4ee5\u7b80\u5355\u4ecb\u7ecd\uff0c\u65b9\u4fbf\u52a9\u6559\u8fdb\u884c\u66f4\u51c6\u786e\u7684\u8bc4\u4f30 \u672c\u5b9e\u9a8c\u7684\u4e3b\u8981\u5185\u5bb9\u4e3a shell \u7a0b\u5e8f\u7684\u7f16\u5199\uff0c\u56e0\u6b64\u4e0d\u5fc5\u82b1\u8d39\u592a\u591a\u5de5\u592b\u5728\u5b9e\u9a8c\u62a5\u544a\u4e0a\u3002","title":"\u5173\u4e8e\u5b9e\u9a8c\u62a5\u544a"},{"location":"lab2/#\u5173\u4e8e\u9009\u505a\u9879\u76ee","text":"\u5728\u5fc5\u505a\u90e8\u5206\u4ee5\u5916\uff0c\u4f60\u53ef\u4ee5\u53c2\u8003\u6807\u8bb0\u4e3a\u300c\u9009\u505a\u300d\u7684\u51e0\u4e2a\u5c0f\u8282\u4e2d\u4ecb\u7ecd\u7684 shell \u7684\u5e38\u89c1\u529f\u80fd\u5e76\u5b9e\u73b0\u6765\u5f97\u5230\u9009\u505a\u5206\u6570\uff08\u4e0d\u9650\u5236\u4e3a\u672c\u6587\u6863\u5217\u51fa\u7684\u529f\u80fd\uff0c\u89c1\u4e0b\uff09\u3002\u6bcf\u4e00\u9879\u989d\u5916\u529f\u80fd\u90fd\u4f1a\u7531\u52a9\u6559\u8ba8\u8bba\u8bc4\u4f30\uff0c\u4f46\u901a\u5e38\u5355\u4e2a\u9879\u76ee\u4e0d\u4f1a\u8d85\u8fc7 1 \u5206\u3002 \u6211\u4eec\u9f13\u52b1\u8fdb\u884c\u4e0e\u64cd\u4f5c\u7cfb\u7edf\u76f8\u5173\u7684\u5b9e\u9a8c\u63a2\u7a76\uff0c\u56e0\u6b64\u8fc7\u5ea6\u8131\u79bb\u4e3b\u9898\u7684\u9879\u76ee\u53ef\u80fd\u4e0d\u4f1a\u83b7\u5f97\u52a0\u5206\uff0c\u4f8b\u5982\uff1a \u8fc7\u4e8e\u7b80\u5355\u7684\u5185\u7f6e\u547d\u4ee4\uff0c\u5982 : (colon), true , false , help \u7b49 \u4e25\u91cd\u504f\u79bb shell \u7684\u57fa\u672c\u529f\u80fd\u7684\u9879\u76ee\uff0c\u4f8b\u5982\u4f60 \u6a21\u4eff Zsh \u4e3a\u4f60\u7684 shell \u5185\u7f6e\u4e86\u4e00\u4e2a\u4fc4\u7f57\u65af\u65b9\u5757\u6e38\u620f \u4f5c\u4e3a\u4e00\u4e2a\u53c2\u8003\u57fa\u51c6\uff0cGNU Bash \u5177\u6709\u7684\u529f\u80fd\u5927\u90e8\u5206\u90fd\u4f1a\u88ab\u8ba4\u53ef\u3002","title":"\u5173\u4e8e\u9009\u505a\u9879\u76ee"},{"location":"lab2/#\u5173\u4e8e\u7f16\u8bd1","text":"\u672c\u5b9e\u9a8c\u4e2d\uff0c\u5982\u679c\u4f60\u63d0\u4f9b\u4e86 Makefile \u6216\u8005 cargo.toml \u6587\u4ef6\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u5b83\u6765\u7f16\u8bd1\u4f60\u63d0\u4ea4\u7684\u7a0b\u5e8f\uff1b\u5426\u5219\uff0c\u6211\u4eec\u5c06\u5c3d\u53ef\u80fd\u53bb\u5c1d\u8bd5\u7f16\u8bd1 lab2/ \u76ee\u5f55\u4e0b\u6240\u6709\u7684 *.c \u3001 *.cpp \u6216\u8005 *.rs \u6587\u4ef6\u3002\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5728 README.md \u4e2d\u8bf4\u660e\u7f16\u8bd1\u4e0e\u8fd0\u884c\u76f8\u5173\u7684\u6ce8\u610f\u4e8b\u9879\u3002","title":"\u5173\u4e8e\u7f16\u8bd1"},{"location":"lab2/#\u793a\u4f8b\u7a0b\u5e8f","text":"// IO #include <iostream> // std::string #include <string> // std::vector #include <vector> // std::string \u8f6c int #include <sstream> // PATH_MAX \u7b49\u5e38\u91cf #include <climits> // POSIX API #include <unistd.h> // wait #include <sys/wait.h> std :: vector < std :: string > split ( std :: string s , const std :: string & delimiter ); int main () { // \u4e0d\u540c\u6b65 iostream \u548c cstdio \u7684 buffer std :: ios :: sync_with_stdio ( false ); // \u7528\u6765\u5b58\u50a8\u8bfb\u5165\u7684\u4e00\u884c\u547d\u4ee4 std :: string cmd ; while ( true ) { // \u6253\u5370\u63d0\u793a\u7b26 std :: cout << \"# \" ; // \u8bfb\u5165\u4e00\u884c\u3002std::getline \u7ed3\u679c\u4e0d\u5305\u542b\u6362\u884c\u7b26\u3002 std :: getline ( std :: cin , cmd ); // \u6309\u7a7a\u683c\u5206\u5272\u547d\u4ee4\u4e3a\u5355\u8bcd std :: vector < std :: string > args = split ( cmd , \" \" ); // \u6ca1\u6709\u53ef\u5904\u7406\u7684\u547d\u4ee4 if ( args . empty ()) { continue ; } // \u66f4\u6539\u5de5\u4f5c\u76ee\u5f55\u4e3a\u76ee\u6807\u76ee\u5f55 if ( args [ 0 ] == \"cd\" ) { if ( args . size () <= 1 ) { // \u8f93\u51fa\u7684\u4fe1\u606f\u5c3d\u91cf\u4e3a\u82f1\u6587\uff0c\u975e\u82f1\u6587\u8f93\u51fa\uff08\u5176\u5b9e\u662f\u975e ASCII \u8f93\u51fa\uff09\u5728\u6ca1\u6709\u7279\u522b\u914d\u7f6e\u7684\u60c5\u51b5\u4e0b\uff08\u7279\u522b\u662f Windows \u4e0b\uff09\u4f1a\u4e71\u7801 // \u5982\u611f\u5174\u8da3\u53ef\u4ee5\u81ea\u884c\u641c\u7d22 GBK Unicode UTF-8 Codepage UTF-16 \u7b49\u8fdb\u884c\u5b66\u4e60 std :: cout << \"Insufficient arguments \\n \" ; // \u4e0d\u8981\u7528 std::endl\uff0cstd::endl = \"\\n\" + fflush(stdout) continue ; } // \u8c03\u7528\u7cfb\u7edf API int ret = chdir ( args [ 1 ]. c_str ()); if ( ret < 0 ) { std :: cout << \"cd failed \\n \" ; } continue ; } // \u663e\u793a\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55 if ( args [ 0 ] == \"pwd\" ) { std :: string cwd ; // \u9884\u5148\u5206\u914d\u597d\u7a7a\u95f4 cwd . resize ( PATH_MAX ); // std::string to char *: &s[0]\uff08C++17 \u4ee5\u4e0a\u53ef\u4ee5\u7528 s.data()\uff09 // std::string \u4fdd\u8bc1\u5176\u5185\u5b58\u662f\u8fde\u7eed\u7684 // \u66f4\u65b0\uff0805-07\uff09:\u8fd9\u91cc CWD \u6ca1\u6709 print \u51fa\u6765\uff0c\u8981 print \u6216\u662f\u8fdb\u884c\u8fdb\u4e00\u6b65\u7684\u5b57\u7b26\u4e32\u5904\u7406\u7684\u8bdd\u9700\u8981\u5148\u81ea\u884c resize \u628a std::string \u4e2d\u672b\u5c3e\u7684 \\0 \u53bb\u6389\uff0c\u540c\u65f6\u53bb\u6389\u672b\u5c3e\u591a\u4f59\u7684\u7a7a\u95f4 const char * ret = getcwd ( & cwd [ 0 ], PATH_MAX ); if ( ret == nullptr ) { std :: cout << \"cwd failed \\n \" ; } else { std :: cout << ret << \" \\n \" ; } continue ; } // \u8bbe\u7f6e\u73af\u5883\u53d8\u91cf if ( args [ 0 ] == \"export\" ) { for ( auto i = ++ args . begin (); i != args . end (); i ++ ) { std :: string key = * i ; // std::string \u9ed8\u8ba4\u4e3a\u7a7a std :: string value ; // std::string::npos = std::string end // std::string \u4e0d\u662f nullptr \u7ed3\u5c3e\u7684\uff0c\u4f46\u786e\u5b9e\u4f1a\u6709\u4e00\u4e2a\u7ed3\u5c3e\u5b57\u7b26 npos size_t pos ; if (( pos = i -> find ( '=' )) != std :: string :: npos ) { key = i -> substr ( 0 , pos ); value = i -> substr ( pos + 1 ); } int ret = setenv ( key . c_str (), value . c_str (), 1 ); if ( ret < 0 ) { std :: cout << \"export failed \\n \" ; } } } // \u9000\u51fa if ( args [ 0 ] == \"exit\" ) { if ( args . size () <= 1 ) { return 0 ; } // std::string \u8f6c int std :: stringstream code_stream ( args [ 1 ]); int code = 0 ; code_stream >> code ; // \u8f6c\u6362\u5931\u8d25 if ( ! code_stream . eof () || code_stream . fail ()) { std :: cout << \"Invalid exit code \\n \" ; continue ; } return code ; } // \u5916\u90e8\u547d\u4ee4 pid_t pid = fork (); // std::vector<std::string> \u8f6c char ** char * arg_ptrs [ args . size () + 1 ]; for ( auto i = 0 ; i < args . size (); i ++ ) { arg_ptrs [ i ] = & args [ i ][ 0 ]; } // exec p \u7cfb\u5217\u7684 argv \u9700\u8981\u4ee5 nullptr \u7ed3\u5c3e arg_ptrs [ args . size ()] = nullptr ; if ( pid == 0 ) { // \u8fd9\u91cc\u53ea\u6709\u5b50\u8fdb\u7a0b\u624d\u4f1a\u8fdb\u5165 // execvp \u4f1a\u5b8c\u5168\u66f4\u6362\u5b50\u8fdb\u7a0b\u63a5\u4e0b\u6765\u7684\u4ee3\u7801\uff0c\u6240\u4ee5\u6b63\u5e38\u60c5\u51b5\u4e0b execvp \u4e4b\u540e\u8fd9\u91cc\u7684\u4ee3\u7801\u5c31\u6ca1\u610f\u4e49\u4e86 // \u5982\u679c execvp \u4e4b\u540e\u7684\u4ee3\u7801\u88ab\u8fd0\u884c\u4e86\uff0c\u90a3\u5c31\u662f execvp \u51fa\u95ee\u9898\u4e86 execvp ( args [ 0 ]. c_str (), arg_ptrs ); // \u6240\u4ee5\u8fd9\u91cc\u76f4\u63a5\u62a5\u9519 exit ( 255 ); } // \u8fd9\u91cc\u53ea\u6709\u7236\u8fdb\u7a0b\uff08\u539f\u8fdb\u7a0b\uff09\u624d\u4f1a\u8fdb\u5165 int ret = wait ( nullptr ); if ( ret < 0 ) { std :: cout << \"wait failed\" ; } } } // \u7ecf\u5178\u7684 cpp string split \u5b9e\u73b0 // https://stackoverflow.com/a/14266139/11691878 std :: vector < std :: string > split ( std :: string s , const std :: string & delimiter ) { std :: vector < std :: string > res ; size_t pos = 0 ; std :: string token ; while (( pos = s . find ( delimiter )) != std :: string :: npos ) { token = s . substr ( 0 , pos ); res . push_back ( token ); s = s . substr ( pos + delimiter . length ()); } res . push_back ( s ); return res ; }","title":"\u793a\u4f8b\u7a0b\u5e8f"},{"location":"lab3/","text":"Lab3 \u00b6 \u5728\u672c\u6b21\u5b9e\u9a8c\u4e2d\uff0c\u6211\u4eec\u5c06\u5b66\u4e60\u7b80\u5355\u7684 socket \u7f16\u7a0b\uff0c\u5206\u522b\u5229\u7528\u591a\u7ebf\u7a0b\u6280\u672f\u3001IO \u590d\u7528\u6280\u672f\u3001\u6216\u662f async/await \u534f\u7a0b\u7f16\u5199\u4e00\u4e2a\u7b80\u5355\u7684\u591a\u4eba\u804a\u5929\u5ba4\u7a0b\u5e8f\u3002 \u9996\u5148\u7ed9\u51fa\u4e00\u4e2a\u7b80\u5355\u7684\u53cc\u4eba\u804a\u5929\u5ba4\u793a\u4f8b\u7a0b\u5e8f\uff1a #include <stdio.h> #include <string.h> #include <stdlib.h> #include <unistd.h> #include <sys/socket.h> #include <netinet/in.h> #include <pthread.h> struct Pipe { int fd_send ; int fd_recv ; }; void * handle_chat ( void * data ) { struct Pipe * pipe = ( struct Pipe * ) data ; char buffer [ 1024 ] = \"Message: \" ; ssize_t len ; while (( len = recv ( pipe -> fd_send , buffer + 9 , 1000 , 0 )) > 0 ) { send ( pipe -> fd_recv , buffer , len + 9 , 0 ); } return NULL ; } int main ( int argc , char ** argv ) { int port = atoi ( argv [ 1 ]); int fd ; if (( fd = socket ( AF_INET , SOCK_STREAM , 0 )) == 0 ) { perror ( \"socket\" ); return 1 ; } struct sockaddr_in addr ; addr . sin_family = AF_INET ; addr . sin_addr . s_addr = INADDR_ANY ; addr . sin_port = htons ( port ); socklen_t addr_len = sizeof ( addr ); if ( bind ( fd , ( struct sockaddr * ) & addr , sizeof ( addr ))) { perror ( \"bind\" ); return 1 ; } if ( listen ( fd , 2 )) { perror ( \"listen\" ); return 1 ; } int fd1 = accept ( fd , NULL , NULL ); int fd2 = accept ( fd , NULL , NULL ); if ( fd1 == -1 || fd2 == -1 ) { perror ( \"accept\" ); return 1 ; } pthread_t thread1 , thread2 ; struct Pipe pipe1 ; struct Pipe pipe2 ; pipe1 . fd_send = fd1 ; pipe1 . fd_recv = fd2 ; pipe2 . fd_send = fd2 ; pipe2 . fd_recv = fd1 ; pthread_create ( & thread1 , NULL , handle_chat , ( void * ) & pipe1 ); pthread_create ( & thread2 , NULL , handle_chat , ( void * ) & pipe2 ); pthread_join ( thread1 , NULL ); pthread_join ( thread2 , NULL ); return 0 ; } \u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u7f16\u8bd1\u5e76\u8fd0\u884c\uff1a gcc 1 .c -o 1 -lpthread ./1 6666 \u63a5\u7740\u4e24\u4e2a\u7ec8\u7aef\u4e2d\u5206\u522b\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u8fde\u63a5\uff1a nc 127 .0.0.1 6666 \u5176\u4e2d nc \u662f netcat \u5305\u5185\u7684\u4e00\u4e2a\u7a0b\u5e8f \u8fd9\u6837\u4ece\u4e00\u4e2a\u7ec8\u7aef\u8f93\u5165\u7684\u6d88\u606f\uff0c\u4f1a\u8f6c\u53d1\u5230\u53e6\u4e00\u4e2a\u7ec8\u7aef\uff0c\u4e8e\u662f\u4fbf\u5b9e\u73b0\u4e86\u4e24\u4e2a\u5ba2\u6237\u7aef\u95f4\u7684\u804a\u5929\u3002\u8fd9\u4e2a\u804a\u5929\u5ba4\u7a0b\u5e8f\u5341\u5206\u7b80\u964b\uff0c\u5ffd\u7565\u4e86 socket \u7f16\u7a0b\u4e2d\u7684\u5f88\u591a\u7ec6\u8282\uff0c\u4f60\u7684\u4efb\u52a1\u5c31\u662f\u4fee\u6539\u5b83\uff08\u6216\u8005\u4ece\u5934\u7f16\u5199\uff09\uff0c\u4f7f\u5f97\u5b83\u66f4\u5065\u58ee\uff0c\u5e76\u4e14\u652f\u6301\u591a\u4eba\u804a\u5929\u3002 \u53cc\u4eba\u804a\u5929\u5ba4 2'+2' \u00b6 \u5b9e\u73b0\u4ee5\u6362\u884c\u4e3a\u5206\u9694\u7b26\u7684\u6d88\u606f\u5206\u5272 2' \u00b6 TCP \u662f\u4e00\u4e2a\u57fa\u4e8e\u6d41\u7684\u534f\u8bae\uff0c\u672c\u8eab\u6ca1\u6709\u201c\u6d88\u606f\u201d\u7684\u6982\u5ff5\u3002\u5728\u6574\u4e2a\u8fde\u63a5\u4e2d\uff0c\u5ba2\u6237\u7aef\u53d1\u9001\u7684\u6570\u636e\u53ea\u662f\u4e00\u8fde\u4e32\u7684\u5b57\u8282\uff0c\u670d\u52a1\u7aef\u5e76\u4e0d\u77e5\u9053\u5e94\u600e\u6837\u5206\u5272\u8fd9\u4e9b\u6570\u636e\u3002\u793a\u4f8b\u7a0b\u5e8f\u5c06\u4e00\u6b21 recv \u5f97\u5230\u7684\u6570\u636e\u89c6\u4e3a\u4e00\u4e2a\u6d88\u606f\uff0c\u662f\u4e0d\u5408\u9002\u7684\uff08\u4e00\u6b21 send \u5e76\u4e0d\u4e00\u5b9a\u5bf9\u5e94\u5bf9\u65b9\u7684\u4e00\u6b21 recv \uff09\u3002\u8bf7\u91cd\u65b0\u5b9e\u73b0\u63a5\u6536\u6570\u636e\u7684\u90e8\u5206\uff0c\u4ee5\u6362\u884c\u7b26 \\n \u4e3a\u5206\u9694\u7b26\u63a5\u6536\u548c\u5206\u5272\u6570\u636e\uff0c\u5e76\u4ee5\u4e00\u6761\u6d88\u606f\u4e3a\u5355\u4f4d\u53d1\u9001\u7ed9\u53e6\u4e00\u4e2a\u5ba2\u6237\u7aef\u3002\u5728\u52a9\u6559\u7684\u6d4b\u8bd5\u4e2d\u6d88\u606f\u7684\u957f\u5ea6\u4e0d\u8d85\u8fc7 1 MiB\uff081,048,576 \u5b57\u8282\uff09\u3002 \u4f8b\u5982\uff0c\u4f60\u5411\u670d\u52a1\u5668\u53d1\u9001\u4e86 Hi.\\nIt's Cindy here. \uff0c\u5728\u5176\u4ed6\u8fde\u63a5\u5230\u670d\u52a1\u5668\u7684 nc \u53cc\u4eba\u804a\u5929\u5ba4\u5ba2\u6237\u7aef\u4e2d\u4f1a\u6536\u5230\u8fd9\u6837\u7684\u6d88\u606f\uff1a Message: Hi. Message: It's Cindy here. \u800c\u4e0d\u662f\u6536\u5230\u4e00\u4e2a\u5e26\u6709\u6362\u884c\u7b26\u7684\u6d88\u606f\uff1a Message: Hi. It's Cindy here. \u4f60\u53ef\u80fd\u5df2\u7ecf\u53d1\u73b0\u5728 nc \u4e2d\u6bcf\u6b21\u6309\u4e0b\u56de\u8f66\u90fd\u4f1a\u5bfc\u81f4\u6d88\u606f\u53d1\u9001\uff0c\u8981\u5982\u4f55\u53d1\u9001\u5e26\u6709\u6362\u884c\u7b26\u7684\u6d88\u606f\u5462\uff1f\u8fd9\u91cc\u53ef\u4ee5\u4f7f\u7528 lab2 \u4e2d\u63d0\u5230\u7684\u7ba1\u9053\u548c\u6587\u4ef6\u91cd\u5b9a\u5411\uff1a echo -e \"Hi.\\nIt's Cindy here\" | nc 127 .0.0.1 6666 \u4e5f\u53ef\u4ee5\u5c06\u4f60\u8981\u53d1\u9001\u7684\u5185\u5bb9\u5199\u5230\u6587\u4ef6\u91cc\uff0c\u7136\u540e\u901a\u8fc7 > \u91cd\u5b9a\u5411\u8f93\u5165\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4f60\u53ef\u4ee5\u5bf9\u6bcf\u4e2a\u6536\u5230\u7684\u5b57\u7b26\u8fdb\u884c\u5339\u914d\uff0c\u4f46\u662f\u6bcf\u6b21\u8c03\u7528 recv \u53ea\u63a5\u6536\u4e00\u4e2a\u5b57\u7b26\u662f\u975e\u5e38\u4f4e\u6548\u7684\uff08\u5e26\u6765\u4e86\u4e0d\u5fc5\u8981\u7684 syscall \u5f00\u9500\uff09\u3002\u4f60\u7684\u5b9e\u73b0\u5e94\u5f53\u80fd\u591f\u4e00\u6b21\u63a5\u6536\u5927\u91cf\u6570\u636e\uff0c\u5e76\u80fd\u591f\u4ee5 \\n \u5bf9\u6d88\u606f\u8fdb\u884c\u5206\u5272\u3002\u5982\u679c\u4f60\u4e0d\u77e5\u9053\u5982\u4f55\u5b9e\u73b0\uff0c\u6700\u7ec8\u8fd8\u662f\u6bcf\u6b21\u53ea\u63a5\u6536\u4e00\u4e2a\u5b57\u7b26\uff0c\u4f60\u53ea\u80fd\u5f97\u5230\u4e00\u534a\u7684\u5206\u6570\uff081'\uff09\u3002 \u5904\u7406 send \u65e0\u6cd5\u4e00\u6b21\u53d1\u9001\u6240\u6709\u6570\u636e\u7684\u60c5\u51b5 2' \u00b6 \u5f53\u53d1\u9001\u7684\u6570\u636e\u957f\u5ea6\u8db3\u591f\u5927\u65f6\uff0c\u53ef\u80fd\u65e0\u6cd5\u4e00\u6b21\u5c06\u6240\u6709\u6570\u636e\u53d1\u9001\u5b8c\u6bd5\u3002\u6b64\u65f6 recv \u4e0e send \u90fd\u53ef\u80fd\u53ea\u6536\u53d1\u4e86\u90e8\u5206\u6570\u636e\uff0c\u8bf7\u5904\u7406\u8fd9\u79cd\u60c5\u51b5\uff0c\u4f7f\u5f97\u957f\u5ea6\u8f83\u5927\u7684\u6570\u636e\u80fd\u88ab\u5b8c\u6574\u5730\u53d1\u9001\u5230\u5ba2\u6237\u7aef\u3002\u591a\u6b21\u53d1\u9001\u4ea7\u751f\u7684\u989d\u5916 Message: \u4fe1\u606f\u53ef\u4ee5\u4e0d\u5904\u7406\u3002 \u63d0\u793a \u53ef\u4ee5\u67e5\u9605 send \u4e0e recv \u7684\u6587\u6863\uff0c\u4e86\u89e3\u8fd4\u56de\u503c\u7684\u542b\u4e49\u3002 \u6d4b\u8bd5\u65f6\u53ef\u4ee5\u901a\u8fc7 I/O \u91cd\u5b9a\u5411\u6765\u5411\u804a\u5929\u5ba4\u4e00\u65b9\u8f93\u5165\u4e00\u4e2a\u5927\u6587\u4ef6\uff08>1MB\uff09\uff0c\u82e5\u6210\u529f\u63a5\u6536\u5219\u53e6\u4e00\u65b9\u5f97\u5230\u7684\u6587\u4ef6\u5e94\u8be5\u662f\u76f8\u540c\u7684\u3002 \u57fa\u4e8e\u591a\u7ebf\u7a0b\u7684\u591a\u4eba\u804a\u5929\u5ba4 4'+2' \u00b6 \u7b80\u5355\u7684\u591a\u7ebf\u7a0b\u804a\u5929\u5ba4 4' \u00b6 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u5b9e\u73b0\u4e00\u4e2a\u652f\u6301\u591a\u4eba\u5728\u7ebf\u7684\u804a\u5929\u5ba4\uff0c\u5177\u4f53\u8981\u6c42\u5982\u4e0b\uff1a \u6700\u591a\u652f\u6301 32 \u4e2a\u7528\u6237\u540c\u65f6\u5728\u7ebf\uff0c\u7528\u6237\u53ef\u4ee5\u968f\u65f6\u52a0\u5165\u4e0e\u9000\u51fa \u7a0b\u5e8f\u5c06\u7528\u6237\u53d1\u51fa\u7684\u6570\u636e\u4ee5\u6362\u884c\u7b26\u5206\u5272\u4e3a\u6d88\u606f\uff0c\u5e76\u5c06\u6d88\u606f\u5b8c\u6574\u5730\u53d1\u9001\u7ed9\u5176\u4ed6\u7528\u6237 \u4f60\u9700\u8981\u4f7f\u7528\u963b\u585e IO \u4e0e\u591a\u7ebf\u7a0b\u6280\u672f\u6765\u5b9e\u73b0\u4e0a\u8ff0\u9700\u6c42\u3002\u53ef\u4ee5\u4f7f\u7528\u7684\u7ebf\u7a0b\u5e93\u6709 pthread, Windows API \u6216 std::thread \u3002\u9664\u4e86\u6807\u51c6\u5e93\u4e0e\u4e0a\u8ff0\u5e93\uff0c\u8bf7\u52ff\u4f7f\u7528\u5176\u4ed6\u5e93\u3002\u5728\u6d4b\u8bd5\u4e2d\u6d88\u606f\u7684\u957f\u5ea6\u4e0d\u8d85\u8fc7 1 MiB\u3002 \u8bf7\u6ce8\u610f\uff0csocket \u662f \u5168\u53cc\u5de5 \u7684\uff0c\u5373\u53ef\u4ee5\u7531\u4e24\u4e2a\u7ebf\u7a0b\u540c\u65f6\u5206\u522b\u8bfb\u53d6\u4e0e\u5199\u5165\u3002\u4f46\u5e76\u53d1\u5730\u8bfb\u53d6\u6216\u5e76\u53d1\u5730\u5199\u5165\u53ef\u80fd\u4f1a\u9020\u6210\u610f\u60f3\u4e0d\u5230\u7684\u540e\u679c\u3002\u8bf7\u5229\u7528\u64cd\u4f5c\u7cfb\u7edf\u8bfe\u7a0b\u4e2d\u7ebf\u7a0b\u540c\u6b65\u7684\u76f8\u5173\u77e5\u8bc6\u5b9e\u73b0\u5bf9 socket \u7684\u5b89\u5168\u64cd\u4f5c\u3002 pthread \u5982\u679c\u4f60\u5728\u7c7b Unix \u7cfb\u7edf\u4e0b\u7f16\u7a0b\uff0c\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528 pthread \u7ebf\u7a0b\u5e93\uff0c\u8fd9\u91cc\u5c06\u5bf9\u5176\u57fa\u672c\u7528\u6cd5\u505a\u51fa\u4ecb\u7ecd\u3002 int pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine) (void *), void *arg); int pthread_join(pthread_t thread, void **retval); int pthread_detach(pthread_t thread); pthread_create \u51fd\u6570\u7528\u4e8e\u521b\u5efa\u5e76\u542f\u52a8\u4e00\u4e2a\u65b0\u7684\u8fdb\u7a0b\u3002\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u6307\u5411\u6211\u4eec\u8981\u521b\u5efa\u7684\u7ebf\u7a0b\u5bf9\u8c61\u7684\u6307\u9488\uff1b\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a\u521b\u5efa\u65f6\u7684\u5c5e\u6027\uff0c\u76ee\u524d\u53ef\u4ee5\u5ffd\u7565\uff1b\u7b2c\u4e09\u4e2a\u53c2\u6570\u4e3a\u7ebf\u7a0b\u542f\u52a8\u540e\u5c06\u8981\u6267\u884c\u7684\u51fd\u6570\u6307\u9488\uff1b\u7b2c\u56db\u4e2a\u53c2\u6570\u4e3a\u4f20\u5165\u7ebf\u7a0b\u6267\u884c\u51fd\u6570\u7684\u6570\u636e\u3002 pthread_join \u7528\u4e8e\u7b49\u5f85\u7ebf\u7a0b\u7684\u7ed3\u675f\uff0c\u5e76\u63a5\u6536\u8fd4\u56de\u503c\u3002\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u7ebf\u7a0b\u5bf9\u8c61\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a\u63a5\u6536\u8fd4\u56de\u503c\u7684\u53d8\u91cf\u7684\u6307\u9488\uff0c\u5982\u679c\u4e3a NULL \u8868\u793a\u5ffd\u7565\u8fd4\u56de\u503c\u3002 pthread_detach \u53ef\u4ee5\u5c06\u7ebf\u7a0b\u4e0e\u4e3b\u7ebf\u7a0b\u5206\u79bb\uff0c\u4f7f\u8be5\u7ebf\u7a0b\u8fd0\u884c\u7ed3\u675f\u540e\u5f97\u4ee5\u7ec8\u6b62\u81ea\u5df1\u5e76\u91ca\u653e\u8d44\u6e90\u3002\u5206\u79bb\u540e\u7684\u7ebf\u7a0b\u5c06\u4e0d\u80fd\u88ab pthread_join \u7b49\u5f85\u3002 \u53e6\u5916 pthread \u7ebf\u7a0b\u5e93\u8fd8\u5305\u542b\u5904\u7406\u4e92\u65a5\u9501\u7684\u51fd\u6570\u3002 int pthread_mutex_init(pthread_mutex_t *restrict mutex, const pthread_mutexattr_t *restrict attr); int pthread_mutex_destroy(pthread_mutex_t *mutex); int pthread_mutex_lock(pthread_mutex_t *mutex); int pthread_mutex_unlock(pthread_mutex_t *mutex); \u6b63\u5982\u51fd\u6570\u540d\u6240\u793a\uff0c\u8fd9\u56db\u4e2a\u51fd\u6570\u5206\u522b\u5bf9\u5e94\u4e86\u4e92\u65a5\u9501\u7684\u521d\u59cb\u5316\u3001\u9500\u6bc1\u3001\u52a0\u9501\u548c\u89e3\u9501\u3002\u4f60\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 PTHREAD_MUTEX_INITIALIZER \u5b8f\u6765\u521d\u59cb\u5316\u4e92\u65a5\u9501\u3002 pthread \u4e5f\u5305\u542b\u5904\u7406\u6761\u4ef6\u53d8\u91cf\u7684\u51fd\u6570\uff0c\u53ef\u7528\u4e8e\u963b\u585e\u548c\u540c\u6b65\u7ebf\u7a0b\u3002 int pthread_cond_init(pthread_cond_t *restrict cond, const pthread_condattr_t *restrict attr); int pthread_cond_destroy(pthread_cond_t *cond); int pthread_cond_wait(pthread_cond_t *restrict cond, pthread_mutex_t *restrict mutex); \u4e0b\u9762\u7684\u4ee3\u7801\u5c55\u793a\u4e86\u6761\u4ef6\u53d8\u91cf\u548c\u4e92\u65a5\u9501\u7b80\u5355\u7684\u4f7f\u7528\u65b9\u6cd5\uff1a #include <stdio.h> #include <unistd.h> #include <pthread.h> pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER; pthread_cond_t cv = PTHREAD_COND_INITIALIZER; int ready = 0; int data; void *worker(void *p) { pthread_mutex_lock(&mutex); while (!ready) { pthread_cond_wait(&cv, &mutex); } printf(\"%d\\n\", data); pthread_mutex_unlock(&mutex); return NULL; } int main() { pthread_t thread; pthread_create(&thread, NULL, worker, NULL); pthread_mutex_lock(&mutex); sleep(1); data = 1234; ready = 1; pthread_cond_signal(&cv); pthread_mutex_unlock(&mutex); pthread_join(thread, NULL); return 0; } \u4ee5\u4e0a\u5c31\u662f pthread \u7ebf\u7a0b\u5e93\u6700\u57fa\u672c\u7684\u7528\u6cd5\uff0c\u5982\u9700\u8fdb\u4e00\u6b65\u5b66\u4e60\u66f4\u9ad8\u7ea7\u7684\u7279\u6027\uff0c\u8bf7\u81ea\u884c\u5728\u4e92\u8054\u7f51\u4e0a\u641c\u7d22\u6559\u7a0b\u4e0e\u6587\u6863\u3002 C++ \u7ebf\u7a0b\u5e93 \u5982\u679c\u4f60\u6bd4\u8f83\u719f\u6089 C++ \uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 C++ \u6807\u51c6\u5e93\u4e2d\u7684\u7ebf\u7a0b\u5e93\u3002\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u4e0e\u4e0a\u9762\u7684\u793a\u4f8b\u7a0b\u5e8f\u529f\u80fd\u76f8\u540c\u7684\u4f8b\u5b50\uff1a #include <iostream> #include <thread> #include <mutex> #include <condition_variable> #include <chrono> int main() { int n = 0; int data; bool ready = false; std::mutex mutex; std::condition_variable cv; auto f = [&] { std::unique_lock<std::mutex> lock(mutex); cv.wait(lock, [&]{return ready;}); std::cout << data << std::endl; }; std::thread thread(f); std::this_thread::sleep_for(std::chrono::seconds(1)); { std::lock_guard<std::mutex> lock(mutex); data = 1234; ready = true; cv.notify_one(); } thread.join(); return 0; } \u8bf7\u81ea\u884c\u53c2\u9605 C++ \u624b\u518c\u5b66\u4e60\u7ebf\u7a0b\u5e93\u7684\u7528\u6cd5\u3002 \u7ec6\u7c92\u5ea6\u9501 2' \u00b6 \u5982\u679c\u4f60\u76f4\u63a5\u5b9e\u73b0\u4e86\u8fd9\u4e00\u90e8\u5206\uff0c\u53ef\u4ee5\u5728\u5f97\u5230\u9644\u52a0\u5206\u7684\u540c\u65f6\u4e00\u5e76\u83b7\u5f97\u524d\u9762\u7684 4 \u5206\u3002 \u5728\u4e0a\u9762\u7684\u5b9e\u73b0\u4e2d\u4f60\u5f88\u53ef\u80fd\u76f4\u63a5\u5bf9 read/write \u64cd\u4f5c\u8fdb\u884c\u4e86\u52a0\u9501\uff0c\u4f46\u5bf9\u963b\u585e\u64cd\u4f5c\u8fdb\u884c\u52a0\u9501\u5bb9\u6613\u5f15\u53d1\u95ee\u9898\uff08\u5982\u56e0\u4e3a\u4e00\u4e2a\u963b\u585e\u64cd\u4f5c\u4e0d\u6210\u529f\u800c\u5bfc\u81f4\u9501\u65e0\u6cd5\u91ca\u653e\uff09\uff0c\u540c\u65f6\u9501\u7684\u5f15\u5165\u672c\u8eab\u4f1a\u5bf9\u6027\u80fd\u9020\u6210\u5f71\u54cd\u3002\u4e3a\u4e86\u5c3d\u53ef\u80fd\u51cf\u5c0f\u9501\u5bf9\u7cfb\u7edf\u6027\u80fd\u5e26\u6765\u7684\u5f71\u54cd\uff0c\u4f60\u5e94\u5f53\u5c3d\u91cf\u51cf\u5c0f\u9501\u7684\u5360\u7528\u65f6\u957f\u3002 \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u7ec6\u7c92\u5ea6\u9501\u4ee5\u89c4\u907f\u4e0a\u8ff0\u60c5\u51b5\u3002 \u63d0\u793a \u5bf9 read/write \u64cd\u4f5c\u52a0\u9501\u662f\u4e3a\u4e86\u907f\u514d\u5bf9\u540c\u4e00\u4e2a fd \u540c\u65f6\u8fdb\u884c\u591a\u4e2a\u8bfb/\u5199\u64cd\u4f5c\u3002\u8bd5\u60f3\u4e00\u79cd\u67b6\u6784\uff0c\u5b83\u80fd\u591f\u4fdd\u8bc1\u5bf9\u540c\u4e00\u4e2a fd \u7684\u591a\u4e2a\u8bfb/\u5199\u64cd\u4f5c\u4e0d\u4f1a\u540c\u65f6\u8fdb\u884c\u3002 \u53ef\u4ee5\u8003\u8651\u7528\u6d88\u606f\u961f\u5217\u4f5c\u4e3a\u901a\u4fe1\u65b9\u5f0f\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u5411\u63a5\u6536\u65b9\u7684 fd \u53d1\u9001\u6d88\u606f\u3002 \u57fa\u4e8e IO \u590d\u7528/\u5f02\u6b65 IO \u7684\u591a\u4eba\u804a\u5929\u5ba4 4'+1'+1'+2' \u00b6 \u9664\u4e86\u591a\u7ebf\u7a0b\uff0cIO \u590d\u7528\u4e0e\u5f02\u6b65 IO \u6280\u672f\u4e5f\u662f\u5b9e\u73b0\u5e76\u53d1\u670d\u52a1\u5668\u7684\u5e38\u89c1\u65b9\u5f0f\u3002\u5728\u793a\u4f8b\u7a0b\u5e8f\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0 recv \u5927\u90e8\u5206\u65f6\u95f4\u90fd\u5728\u7b49\u5f85\u6570\u636e\u7684\u5230\u6765\uff0c\u5b9e\u9645\u4e0a\u5904\u4e8e\u7a7a\u95f2\u72b6\u6001\u3002\u56e0\u6b64\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u591a\u7ebf\u7a0b\u5b9e\u9645\u4e0a\u662f\u6ca1\u6709\u5fc5\u8981\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u975e\u963b\u585e IO \u4e0e IO \u590d\u7528\u6280\u672f\u5b9e\u73b0\u76f8\u540c\u7684\u529f\u80fd\u3002\u5e38\u89c1\u7684 IO \u590d\u7528\u5b9e\u73b0\u6709\uff1a SELECT \u3001 EPOLL \uff0c\u5f02\u6b65\u5b9e\u73b0\u6709 async/await \u4e0e io_uring \u3002 SELECT 4' \u00b6 \u8fd9\u91cc\u4f7f\u7528 Unix \u6807\u51c6\u4e2d\u7528\u4e8e IO \u591a\u8def\u590d\u7528\u7684\u7cfb\u7edf\u8c03\u7528 select \u5b9e\u73b0\u4e86\u4e0e\u7b2c\u4e00\u4e2a\u793a\u4f8b\u7a0b\u5e8f\u76f8\u540c\u7684\u529f\u80fd\uff1a #include <stdio.h> #include <string.h> #include <stdlib.h> #include <unistd.h> #include <fcntl.h> #include <sys/socket.h> #include <sys/select.h> #include <sys/time.h> #include <netinet/in.h> struct Pipe { int fd_send; int fd_recv; }; int main(int argc, char **argv) { int port = atoi(argv[1]); int fd; if ((fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) { perror(\"socket\"); return 1; } struct sockaddr_in addr; addr.sin_family = AF_INET; addr.sin_addr.s_addr = INADDR_ANY; addr.sin_port = htons(port); socklen_t addr_len = sizeof(addr); if (bind(fd, (struct sockaddr *)&addr, sizeof(addr))) { perror(\"bind\"); return 1; } if (listen(fd, 2)) { perror(\"listen\"); return 1; } int fd1 = accept(fd, NULL, NULL); int fd2 = accept(fd, NULL, NULL); if (fd1 == -1 || fd2 == -1) { perror(\"accept\"); return 1; } fd_set clients; char buffer[1024] = \"Message:\"; fcntl(fd1, F_SETFL, fcntl(fd1, F_GETFL, 0) | O_NONBLOCK); // \u5c06\u5ba2\u6237\u7aef\u7684\u5957\u63a5\u5b57\u8bbe\u7f6e\u6210\u975e\u963b\u585e fcntl(fd2, F_SETFL, fcntl(fd2, F_GETFL, 0) | O_NONBLOCK); while (1) { FD_ZERO(&clients); FD_SET(fd1, &clients); FD_SET(fd2, &clients); if (select(fd2 + 1, &clients, NULL, NULL, NULL) > 0) { // \u627e\u51fa\u53ef\u4ee5\u8bfb\u7684\u5957\u63a5\u5b57 if (FD_ISSET(fd1, &clients)) { ssize_t len = recv(fd1, buffer + 8, 1000, 0); if (len <= 0) { break; } send(fd2, buffer, len + 8, 0); } if (FD_ISSET(fd2, &clients)) { ssize_t len = recv(fd2, buffer + 8, 1000, 0); if (len <= 0) { break; } send(fd1, buffer, len + 8, 0); } } else { break; } } return 0; } \u5bf9\u4e8e\u4e00\u822c\u7684\u963b\u585e\u7684 socket \uff0c\u8fdb\u884c recv \u64cd\u4f5c\u65f6\u5982\u679c\u7f13\u51b2\u533a\u4e2d\u65e0\u6570\u636e\u53ef\u8bfb\uff0c\u5c06\u4f1a\u963b\u585e\u76f4\u5230\u6709\u6570\u636e\u4e3a\u6b62\uff0c\u8fd9\u6837\u4f7f\u5f97\u5927\u91cf\u65f6\u95f4\u7528\u4e8e\u7b49\u5f85\u6570\u636e\u4e0a\u3002\u800c\u5bf9\u4e8e\u975e\u963b\u585e\u7684 socket \uff0c\u82e5\u65e0\u6570\u636e\u53ef\u8bfb recv \u5c06\u76f4\u63a5\u8fd4\u56de\uff0c\u800c\u4e0d\u4f1a\u963b\u585e\u4f4f\u3002\u518d\u914d\u5408 select \uff0c\u6bcf\u6b21\u627e\u51fa\u53ef\u8bfb\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u5728\u4e00\u4e2a\u7ebf\u7a0b\u4e2d\u540c\u65f6\u5904\u7406\u591a\u4e2a\u8fde\u63a5\u3002 select \u7cfb\u7edf\u8c03\u7528\u8fd8\u53ef\u4ee5\u627e\u51fa\u53ef\u5199\u53ca\u51fa\u9519\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u5e76\u8bbe\u5b9a\u7b49\u5f85\u68c0\u67e5\u5b8c\u6210\u7684\u6700\u957f\u65f6\u95f4\u3002\u4f60\u53ef\u4ee5\u5728\u4e92\u8054\u7f51\u4e0a\u67e5\u627e\u66f4\u591a\u5173\u4e8e select \u7684\u8d44\u6599\u3002 \u9664\u4e86\u6240\u6709 Unix \u7cfb\u7edf\u90fd\u6709\u7684 select \u7cfb\u7edf\u8c03\u7528\uff0cLinux \u7684 epoll \uff0cFreeBSD \u548c macOS \u7684 kqueue \uff0c\u4ee5\u53ca Windows \u7684 IOCP \u4e5f\u80fd\u5b9e\u73b0\u7c7b\u4f3c\u7684\u529f\u80fd\uff0c\u5e76\u4e14\u76f8\u6bd4 select \u90fd\u6709\u5f88\u9ad8\u7684\u6548\u7387\u3002\u8fd9\u51e0\u79cd IO \u590d\u7528 / \u5f02\u6b65 IO \u63a5\u53e3\u6709\u5404\u81ea\u7684\u8bed\u4e49\u4e0e\u7528\u6cd5\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u4efb\u610f\u4e00\u79cd\uff0c\u5e76\u4ee5\u6b64\u4e3a\u57fa\u7840\u5b9e\u73b0\u4e00\u4e2a\u591a\u4eba\u804a\u5929\u5ba4\u3002\u4f60\u53ef\u80fd\u9700\u8981\u5b66\u4e60\u4e00\u4e9b\u975e\u963b\u585e IO \u7f51\u7edc\u7f16\u7a0b\u7684\u57fa\u7840\u77e5\u8bc6\uff0c\u6bd4\u5982 Reactor \u8bbe\u8ba1\u6a21\u5f0f\u3002 \u804a\u5929\u5ba4\u7684\u8981\u6c42\u4e0e\u591a\u7ebf\u7a0b\u7248\u672c\u7684\u76f8\u540c\uff0c\u4f46\u4f60 \u4e0d\u5f97 \u4f7f\u7528\u591a\u7ebf\u7a0b\u6280\u672f\u3002\u9664\u4e86\u6807\u51c6\u5e93\u4e0e\u6240\u4f7f\u7528\u7cfb\u7edf\u7684\u5e93\u5916\uff0c\u8bf7\u52ff\u4f7f\u7528\u4efb\u4f55\u7b2c\u4e09\u65b9\u7684\u7f51\u7edc\u5e93\u6216\u4e8b\u4ef6\u5904\u7406\u5e93\u3002 EPOLL* 1' \u00b6 \u5982\u679c\u4f60\u5b9e\u73b0\u4e86 EPOLL \u7684\u7248\u672c\uff0c\u53ef\u4ee5\u5728\u62ff\u5230\u9644\u52a0\u5206\u7684\u540c\u65f6\u4e00\u5e76\u62ff\u5230 SELECT \u7684 4 \u5206 \u548c SELECT \u76f8\u6bd4\uff0c EPOLL \u7684\u6548\u7387\u8981\u66f4\u9ad8\uff0c\u5e76\u4e14\u8fd8\u6709\u5f88\u591a\u65b9\u4fbf\u7684\u529f\u80fd\uff0c\u662f\u66f4\u4e3a\u73b0\u4ee3\u7684\u5b9e\u73b0\uff08\u4e0d\u8fc7\u4ec5\u9650\u4e8e Linux\uff09\u3002\u8bf7\u901a\u8fc7 EPOLL \u5b9e\u73b0\u4e0a\u8ff0\u529f\u80fd\u3002\u76f8\u5173\u6587\u6863\u53ef\u4ee5\u53c2\u8003\u4e92\u8054\u7f51\u3002 async/await* 1' \u00b6 \u7531\u4e8e C \u662f\u4e00\u79cd\u6bd4\u8f83\u53e4\u8001\u7684\u8bed\u8a00\uff0c\u800c C++ \u7684 coroutine \u652f\u6301\u5728 C++20 \u624d\u52a0\u5165\u4e14\u4e0d\u591f\u5b8c\u5168\uff0c\u6211\u4eec\u5efa\u8bae\u5728\u5b9e\u73b0\u6b64\u90e8\u5206\u5185\u5bb9\u65f6\u4f7f\u7528 Rust \u5b8c\u6210\uff0c\u4f46\u5982\u679c\u4f60\u613f\u610f\u6311\u6218 C/C++ \u4e0b\u7684\u534f\u7a0b\u7f16\u7a0b\u4e5f\u662f\u53ef\u884c\u7684\u3002 \u4ec5\u5728\u6b64\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u5141\u8bb8\u4f7f\u7528\u70ed\u95e8\u7684 Rust \u5f02\u6b65\u7f16\u7a0b\u5e93\uff0c\u4f8b\u5982 tokio \u548c async-std \u3002 \u5982\u679c\u4f60\u60f3\u4f7f\u7528\u5176\u4ed6\u7684\u5f02\u6b65\u5e93\u4ea6\u53ef\u63d0\u524d\u8be2\u95ee\u6211\u4eec\u3002 \u5173\u4e8e\u534f\u7a0b\u662f\u4ec0\u4e48\u53ef\u4ee5\u53c2\u89c1\u8fd9\u7bc7\u6587\u7ae0\uff1ahttps://www.baeldung.com/java-threading-models \u3002 async/await \u7684\u5177\u4f53\u4f7f\u7528\u65b9\u6cd5\u53ef\u4ee5\u53c2\u89c1 tokio \u7684\u6587\u6863 https://docs.rs/tokio/1.6.1/tokio/ \u3002 async/await \u53ef\u4ee5\u5982\u4e0b\u7406\u89e3\uff1a async fn f() \u5c06\u4e00\u4e2a\u51fd\u6570\u58f0\u660e\u4e3a\u4e86\u4e00\u4e2a\u7279\u6b8a\u7684\u51fd\u6570\uff0c\u8fdb\u884c f() \u8c03\u7528\u65f6\u4e0d\u4f1a\u6267\u884c\u51fd\u6570\u5185\u5bb9\uff0c\u800c\u662f\u8fd4\u56de\u4e00\u4e2a coroutine \u5bf9\u8c61\uff0c\u4f8b\u5982\u53ef\u4ee5 let a = f() \uff1b\u5bf9\u8fd9\u4e2a\u5bf9\u8c61\u6267\u884c a.await \u4f1a\u5728\u8fd0\u884c\u5230\u6b64\u5904\u65f6\u5b9e\u9645\u8fd0\u884c\u51fd\u6570\u5185\u5bb9\uff0c\u4f46\u540c\u65f6\u4f1a\u5b9a\u4e49\u4e00\u4e2a breakpoint\uff0c\u7ebf\u7a0b\u5230\u8fbe\u8fd9\u91cc\u65f6\uff0c\u53ef\u4ee5\u7ee7\u7eed\u6267\u884c a.await \u7684\u51fd\u6570\u5185\u5bb9\uff0c\u4e5f\u53ef\u4ee5\u53bb\u6267\u884c\u5176\u4ed6\u7684 .await \u70b9\u4f4d\u3002\u6bd4\u55bb\u6027\u7684\u8bf4\uff0c\u534f\u7a0b\u662f\u4ee3\u7801\u63a7\u5236\uff08\u800c\u4e0d\u662f OS \u8c03\u5ea6\u63a7\u5236\uff09\u7684\u7ebf\u7a0b\uff0c\u4ee3\u7801\u53ef\u4ee5\u5b9e\u9645\u89c4\u5b9a\u4e00\u90e8\u5206\u534f\u7a0b\u7684\u8fd0\u884c\u987a\u5e8f\u3002\u56e0\u6b64\uff0c\u534f\u7a0b\u53ef\u4ee5\u4e0e\u7ebf\u7a0b \u4e0d \u4e00\u4e00\u5bf9\u5e94\uff0c\u8fd9\u4e9b\u534f\u7a0b\u5e94\u8be5\u7531\u591a\u5c11\u7ebf\u7a0b\u6267\u884c\u3001\u5e94\u8be5\u5148\u6267\u884c\u54ea\u4e9b\u534f\u7a0b\u662f\u7531\u6700\u5916\u5c42\u7684 runner\uff0c\u6216\u8005\u8bf4 runtime \u51b3\u5b9a\u7684\u3002 \u4e00\u4e2a\u7b80\u5355\u7684 Rust async/await \u534f\u7a0b\u4f8b\u5b50\u53ef\u4ee5\u53c2\u8003 https://github.com/myl7/dnsl \uff0c\u8fd9\u662f\u4e00\u4e2a\u57fa\u4e8e async/await \u5b9e\u73b0\u7684 DNS \u4e2d\u7ee7\u5668\u3002 \u5728\u8db3\u591f\u73b0\u4ee3\u7684\u7f16\u7a0b\u8bed\u8a00\u51e0\u4e4e\u90fd\u6709 async/await \u7684\u5b9e\u73b0\uff0c\u5305\u62ec\uff1a Python\uff0c\u4ece 3.5 \u5f00\u59cb\u6b63\u5f0f\u53eb async/await Javascript\uff0cPromise\uff0c\u4ece ECMAScript 2017 \u5f00\u59cb\u6807\u51c6\u5316 Rust\uff0cFuture trait\uff0c\u4ece 1.39.0 \u5f00\u59cb Kotlin\uff0cstructured coroutine\uff0c\u4e3b\u6253\u70b9\u4e4b\u4e00/\u5bf9\u6bd4 Java \u7684\u4f18\u52bf\u4e4b\u4e00 \u5728\u672c\u90e8\u5206\u4e2d\uff0c\u4f60\u9700\u8981\u5c06\u81ea\u5df1\u5b9e\u73b0\u7684\u5ba2\u6237\u7aef\u6539\u5199\u4e3a\u7528 async/await \u5b9e\u73b0\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u53ea\u8981\u4f60\u7684\u51e0\u4e2a\u5de5\u4f5c\u51fd\u6570\u662f async fn \u5373\u53ef\u3002 \u5982\u679c\u4f60\u4e0d\u786e\u5b9a\u81ea\u5df1\u7684\u5b9e\u73b0\u662f\u5426\u201c\u8db3\u591f async/await\u201d\uff0c\u8bf7\u79ef\u6781\u8be2\u95ee\u52a9\u6559\u4eec\u3002 io_uring* 2' \u00b6 io_uring \u662f\u6700\u8fd1\u624d\u88ab\u5f15\u5165\u5185\u6838\u7684\u9ad8\u6548\u5f02\u6b65\u5b9e\u73b0\u3002\u548c\u4e0a\u9762\u7684\u51e0\u79cd\u65b9\u6cd5\u76f8\u6bd4\u4f7f\u7528 io_uring \u80fd\u591f\u5e26\u6765\u663e\u8457\u7684\u6027\u80fd\u63d0\u5347\u3002\u4e0d\u8fc7\u7531\u4e8e\u672c\u8eab\u662f\u8f83\u65b0\u7684\u6982\u5ff5\uff0c\u52a9\u6559\u4e5f\u6ca1\u6709\u5b8c\u6210\u793a\u4f8b\u4ee3\u7801\u3002\u4e00\u4e9b\u4f9b\u53c2\u8003\u7684\u8d44\u6599\uff1a \u4e00\u7bc7\u6587\u7ae0\u5e26\u4f60\u8bfb\u61c2 io_uring \u7684\u63a5\u53e3\u4e0e\u5b9e\u73b0 epoll \u4e0e io_uring \u670d\u52a1\u5668\u7f16\u7a0b\u5b9e\u8df5\u53ca\u5bf9\u6bd4 \u4ee5\u53ca liburing \u5e93\uff0c\u5b83\u5c01\u88c5\u4e86 io_uring \u7684 syscall\uff0c\u4f60\u5f88\u53ef\u80fd\u4f1a\u7528\u5230\u3002\u4e00\u4e9b\u57fa\u4e8e\u5b83\u5b9e\u73b0\u7684\u4f8b\u5b50\uff1a io_uring bare minimum echo server \u3001 liburing Examples \u3002 \u5982\u679c\u4f60\u5b9e\u73b0\u4e86\u8fd9\u4e00\u90e8\u5206\uff0c\u9664\u4e86\u5206\u6570\u4f60\u8fd8\u53ef\u4ee5\u8d62\u5f97\u52a9\u6559\u7684\u638c\u58f0\u3002 \u5b9e\u9a8c\u8981\u6c42\u4e0e\u622a\u6b62\u65e5\u671f \u00b6 \u8bf7\u6309\u7167\u4ee5\u4e0b\u76ee\u5f55\u7ed3\u6784\u7ec4\u7ec7\u4f60\u7684 GitHub \u4ed3\u5e93\uff1a (Git) // Git \u4ed3\u5e93\u76ee\u5f55 \u251c\u2500\u2500 lab3 // \u5b9e\u9a8c\u4e09\u6839\u76ee\u5f55 \u2502 \u251c\u2500\u2500 1.c // \u5b8c\u5584\u540e\u7684\u53cc\u4eba\u804a\u5929\u5ba4\u7684\u6e90\u4ee3\u7801 \u2502 \u251c\u2500\u2500 2.c // \u57fa\u4e8e\u591a\u7ebf\u7a0b\u7684\u591a\u4eba\u804a\u5929\u5ba4\u7684\u6e90\u4ee3\u7801 \u2502 \u251c\u2500\u2500 3.c // \u57fa\u4e8e IO \u590d\u7528\u7684\u591a\u4eba\u804a\u5929\u5ba4\u7684\u6e90\u4ee3\u7801 \u2502 \u251c\u2500\u2500 4.c // \u57fa\u4e8e\u534f\u7a0b\u7684\u591a\u4eba\u804a\u5929\u5ba4\u7684\u6e90\u4ee3\u7801 \u2502 \u251c\u2500\u2500 5.c // \u57fa\u4e8e io_uring \u7684\u591a\u4eba\u804a\u5929\u5ba4\u7684\u6e90\u4ee3\u7801 \u2502 \u251c\u2500\u2500 Makefile // \uff08\u53ef\u9009\uff09\u4f60\u63d0\u4f9b\u7684 Makefile \u2502 \u2514\u2500\u2500 README.md // \u5b9e\u9a8c\u62a5\u544a \u251c\u2500\u2500 .gitignore \u2514\u2500\u2500 README.md \u5982\u679c\u4f60\u7684\u76ee\u5f55\u7ed3\u6784\u4e0e\u4e0a\u8ff0\u4e0d\u540c\uff0c\u5728 README \u4e2d\u8bf4\u660e\u5373\u53ef\u3002 \u672c\u6b21\u5b9e\u9a8c\u6ee1\u5206\u4e3a 14 \u5206\uff0c\u53ef\u83b7\u5f97\u7684\u5206\u6570\u4e3a 18 \u5206\uff0c\u6bcf\u4e2a\u5b9e\u73b0\u7684\u5206\u6570\u90fd\u5df2\u7ecf\u6807\u5728\u4e86\u6807\u9898\u540e\uff0c\u5176\u4e2d\u4e00\u90e8\u5206\u7684\u8fdb\u9636\u5b9e\u73b0\u5305\u542b\u4e86\u5bf9\u5e94\u7684\u666e\u901a\u5b9e\u73b0\u7684\u5206\u6570\uff08\u5728\u6587\u6863\u4e2d\u5df2\u53e6\u884c\u6807\u6ce8\uff09\u3002\u52a9\u6559\u5728\u8ba4\u4e3a\u6bd4\u8f83\u6709\u96be\u5ea6\u7684\u5b9e\u73b0\u540e\u52a0\u6ce8\u4e86*\u6807\u3002\u4f60\u53ea\u9700\u8981\u4ece\u4ee5\u4e0a\u9879\u76ee\u4e2d\u4efb\u9009\u51e0\u9879\u5b8c\u6210\uff0c\u8d85\u8fc7 14 \u5206\u7684\u90e8\u5206\u53ef\u4ee5\u586b\u8865\u672c\u5b9e\u9a8c\u5176\u4ed6\u9879\u76ee\u7684\u6263\u5206\uff0c\u4f60\u53ef\u4ee5\u591a\u62ff\u4e00\u4e9b\u5206\u6570\u6765\u8ba9\u7ed3\u679c\u66f4\u7a33\u4e00\u70b9\uff0c\u4f46\u603b\u5206\u4e0d\u4f1a\u8d85\u8fc7 14\u3002 \u6027\u80fd\u4e0d\u662f\u672c\u5b9e\u9a8c\u5173\u6ce8\u7684\u91cd\u70b9\uff0c\u53ea\u9700\u8981\u6b63\u786e\u5b9e\u73b0\u529f\u80fd\u5373\u53ef\u3002\u4e0e\u5b9e\u9a8c\u4e8c\u76f8\u4f3c\uff0c\u672c\u5b9e\u9a8c\u4e0d\u8981\u6c42\u5b9e\u9a8c\u62a5\u544a\uff0c\u4f46\u662f\u63a8\u8350\u7b80\u5355\u63cf\u8ff0\u4f60\u7684\u5b9e\u73b0\uff0c\u4ee5\u4f7f\u52a9\u6559\u80fd\u66f4\u597d\u5730\u7406\u89e3\u4f60\u7684\u4ee3\u7801\uff0c\u4ee5\u514d\u9020\u6210\u8bef\u89e3\u3002 \u672c\u5b9e\u9a8c\u622a\u6b62\u65e5\u671f\u4e3a 6 \u6708 2 \u65e5\u665a 23:59 \u5176\u4ed6\u8bf4\u660e \u00b6 \u672c\u5b9e\u9a8c\u53ef\u4ee5\u4f7f\u7528 C/C++/Rust \u8bed\u8a00\u5b8c\u6210\uff0c\u5982\u679c\u9700\u8981\u4f7f\u7528\u5176\u4ed6\u8bed\u8a00\u8bf7\u5148\u8be2\u95ee\u52a9\u6559\u3002 \u672c\u5b9e\u9a8c\u53ef\u4ee5\u4f7f\u7528 C/C++ \u7684\u6807\u51c6\u5e93\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u64cd\u4f5c\u7cfb\u7edf\u7684\u5e93\uff08\u5982 POSIX \u6807\u51c6\u5e93\u6216 Windows API\uff09\uff0c\u4f46\u9664\u4e86 await/async \u90e8\u5206\u5916\u5176\u4ed6\u90e8\u5206\u4e0d\u5f97\u4f7f\u7528\u4efb\u4f55\u7b2c\u4e09\u65b9\u7684\u7f51\u7edc\u5e93\u6216\u4e8b\u4ef6\u5904\u7406\u5e93\u3002\u4f7f\u7528\u6b64\u5904\u6ca1\u6709\u5217\u51fa\u7684\u5e93\u524d\u8bf7\u8be2\u95ee\u52a9\u6559\u3002","title":"\u5b9e\u9a8c\u4e09"},{"location":"lab3/#lab3","text":"\u5728\u672c\u6b21\u5b9e\u9a8c\u4e2d\uff0c\u6211\u4eec\u5c06\u5b66\u4e60\u7b80\u5355\u7684 socket \u7f16\u7a0b\uff0c\u5206\u522b\u5229\u7528\u591a\u7ebf\u7a0b\u6280\u672f\u3001IO \u590d\u7528\u6280\u672f\u3001\u6216\u662f async/await \u534f\u7a0b\u7f16\u5199\u4e00\u4e2a\u7b80\u5355\u7684\u591a\u4eba\u804a\u5929\u5ba4\u7a0b\u5e8f\u3002 \u9996\u5148\u7ed9\u51fa\u4e00\u4e2a\u7b80\u5355\u7684\u53cc\u4eba\u804a\u5929\u5ba4\u793a\u4f8b\u7a0b\u5e8f\uff1a #include <stdio.h> #include <string.h> #include <stdlib.h> #include <unistd.h> #include <sys/socket.h> #include <netinet/in.h> #include <pthread.h> struct Pipe { int fd_send ; int fd_recv ; }; void * handle_chat ( void * data ) { struct Pipe * pipe = ( struct Pipe * ) data ; char buffer [ 1024 ] = \"Message: \" ; ssize_t len ; while (( len = recv ( pipe -> fd_send , buffer + 9 , 1000 , 0 )) > 0 ) { send ( pipe -> fd_recv , buffer , len + 9 , 0 ); } return NULL ; } int main ( int argc , char ** argv ) { int port = atoi ( argv [ 1 ]); int fd ; if (( fd = socket ( AF_INET , SOCK_STREAM , 0 )) == 0 ) { perror ( \"socket\" ); return 1 ; } struct sockaddr_in addr ; addr . sin_family = AF_INET ; addr . sin_addr . s_addr = INADDR_ANY ; addr . sin_port = htons ( port ); socklen_t addr_len = sizeof ( addr ); if ( bind ( fd , ( struct sockaddr * ) & addr , sizeof ( addr ))) { perror ( \"bind\" ); return 1 ; } if ( listen ( fd , 2 )) { perror ( \"listen\" ); return 1 ; } int fd1 = accept ( fd , NULL , NULL ); int fd2 = accept ( fd , NULL , NULL ); if ( fd1 == -1 || fd2 == -1 ) { perror ( \"accept\" ); return 1 ; } pthread_t thread1 , thread2 ; struct Pipe pipe1 ; struct Pipe pipe2 ; pipe1 . fd_send = fd1 ; pipe1 . fd_recv = fd2 ; pipe2 . fd_send = fd2 ; pipe2 . fd_recv = fd1 ; pthread_create ( & thread1 , NULL , handle_chat , ( void * ) & pipe1 ); pthread_create ( & thread2 , NULL , handle_chat , ( void * ) & pipe2 ); pthread_join ( thread1 , NULL ); pthread_join ( thread2 , NULL ); return 0 ; } \u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u7f16\u8bd1\u5e76\u8fd0\u884c\uff1a gcc 1 .c -o 1 -lpthread ./1 6666 \u63a5\u7740\u4e24\u4e2a\u7ec8\u7aef\u4e2d\u5206\u522b\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u8fde\u63a5\uff1a nc 127 .0.0.1 6666 \u5176\u4e2d nc \u662f netcat \u5305\u5185\u7684\u4e00\u4e2a\u7a0b\u5e8f \u8fd9\u6837\u4ece\u4e00\u4e2a\u7ec8\u7aef\u8f93\u5165\u7684\u6d88\u606f\uff0c\u4f1a\u8f6c\u53d1\u5230\u53e6\u4e00\u4e2a\u7ec8\u7aef\uff0c\u4e8e\u662f\u4fbf\u5b9e\u73b0\u4e86\u4e24\u4e2a\u5ba2\u6237\u7aef\u95f4\u7684\u804a\u5929\u3002\u8fd9\u4e2a\u804a\u5929\u5ba4\u7a0b\u5e8f\u5341\u5206\u7b80\u964b\uff0c\u5ffd\u7565\u4e86 socket \u7f16\u7a0b\u4e2d\u7684\u5f88\u591a\u7ec6\u8282\uff0c\u4f60\u7684\u4efb\u52a1\u5c31\u662f\u4fee\u6539\u5b83\uff08\u6216\u8005\u4ece\u5934\u7f16\u5199\uff09\uff0c\u4f7f\u5f97\u5b83\u66f4\u5065\u58ee\uff0c\u5e76\u4e14\u652f\u6301\u591a\u4eba\u804a\u5929\u3002","title":"Lab3"},{"location":"lab3/#\u53cc\u4eba\u804a\u5929\u5ba4-22","text":"","title":"\u53cc\u4eba\u804a\u5929\u5ba4 2'+2'"},{"location":"lab3/#\u5b9e\u73b0\u4ee5\u6362\u884c\u4e3a\u5206\u9694\u7b26\u7684\u6d88\u606f\u5206\u5272-2","text":"TCP \u662f\u4e00\u4e2a\u57fa\u4e8e\u6d41\u7684\u534f\u8bae\uff0c\u672c\u8eab\u6ca1\u6709\u201c\u6d88\u606f\u201d\u7684\u6982\u5ff5\u3002\u5728\u6574\u4e2a\u8fde\u63a5\u4e2d\uff0c\u5ba2\u6237\u7aef\u53d1\u9001\u7684\u6570\u636e\u53ea\u662f\u4e00\u8fde\u4e32\u7684\u5b57\u8282\uff0c\u670d\u52a1\u7aef\u5e76\u4e0d\u77e5\u9053\u5e94\u600e\u6837\u5206\u5272\u8fd9\u4e9b\u6570\u636e\u3002\u793a\u4f8b\u7a0b\u5e8f\u5c06\u4e00\u6b21 recv \u5f97\u5230\u7684\u6570\u636e\u89c6\u4e3a\u4e00\u4e2a\u6d88\u606f\uff0c\u662f\u4e0d\u5408\u9002\u7684\uff08\u4e00\u6b21 send \u5e76\u4e0d\u4e00\u5b9a\u5bf9\u5e94\u5bf9\u65b9\u7684\u4e00\u6b21 recv \uff09\u3002\u8bf7\u91cd\u65b0\u5b9e\u73b0\u63a5\u6536\u6570\u636e\u7684\u90e8\u5206\uff0c\u4ee5\u6362\u884c\u7b26 \\n \u4e3a\u5206\u9694\u7b26\u63a5\u6536\u548c\u5206\u5272\u6570\u636e\uff0c\u5e76\u4ee5\u4e00\u6761\u6d88\u606f\u4e3a\u5355\u4f4d\u53d1\u9001\u7ed9\u53e6\u4e00\u4e2a\u5ba2\u6237\u7aef\u3002\u5728\u52a9\u6559\u7684\u6d4b\u8bd5\u4e2d\u6d88\u606f\u7684\u957f\u5ea6\u4e0d\u8d85\u8fc7 1 MiB\uff081,048,576 \u5b57\u8282\uff09\u3002 \u4f8b\u5982\uff0c\u4f60\u5411\u670d\u52a1\u5668\u53d1\u9001\u4e86 Hi.\\nIt's Cindy here. \uff0c\u5728\u5176\u4ed6\u8fde\u63a5\u5230\u670d\u52a1\u5668\u7684 nc \u53cc\u4eba\u804a\u5929\u5ba4\u5ba2\u6237\u7aef\u4e2d\u4f1a\u6536\u5230\u8fd9\u6837\u7684\u6d88\u606f\uff1a Message: Hi. Message: It's Cindy here. \u800c\u4e0d\u662f\u6536\u5230\u4e00\u4e2a\u5e26\u6709\u6362\u884c\u7b26\u7684\u6d88\u606f\uff1a Message: Hi. It's Cindy here. \u4f60\u53ef\u80fd\u5df2\u7ecf\u53d1\u73b0\u5728 nc \u4e2d\u6bcf\u6b21\u6309\u4e0b\u56de\u8f66\u90fd\u4f1a\u5bfc\u81f4\u6d88\u606f\u53d1\u9001\uff0c\u8981\u5982\u4f55\u53d1\u9001\u5e26\u6709\u6362\u884c\u7b26\u7684\u6d88\u606f\u5462\uff1f\u8fd9\u91cc\u53ef\u4ee5\u4f7f\u7528 lab2 \u4e2d\u63d0\u5230\u7684\u7ba1\u9053\u548c\u6587\u4ef6\u91cd\u5b9a\u5411\uff1a echo -e \"Hi.\\nIt's Cindy here\" | nc 127 .0.0.1 6666 \u4e5f\u53ef\u4ee5\u5c06\u4f60\u8981\u53d1\u9001\u7684\u5185\u5bb9\u5199\u5230\u6587\u4ef6\u91cc\uff0c\u7136\u540e\u901a\u8fc7 > \u91cd\u5b9a\u5411\u8f93\u5165\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4f60\u53ef\u4ee5\u5bf9\u6bcf\u4e2a\u6536\u5230\u7684\u5b57\u7b26\u8fdb\u884c\u5339\u914d\uff0c\u4f46\u662f\u6bcf\u6b21\u8c03\u7528 recv \u53ea\u63a5\u6536\u4e00\u4e2a\u5b57\u7b26\u662f\u975e\u5e38\u4f4e\u6548\u7684\uff08\u5e26\u6765\u4e86\u4e0d\u5fc5\u8981\u7684 syscall \u5f00\u9500\uff09\u3002\u4f60\u7684\u5b9e\u73b0\u5e94\u5f53\u80fd\u591f\u4e00\u6b21\u63a5\u6536\u5927\u91cf\u6570\u636e\uff0c\u5e76\u80fd\u591f\u4ee5 \\n \u5bf9\u6d88\u606f\u8fdb\u884c\u5206\u5272\u3002\u5982\u679c\u4f60\u4e0d\u77e5\u9053\u5982\u4f55\u5b9e\u73b0\uff0c\u6700\u7ec8\u8fd8\u662f\u6bcf\u6b21\u53ea\u63a5\u6536\u4e00\u4e2a\u5b57\u7b26\uff0c\u4f60\u53ea\u80fd\u5f97\u5230\u4e00\u534a\u7684\u5206\u6570\uff081'\uff09\u3002","title":"\u5b9e\u73b0\u4ee5\u6362\u884c\u4e3a\u5206\u9694\u7b26\u7684\u6d88\u606f\u5206\u5272 2'"},{"location":"lab3/#\u5904\u7406-send-\u65e0\u6cd5\u4e00\u6b21\u53d1\u9001\u6240\u6709\u6570\u636e\u7684\u60c5\u51b5-2","text":"\u5f53\u53d1\u9001\u7684\u6570\u636e\u957f\u5ea6\u8db3\u591f\u5927\u65f6\uff0c\u53ef\u80fd\u65e0\u6cd5\u4e00\u6b21\u5c06\u6240\u6709\u6570\u636e\u53d1\u9001\u5b8c\u6bd5\u3002\u6b64\u65f6 recv \u4e0e send \u90fd\u53ef\u80fd\u53ea\u6536\u53d1\u4e86\u90e8\u5206\u6570\u636e\uff0c\u8bf7\u5904\u7406\u8fd9\u79cd\u60c5\u51b5\uff0c\u4f7f\u5f97\u957f\u5ea6\u8f83\u5927\u7684\u6570\u636e\u80fd\u88ab\u5b8c\u6574\u5730\u53d1\u9001\u5230\u5ba2\u6237\u7aef\u3002\u591a\u6b21\u53d1\u9001\u4ea7\u751f\u7684\u989d\u5916 Message: \u4fe1\u606f\u53ef\u4ee5\u4e0d\u5904\u7406\u3002 \u63d0\u793a \u53ef\u4ee5\u67e5\u9605 send \u4e0e recv \u7684\u6587\u6863\uff0c\u4e86\u89e3\u8fd4\u56de\u503c\u7684\u542b\u4e49\u3002 \u6d4b\u8bd5\u65f6\u53ef\u4ee5\u901a\u8fc7 I/O \u91cd\u5b9a\u5411\u6765\u5411\u804a\u5929\u5ba4\u4e00\u65b9\u8f93\u5165\u4e00\u4e2a\u5927\u6587\u4ef6\uff08>1MB\uff09\uff0c\u82e5\u6210\u529f\u63a5\u6536\u5219\u53e6\u4e00\u65b9\u5f97\u5230\u7684\u6587\u4ef6\u5e94\u8be5\u662f\u76f8\u540c\u7684\u3002","title":"\u5904\u7406 send \u65e0\u6cd5\u4e00\u6b21\u53d1\u9001\u6240\u6709\u6570\u636e\u7684\u60c5\u51b5 2'"},{"location":"lab3/#\u57fa\u4e8e\u591a\u7ebf\u7a0b\u7684\u591a\u4eba\u804a\u5929\u5ba4-42","text":"","title":"\u57fa\u4e8e\u591a\u7ebf\u7a0b\u7684\u591a\u4eba\u804a\u5929\u5ba4 4'+2'"},{"location":"lab3/#\u7b80\u5355\u7684\u591a\u7ebf\u7a0b\u804a\u5929\u5ba4-4","text":"\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u5b9e\u73b0\u4e00\u4e2a\u652f\u6301\u591a\u4eba\u5728\u7ebf\u7684\u804a\u5929\u5ba4\uff0c\u5177\u4f53\u8981\u6c42\u5982\u4e0b\uff1a \u6700\u591a\u652f\u6301 32 \u4e2a\u7528\u6237\u540c\u65f6\u5728\u7ebf\uff0c\u7528\u6237\u53ef\u4ee5\u968f\u65f6\u52a0\u5165\u4e0e\u9000\u51fa \u7a0b\u5e8f\u5c06\u7528\u6237\u53d1\u51fa\u7684\u6570\u636e\u4ee5\u6362\u884c\u7b26\u5206\u5272\u4e3a\u6d88\u606f\uff0c\u5e76\u5c06\u6d88\u606f\u5b8c\u6574\u5730\u53d1\u9001\u7ed9\u5176\u4ed6\u7528\u6237 \u4f60\u9700\u8981\u4f7f\u7528\u963b\u585e IO \u4e0e\u591a\u7ebf\u7a0b\u6280\u672f\u6765\u5b9e\u73b0\u4e0a\u8ff0\u9700\u6c42\u3002\u53ef\u4ee5\u4f7f\u7528\u7684\u7ebf\u7a0b\u5e93\u6709 pthread, Windows API \u6216 std::thread \u3002\u9664\u4e86\u6807\u51c6\u5e93\u4e0e\u4e0a\u8ff0\u5e93\uff0c\u8bf7\u52ff\u4f7f\u7528\u5176\u4ed6\u5e93\u3002\u5728\u6d4b\u8bd5\u4e2d\u6d88\u606f\u7684\u957f\u5ea6\u4e0d\u8d85\u8fc7 1 MiB\u3002 \u8bf7\u6ce8\u610f\uff0csocket \u662f \u5168\u53cc\u5de5 \u7684\uff0c\u5373\u53ef\u4ee5\u7531\u4e24\u4e2a\u7ebf\u7a0b\u540c\u65f6\u5206\u522b\u8bfb\u53d6\u4e0e\u5199\u5165\u3002\u4f46\u5e76\u53d1\u5730\u8bfb\u53d6\u6216\u5e76\u53d1\u5730\u5199\u5165\u53ef\u80fd\u4f1a\u9020\u6210\u610f\u60f3\u4e0d\u5230\u7684\u540e\u679c\u3002\u8bf7\u5229\u7528\u64cd\u4f5c\u7cfb\u7edf\u8bfe\u7a0b\u4e2d\u7ebf\u7a0b\u540c\u6b65\u7684\u76f8\u5173\u77e5\u8bc6\u5b9e\u73b0\u5bf9 socket \u7684\u5b89\u5168\u64cd\u4f5c\u3002 pthread \u5982\u679c\u4f60\u5728\u7c7b Unix \u7cfb\u7edf\u4e0b\u7f16\u7a0b\uff0c\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528 pthread \u7ebf\u7a0b\u5e93\uff0c\u8fd9\u91cc\u5c06\u5bf9\u5176\u57fa\u672c\u7528\u6cd5\u505a\u51fa\u4ecb\u7ecd\u3002 int pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine) (void *), void *arg); int pthread_join(pthread_t thread, void **retval); int pthread_detach(pthread_t thread); pthread_create \u51fd\u6570\u7528\u4e8e\u521b\u5efa\u5e76\u542f\u52a8\u4e00\u4e2a\u65b0\u7684\u8fdb\u7a0b\u3002\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u6307\u5411\u6211\u4eec\u8981\u521b\u5efa\u7684\u7ebf\u7a0b\u5bf9\u8c61\u7684\u6307\u9488\uff1b\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a\u521b\u5efa\u65f6\u7684\u5c5e\u6027\uff0c\u76ee\u524d\u53ef\u4ee5\u5ffd\u7565\uff1b\u7b2c\u4e09\u4e2a\u53c2\u6570\u4e3a\u7ebf\u7a0b\u542f\u52a8\u540e\u5c06\u8981\u6267\u884c\u7684\u51fd\u6570\u6307\u9488\uff1b\u7b2c\u56db\u4e2a\u53c2\u6570\u4e3a\u4f20\u5165\u7ebf\u7a0b\u6267\u884c\u51fd\u6570\u7684\u6570\u636e\u3002 pthread_join \u7528\u4e8e\u7b49\u5f85\u7ebf\u7a0b\u7684\u7ed3\u675f\uff0c\u5e76\u63a5\u6536\u8fd4\u56de\u503c\u3002\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u7ebf\u7a0b\u5bf9\u8c61\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a\u63a5\u6536\u8fd4\u56de\u503c\u7684\u53d8\u91cf\u7684\u6307\u9488\uff0c\u5982\u679c\u4e3a NULL \u8868\u793a\u5ffd\u7565\u8fd4\u56de\u503c\u3002 pthread_detach \u53ef\u4ee5\u5c06\u7ebf\u7a0b\u4e0e\u4e3b\u7ebf\u7a0b\u5206\u79bb\uff0c\u4f7f\u8be5\u7ebf\u7a0b\u8fd0\u884c\u7ed3\u675f\u540e\u5f97\u4ee5\u7ec8\u6b62\u81ea\u5df1\u5e76\u91ca\u653e\u8d44\u6e90\u3002\u5206\u79bb\u540e\u7684\u7ebf\u7a0b\u5c06\u4e0d\u80fd\u88ab pthread_join \u7b49\u5f85\u3002 \u53e6\u5916 pthread \u7ebf\u7a0b\u5e93\u8fd8\u5305\u542b\u5904\u7406\u4e92\u65a5\u9501\u7684\u51fd\u6570\u3002 int pthread_mutex_init(pthread_mutex_t *restrict mutex, const pthread_mutexattr_t *restrict attr); int pthread_mutex_destroy(pthread_mutex_t *mutex); int pthread_mutex_lock(pthread_mutex_t *mutex); int pthread_mutex_unlock(pthread_mutex_t *mutex); \u6b63\u5982\u51fd\u6570\u540d\u6240\u793a\uff0c\u8fd9\u56db\u4e2a\u51fd\u6570\u5206\u522b\u5bf9\u5e94\u4e86\u4e92\u65a5\u9501\u7684\u521d\u59cb\u5316\u3001\u9500\u6bc1\u3001\u52a0\u9501\u548c\u89e3\u9501\u3002\u4f60\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 PTHREAD_MUTEX_INITIALIZER \u5b8f\u6765\u521d\u59cb\u5316\u4e92\u65a5\u9501\u3002 pthread \u4e5f\u5305\u542b\u5904\u7406\u6761\u4ef6\u53d8\u91cf\u7684\u51fd\u6570\uff0c\u53ef\u7528\u4e8e\u963b\u585e\u548c\u540c\u6b65\u7ebf\u7a0b\u3002 int pthread_cond_init(pthread_cond_t *restrict cond, const pthread_condattr_t *restrict attr); int pthread_cond_destroy(pthread_cond_t *cond); int pthread_cond_wait(pthread_cond_t *restrict cond, pthread_mutex_t *restrict mutex); \u4e0b\u9762\u7684\u4ee3\u7801\u5c55\u793a\u4e86\u6761\u4ef6\u53d8\u91cf\u548c\u4e92\u65a5\u9501\u7b80\u5355\u7684\u4f7f\u7528\u65b9\u6cd5\uff1a #include <stdio.h> #include <unistd.h> #include <pthread.h> pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER; pthread_cond_t cv = PTHREAD_COND_INITIALIZER; int ready = 0; int data; void *worker(void *p) { pthread_mutex_lock(&mutex); while (!ready) { pthread_cond_wait(&cv, &mutex); } printf(\"%d\\n\", data); pthread_mutex_unlock(&mutex); return NULL; } int main() { pthread_t thread; pthread_create(&thread, NULL, worker, NULL); pthread_mutex_lock(&mutex); sleep(1); data = 1234; ready = 1; pthread_cond_signal(&cv); pthread_mutex_unlock(&mutex); pthread_join(thread, NULL); return 0; } \u4ee5\u4e0a\u5c31\u662f pthread \u7ebf\u7a0b\u5e93\u6700\u57fa\u672c\u7684\u7528\u6cd5\uff0c\u5982\u9700\u8fdb\u4e00\u6b65\u5b66\u4e60\u66f4\u9ad8\u7ea7\u7684\u7279\u6027\uff0c\u8bf7\u81ea\u884c\u5728\u4e92\u8054\u7f51\u4e0a\u641c\u7d22\u6559\u7a0b\u4e0e\u6587\u6863\u3002 C++ \u7ebf\u7a0b\u5e93 \u5982\u679c\u4f60\u6bd4\u8f83\u719f\u6089 C++ \uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 C++ \u6807\u51c6\u5e93\u4e2d\u7684\u7ebf\u7a0b\u5e93\u3002\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u4e0e\u4e0a\u9762\u7684\u793a\u4f8b\u7a0b\u5e8f\u529f\u80fd\u76f8\u540c\u7684\u4f8b\u5b50\uff1a #include <iostream> #include <thread> #include <mutex> #include <condition_variable> #include <chrono> int main() { int n = 0; int data; bool ready = false; std::mutex mutex; std::condition_variable cv; auto f = [&] { std::unique_lock<std::mutex> lock(mutex); cv.wait(lock, [&]{return ready;}); std::cout << data << std::endl; }; std::thread thread(f); std::this_thread::sleep_for(std::chrono::seconds(1)); { std::lock_guard<std::mutex> lock(mutex); data = 1234; ready = true; cv.notify_one(); } thread.join(); return 0; } \u8bf7\u81ea\u884c\u53c2\u9605 C++ \u624b\u518c\u5b66\u4e60\u7ebf\u7a0b\u5e93\u7684\u7528\u6cd5\u3002","title":"\u7b80\u5355\u7684\u591a\u7ebf\u7a0b\u804a\u5929\u5ba4 4'"},{"location":"lab3/#\u7ec6\u7c92\u5ea6\u9501-2","text":"\u5982\u679c\u4f60\u76f4\u63a5\u5b9e\u73b0\u4e86\u8fd9\u4e00\u90e8\u5206\uff0c\u53ef\u4ee5\u5728\u5f97\u5230\u9644\u52a0\u5206\u7684\u540c\u65f6\u4e00\u5e76\u83b7\u5f97\u524d\u9762\u7684 4 \u5206\u3002 \u5728\u4e0a\u9762\u7684\u5b9e\u73b0\u4e2d\u4f60\u5f88\u53ef\u80fd\u76f4\u63a5\u5bf9 read/write \u64cd\u4f5c\u8fdb\u884c\u4e86\u52a0\u9501\uff0c\u4f46\u5bf9\u963b\u585e\u64cd\u4f5c\u8fdb\u884c\u52a0\u9501\u5bb9\u6613\u5f15\u53d1\u95ee\u9898\uff08\u5982\u56e0\u4e3a\u4e00\u4e2a\u963b\u585e\u64cd\u4f5c\u4e0d\u6210\u529f\u800c\u5bfc\u81f4\u9501\u65e0\u6cd5\u91ca\u653e\uff09\uff0c\u540c\u65f6\u9501\u7684\u5f15\u5165\u672c\u8eab\u4f1a\u5bf9\u6027\u80fd\u9020\u6210\u5f71\u54cd\u3002\u4e3a\u4e86\u5c3d\u53ef\u80fd\u51cf\u5c0f\u9501\u5bf9\u7cfb\u7edf\u6027\u80fd\u5e26\u6765\u7684\u5f71\u54cd\uff0c\u4f60\u5e94\u5f53\u5c3d\u91cf\u51cf\u5c0f\u9501\u7684\u5360\u7528\u65f6\u957f\u3002 \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u7ec6\u7c92\u5ea6\u9501\u4ee5\u89c4\u907f\u4e0a\u8ff0\u60c5\u51b5\u3002 \u63d0\u793a \u5bf9 read/write \u64cd\u4f5c\u52a0\u9501\u662f\u4e3a\u4e86\u907f\u514d\u5bf9\u540c\u4e00\u4e2a fd \u540c\u65f6\u8fdb\u884c\u591a\u4e2a\u8bfb/\u5199\u64cd\u4f5c\u3002\u8bd5\u60f3\u4e00\u79cd\u67b6\u6784\uff0c\u5b83\u80fd\u591f\u4fdd\u8bc1\u5bf9\u540c\u4e00\u4e2a fd \u7684\u591a\u4e2a\u8bfb/\u5199\u64cd\u4f5c\u4e0d\u4f1a\u540c\u65f6\u8fdb\u884c\u3002 \u53ef\u4ee5\u8003\u8651\u7528\u6d88\u606f\u961f\u5217\u4f5c\u4e3a\u901a\u4fe1\u65b9\u5f0f\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u5411\u63a5\u6536\u65b9\u7684 fd \u53d1\u9001\u6d88\u606f\u3002","title":"\u7ec6\u7c92\u5ea6\u9501 2'"},{"location":"lab3/#\u57fa\u4e8e-io-\u590d\u7528\u5f02\u6b65-io-\u7684\u591a\u4eba\u804a\u5929\u5ba4-4112","text":"\u9664\u4e86\u591a\u7ebf\u7a0b\uff0cIO \u590d\u7528\u4e0e\u5f02\u6b65 IO \u6280\u672f\u4e5f\u662f\u5b9e\u73b0\u5e76\u53d1\u670d\u52a1\u5668\u7684\u5e38\u89c1\u65b9\u5f0f\u3002\u5728\u793a\u4f8b\u7a0b\u5e8f\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0 recv \u5927\u90e8\u5206\u65f6\u95f4\u90fd\u5728\u7b49\u5f85\u6570\u636e\u7684\u5230\u6765\uff0c\u5b9e\u9645\u4e0a\u5904\u4e8e\u7a7a\u95f2\u72b6\u6001\u3002\u56e0\u6b64\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u591a\u7ebf\u7a0b\u5b9e\u9645\u4e0a\u662f\u6ca1\u6709\u5fc5\u8981\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u975e\u963b\u585e IO \u4e0e IO \u590d\u7528\u6280\u672f\u5b9e\u73b0\u76f8\u540c\u7684\u529f\u80fd\u3002\u5e38\u89c1\u7684 IO \u590d\u7528\u5b9e\u73b0\u6709\uff1a SELECT \u3001 EPOLL \uff0c\u5f02\u6b65\u5b9e\u73b0\u6709 async/await \u4e0e io_uring \u3002","title":"\u57fa\u4e8e IO \u590d\u7528/\u5f02\u6b65 IO \u7684\u591a\u4eba\u804a\u5929\u5ba4 4'+1'+1'+2'"},{"location":"lab3/#select-4","text":"\u8fd9\u91cc\u4f7f\u7528 Unix \u6807\u51c6\u4e2d\u7528\u4e8e IO \u591a\u8def\u590d\u7528\u7684\u7cfb\u7edf\u8c03\u7528 select \u5b9e\u73b0\u4e86\u4e0e\u7b2c\u4e00\u4e2a\u793a\u4f8b\u7a0b\u5e8f\u76f8\u540c\u7684\u529f\u80fd\uff1a #include <stdio.h> #include <string.h> #include <stdlib.h> #include <unistd.h> #include <fcntl.h> #include <sys/socket.h> #include <sys/select.h> #include <sys/time.h> #include <netinet/in.h> struct Pipe { int fd_send; int fd_recv; }; int main(int argc, char **argv) { int port = atoi(argv[1]); int fd; if ((fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) { perror(\"socket\"); return 1; } struct sockaddr_in addr; addr.sin_family = AF_INET; addr.sin_addr.s_addr = INADDR_ANY; addr.sin_port = htons(port); socklen_t addr_len = sizeof(addr); if (bind(fd, (struct sockaddr *)&addr, sizeof(addr))) { perror(\"bind\"); return 1; } if (listen(fd, 2)) { perror(\"listen\"); return 1; } int fd1 = accept(fd, NULL, NULL); int fd2 = accept(fd, NULL, NULL); if (fd1 == -1 || fd2 == -1) { perror(\"accept\"); return 1; } fd_set clients; char buffer[1024] = \"Message:\"; fcntl(fd1, F_SETFL, fcntl(fd1, F_GETFL, 0) | O_NONBLOCK); // \u5c06\u5ba2\u6237\u7aef\u7684\u5957\u63a5\u5b57\u8bbe\u7f6e\u6210\u975e\u963b\u585e fcntl(fd2, F_SETFL, fcntl(fd2, F_GETFL, 0) | O_NONBLOCK); while (1) { FD_ZERO(&clients); FD_SET(fd1, &clients); FD_SET(fd2, &clients); if (select(fd2 + 1, &clients, NULL, NULL, NULL) > 0) { // \u627e\u51fa\u53ef\u4ee5\u8bfb\u7684\u5957\u63a5\u5b57 if (FD_ISSET(fd1, &clients)) { ssize_t len = recv(fd1, buffer + 8, 1000, 0); if (len <= 0) { break; } send(fd2, buffer, len + 8, 0); } if (FD_ISSET(fd2, &clients)) { ssize_t len = recv(fd2, buffer + 8, 1000, 0); if (len <= 0) { break; } send(fd1, buffer, len + 8, 0); } } else { break; } } return 0; } \u5bf9\u4e8e\u4e00\u822c\u7684\u963b\u585e\u7684 socket \uff0c\u8fdb\u884c recv \u64cd\u4f5c\u65f6\u5982\u679c\u7f13\u51b2\u533a\u4e2d\u65e0\u6570\u636e\u53ef\u8bfb\uff0c\u5c06\u4f1a\u963b\u585e\u76f4\u5230\u6709\u6570\u636e\u4e3a\u6b62\uff0c\u8fd9\u6837\u4f7f\u5f97\u5927\u91cf\u65f6\u95f4\u7528\u4e8e\u7b49\u5f85\u6570\u636e\u4e0a\u3002\u800c\u5bf9\u4e8e\u975e\u963b\u585e\u7684 socket \uff0c\u82e5\u65e0\u6570\u636e\u53ef\u8bfb recv \u5c06\u76f4\u63a5\u8fd4\u56de\uff0c\u800c\u4e0d\u4f1a\u963b\u585e\u4f4f\u3002\u518d\u914d\u5408 select \uff0c\u6bcf\u6b21\u627e\u51fa\u53ef\u8bfb\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u5728\u4e00\u4e2a\u7ebf\u7a0b\u4e2d\u540c\u65f6\u5904\u7406\u591a\u4e2a\u8fde\u63a5\u3002 select \u7cfb\u7edf\u8c03\u7528\u8fd8\u53ef\u4ee5\u627e\u51fa\u53ef\u5199\u53ca\u51fa\u9519\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u5e76\u8bbe\u5b9a\u7b49\u5f85\u68c0\u67e5\u5b8c\u6210\u7684\u6700\u957f\u65f6\u95f4\u3002\u4f60\u53ef\u4ee5\u5728\u4e92\u8054\u7f51\u4e0a\u67e5\u627e\u66f4\u591a\u5173\u4e8e select \u7684\u8d44\u6599\u3002 \u9664\u4e86\u6240\u6709 Unix \u7cfb\u7edf\u90fd\u6709\u7684 select \u7cfb\u7edf\u8c03\u7528\uff0cLinux \u7684 epoll \uff0cFreeBSD \u548c macOS \u7684 kqueue \uff0c\u4ee5\u53ca Windows \u7684 IOCP \u4e5f\u80fd\u5b9e\u73b0\u7c7b\u4f3c\u7684\u529f\u80fd\uff0c\u5e76\u4e14\u76f8\u6bd4 select \u90fd\u6709\u5f88\u9ad8\u7684\u6548\u7387\u3002\u8fd9\u51e0\u79cd IO \u590d\u7528 / \u5f02\u6b65 IO \u63a5\u53e3\u6709\u5404\u81ea\u7684\u8bed\u4e49\u4e0e\u7528\u6cd5\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u4efb\u610f\u4e00\u79cd\uff0c\u5e76\u4ee5\u6b64\u4e3a\u57fa\u7840\u5b9e\u73b0\u4e00\u4e2a\u591a\u4eba\u804a\u5929\u5ba4\u3002\u4f60\u53ef\u80fd\u9700\u8981\u5b66\u4e60\u4e00\u4e9b\u975e\u963b\u585e IO \u7f51\u7edc\u7f16\u7a0b\u7684\u57fa\u7840\u77e5\u8bc6\uff0c\u6bd4\u5982 Reactor \u8bbe\u8ba1\u6a21\u5f0f\u3002 \u804a\u5929\u5ba4\u7684\u8981\u6c42\u4e0e\u591a\u7ebf\u7a0b\u7248\u672c\u7684\u76f8\u540c\uff0c\u4f46\u4f60 \u4e0d\u5f97 \u4f7f\u7528\u591a\u7ebf\u7a0b\u6280\u672f\u3002\u9664\u4e86\u6807\u51c6\u5e93\u4e0e\u6240\u4f7f\u7528\u7cfb\u7edf\u7684\u5e93\u5916\uff0c\u8bf7\u52ff\u4f7f\u7528\u4efb\u4f55\u7b2c\u4e09\u65b9\u7684\u7f51\u7edc\u5e93\u6216\u4e8b\u4ef6\u5904\u7406\u5e93\u3002","title":"SELECT 4'"},{"location":"lab3/#epoll-1","text":"\u5982\u679c\u4f60\u5b9e\u73b0\u4e86 EPOLL \u7684\u7248\u672c\uff0c\u53ef\u4ee5\u5728\u62ff\u5230\u9644\u52a0\u5206\u7684\u540c\u65f6\u4e00\u5e76\u62ff\u5230 SELECT \u7684 4 \u5206 \u548c SELECT \u76f8\u6bd4\uff0c EPOLL \u7684\u6548\u7387\u8981\u66f4\u9ad8\uff0c\u5e76\u4e14\u8fd8\u6709\u5f88\u591a\u65b9\u4fbf\u7684\u529f\u80fd\uff0c\u662f\u66f4\u4e3a\u73b0\u4ee3\u7684\u5b9e\u73b0\uff08\u4e0d\u8fc7\u4ec5\u9650\u4e8e Linux\uff09\u3002\u8bf7\u901a\u8fc7 EPOLL \u5b9e\u73b0\u4e0a\u8ff0\u529f\u80fd\u3002\u76f8\u5173\u6587\u6863\u53ef\u4ee5\u53c2\u8003\u4e92\u8054\u7f51\u3002","title":"EPOLL* 1'"},{"location":"lab3/#asyncawait-1","text":"\u7531\u4e8e C \u662f\u4e00\u79cd\u6bd4\u8f83\u53e4\u8001\u7684\u8bed\u8a00\uff0c\u800c C++ \u7684 coroutine \u652f\u6301\u5728 C++20 \u624d\u52a0\u5165\u4e14\u4e0d\u591f\u5b8c\u5168\uff0c\u6211\u4eec\u5efa\u8bae\u5728\u5b9e\u73b0\u6b64\u90e8\u5206\u5185\u5bb9\u65f6\u4f7f\u7528 Rust \u5b8c\u6210\uff0c\u4f46\u5982\u679c\u4f60\u613f\u610f\u6311\u6218 C/C++ \u4e0b\u7684\u534f\u7a0b\u7f16\u7a0b\u4e5f\u662f\u53ef\u884c\u7684\u3002 \u4ec5\u5728\u6b64\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u5141\u8bb8\u4f7f\u7528\u70ed\u95e8\u7684 Rust \u5f02\u6b65\u7f16\u7a0b\u5e93\uff0c\u4f8b\u5982 tokio \u548c async-std \u3002 \u5982\u679c\u4f60\u60f3\u4f7f\u7528\u5176\u4ed6\u7684\u5f02\u6b65\u5e93\u4ea6\u53ef\u63d0\u524d\u8be2\u95ee\u6211\u4eec\u3002 \u5173\u4e8e\u534f\u7a0b\u662f\u4ec0\u4e48\u53ef\u4ee5\u53c2\u89c1\u8fd9\u7bc7\u6587\u7ae0\uff1ahttps://www.baeldung.com/java-threading-models \u3002 async/await \u7684\u5177\u4f53\u4f7f\u7528\u65b9\u6cd5\u53ef\u4ee5\u53c2\u89c1 tokio \u7684\u6587\u6863 https://docs.rs/tokio/1.6.1/tokio/ \u3002 async/await \u53ef\u4ee5\u5982\u4e0b\u7406\u89e3\uff1a async fn f() \u5c06\u4e00\u4e2a\u51fd\u6570\u58f0\u660e\u4e3a\u4e86\u4e00\u4e2a\u7279\u6b8a\u7684\u51fd\u6570\uff0c\u8fdb\u884c f() \u8c03\u7528\u65f6\u4e0d\u4f1a\u6267\u884c\u51fd\u6570\u5185\u5bb9\uff0c\u800c\u662f\u8fd4\u56de\u4e00\u4e2a coroutine \u5bf9\u8c61\uff0c\u4f8b\u5982\u53ef\u4ee5 let a = f() \uff1b\u5bf9\u8fd9\u4e2a\u5bf9\u8c61\u6267\u884c a.await \u4f1a\u5728\u8fd0\u884c\u5230\u6b64\u5904\u65f6\u5b9e\u9645\u8fd0\u884c\u51fd\u6570\u5185\u5bb9\uff0c\u4f46\u540c\u65f6\u4f1a\u5b9a\u4e49\u4e00\u4e2a breakpoint\uff0c\u7ebf\u7a0b\u5230\u8fbe\u8fd9\u91cc\u65f6\uff0c\u53ef\u4ee5\u7ee7\u7eed\u6267\u884c a.await \u7684\u51fd\u6570\u5185\u5bb9\uff0c\u4e5f\u53ef\u4ee5\u53bb\u6267\u884c\u5176\u4ed6\u7684 .await \u70b9\u4f4d\u3002\u6bd4\u55bb\u6027\u7684\u8bf4\uff0c\u534f\u7a0b\u662f\u4ee3\u7801\u63a7\u5236\uff08\u800c\u4e0d\u662f OS \u8c03\u5ea6\u63a7\u5236\uff09\u7684\u7ebf\u7a0b\uff0c\u4ee3\u7801\u53ef\u4ee5\u5b9e\u9645\u89c4\u5b9a\u4e00\u90e8\u5206\u534f\u7a0b\u7684\u8fd0\u884c\u987a\u5e8f\u3002\u56e0\u6b64\uff0c\u534f\u7a0b\u53ef\u4ee5\u4e0e\u7ebf\u7a0b \u4e0d \u4e00\u4e00\u5bf9\u5e94\uff0c\u8fd9\u4e9b\u534f\u7a0b\u5e94\u8be5\u7531\u591a\u5c11\u7ebf\u7a0b\u6267\u884c\u3001\u5e94\u8be5\u5148\u6267\u884c\u54ea\u4e9b\u534f\u7a0b\u662f\u7531\u6700\u5916\u5c42\u7684 runner\uff0c\u6216\u8005\u8bf4 runtime \u51b3\u5b9a\u7684\u3002 \u4e00\u4e2a\u7b80\u5355\u7684 Rust async/await \u534f\u7a0b\u4f8b\u5b50\u53ef\u4ee5\u53c2\u8003 https://github.com/myl7/dnsl \uff0c\u8fd9\u662f\u4e00\u4e2a\u57fa\u4e8e async/await \u5b9e\u73b0\u7684 DNS \u4e2d\u7ee7\u5668\u3002 \u5728\u8db3\u591f\u73b0\u4ee3\u7684\u7f16\u7a0b\u8bed\u8a00\u51e0\u4e4e\u90fd\u6709 async/await \u7684\u5b9e\u73b0\uff0c\u5305\u62ec\uff1a Python\uff0c\u4ece 3.5 \u5f00\u59cb\u6b63\u5f0f\u53eb async/await Javascript\uff0cPromise\uff0c\u4ece ECMAScript 2017 \u5f00\u59cb\u6807\u51c6\u5316 Rust\uff0cFuture trait\uff0c\u4ece 1.39.0 \u5f00\u59cb Kotlin\uff0cstructured coroutine\uff0c\u4e3b\u6253\u70b9\u4e4b\u4e00/\u5bf9\u6bd4 Java \u7684\u4f18\u52bf\u4e4b\u4e00 \u5728\u672c\u90e8\u5206\u4e2d\uff0c\u4f60\u9700\u8981\u5c06\u81ea\u5df1\u5b9e\u73b0\u7684\u5ba2\u6237\u7aef\u6539\u5199\u4e3a\u7528 async/await \u5b9e\u73b0\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u53ea\u8981\u4f60\u7684\u51e0\u4e2a\u5de5\u4f5c\u51fd\u6570\u662f async fn \u5373\u53ef\u3002 \u5982\u679c\u4f60\u4e0d\u786e\u5b9a\u81ea\u5df1\u7684\u5b9e\u73b0\u662f\u5426\u201c\u8db3\u591f async/await\u201d\uff0c\u8bf7\u79ef\u6781\u8be2\u95ee\u52a9\u6559\u4eec\u3002","title":"async/await* 1'"},{"location":"lab3/#io_uring-2","text":"io_uring \u662f\u6700\u8fd1\u624d\u88ab\u5f15\u5165\u5185\u6838\u7684\u9ad8\u6548\u5f02\u6b65\u5b9e\u73b0\u3002\u548c\u4e0a\u9762\u7684\u51e0\u79cd\u65b9\u6cd5\u76f8\u6bd4\u4f7f\u7528 io_uring \u80fd\u591f\u5e26\u6765\u663e\u8457\u7684\u6027\u80fd\u63d0\u5347\u3002\u4e0d\u8fc7\u7531\u4e8e\u672c\u8eab\u662f\u8f83\u65b0\u7684\u6982\u5ff5\uff0c\u52a9\u6559\u4e5f\u6ca1\u6709\u5b8c\u6210\u793a\u4f8b\u4ee3\u7801\u3002\u4e00\u4e9b\u4f9b\u53c2\u8003\u7684\u8d44\u6599\uff1a \u4e00\u7bc7\u6587\u7ae0\u5e26\u4f60\u8bfb\u61c2 io_uring \u7684\u63a5\u53e3\u4e0e\u5b9e\u73b0 epoll \u4e0e io_uring \u670d\u52a1\u5668\u7f16\u7a0b\u5b9e\u8df5\u53ca\u5bf9\u6bd4 \u4ee5\u53ca liburing \u5e93\uff0c\u5b83\u5c01\u88c5\u4e86 io_uring \u7684 syscall\uff0c\u4f60\u5f88\u53ef\u80fd\u4f1a\u7528\u5230\u3002\u4e00\u4e9b\u57fa\u4e8e\u5b83\u5b9e\u73b0\u7684\u4f8b\u5b50\uff1a io_uring bare minimum echo server \u3001 liburing Examples \u3002 \u5982\u679c\u4f60\u5b9e\u73b0\u4e86\u8fd9\u4e00\u90e8\u5206\uff0c\u9664\u4e86\u5206\u6570\u4f60\u8fd8\u53ef\u4ee5\u8d62\u5f97\u52a9\u6559\u7684\u638c\u58f0\u3002","title":"io_uring* 2'"},{"location":"lab3/#\u5b9e\u9a8c\u8981\u6c42\u4e0e\u622a\u6b62\u65e5\u671f","text":"\u8bf7\u6309\u7167\u4ee5\u4e0b\u76ee\u5f55\u7ed3\u6784\u7ec4\u7ec7\u4f60\u7684 GitHub \u4ed3\u5e93\uff1a (Git) // Git \u4ed3\u5e93\u76ee\u5f55 \u251c\u2500\u2500 lab3 // \u5b9e\u9a8c\u4e09\u6839\u76ee\u5f55 \u2502 \u251c\u2500\u2500 1.c // \u5b8c\u5584\u540e\u7684\u53cc\u4eba\u804a\u5929\u5ba4\u7684\u6e90\u4ee3\u7801 \u2502 \u251c\u2500\u2500 2.c // \u57fa\u4e8e\u591a\u7ebf\u7a0b\u7684\u591a\u4eba\u804a\u5929\u5ba4\u7684\u6e90\u4ee3\u7801 \u2502 \u251c\u2500\u2500 3.c // \u57fa\u4e8e IO \u590d\u7528\u7684\u591a\u4eba\u804a\u5929\u5ba4\u7684\u6e90\u4ee3\u7801 \u2502 \u251c\u2500\u2500 4.c // \u57fa\u4e8e\u534f\u7a0b\u7684\u591a\u4eba\u804a\u5929\u5ba4\u7684\u6e90\u4ee3\u7801 \u2502 \u251c\u2500\u2500 5.c // \u57fa\u4e8e io_uring \u7684\u591a\u4eba\u804a\u5929\u5ba4\u7684\u6e90\u4ee3\u7801 \u2502 \u251c\u2500\u2500 Makefile // \uff08\u53ef\u9009\uff09\u4f60\u63d0\u4f9b\u7684 Makefile \u2502 \u2514\u2500\u2500 README.md // \u5b9e\u9a8c\u62a5\u544a \u251c\u2500\u2500 .gitignore \u2514\u2500\u2500 README.md \u5982\u679c\u4f60\u7684\u76ee\u5f55\u7ed3\u6784\u4e0e\u4e0a\u8ff0\u4e0d\u540c\uff0c\u5728 README \u4e2d\u8bf4\u660e\u5373\u53ef\u3002 \u672c\u6b21\u5b9e\u9a8c\u6ee1\u5206\u4e3a 14 \u5206\uff0c\u53ef\u83b7\u5f97\u7684\u5206\u6570\u4e3a 18 \u5206\uff0c\u6bcf\u4e2a\u5b9e\u73b0\u7684\u5206\u6570\u90fd\u5df2\u7ecf\u6807\u5728\u4e86\u6807\u9898\u540e\uff0c\u5176\u4e2d\u4e00\u90e8\u5206\u7684\u8fdb\u9636\u5b9e\u73b0\u5305\u542b\u4e86\u5bf9\u5e94\u7684\u666e\u901a\u5b9e\u73b0\u7684\u5206\u6570\uff08\u5728\u6587\u6863\u4e2d\u5df2\u53e6\u884c\u6807\u6ce8\uff09\u3002\u52a9\u6559\u5728\u8ba4\u4e3a\u6bd4\u8f83\u6709\u96be\u5ea6\u7684\u5b9e\u73b0\u540e\u52a0\u6ce8\u4e86*\u6807\u3002\u4f60\u53ea\u9700\u8981\u4ece\u4ee5\u4e0a\u9879\u76ee\u4e2d\u4efb\u9009\u51e0\u9879\u5b8c\u6210\uff0c\u8d85\u8fc7 14 \u5206\u7684\u90e8\u5206\u53ef\u4ee5\u586b\u8865\u672c\u5b9e\u9a8c\u5176\u4ed6\u9879\u76ee\u7684\u6263\u5206\uff0c\u4f60\u53ef\u4ee5\u591a\u62ff\u4e00\u4e9b\u5206\u6570\u6765\u8ba9\u7ed3\u679c\u66f4\u7a33\u4e00\u70b9\uff0c\u4f46\u603b\u5206\u4e0d\u4f1a\u8d85\u8fc7 14\u3002 \u6027\u80fd\u4e0d\u662f\u672c\u5b9e\u9a8c\u5173\u6ce8\u7684\u91cd\u70b9\uff0c\u53ea\u9700\u8981\u6b63\u786e\u5b9e\u73b0\u529f\u80fd\u5373\u53ef\u3002\u4e0e\u5b9e\u9a8c\u4e8c\u76f8\u4f3c\uff0c\u672c\u5b9e\u9a8c\u4e0d\u8981\u6c42\u5b9e\u9a8c\u62a5\u544a\uff0c\u4f46\u662f\u63a8\u8350\u7b80\u5355\u63cf\u8ff0\u4f60\u7684\u5b9e\u73b0\uff0c\u4ee5\u4f7f\u52a9\u6559\u80fd\u66f4\u597d\u5730\u7406\u89e3\u4f60\u7684\u4ee3\u7801\uff0c\u4ee5\u514d\u9020\u6210\u8bef\u89e3\u3002 \u672c\u5b9e\u9a8c\u622a\u6b62\u65e5\u671f\u4e3a 6 \u6708 2 \u65e5\u665a 23:59","title":"\u5b9e\u9a8c\u8981\u6c42\u4e0e\u622a\u6b62\u65e5\u671f"},{"location":"lab3/#\u5176\u4ed6\u8bf4\u660e","text":"\u672c\u5b9e\u9a8c\u53ef\u4ee5\u4f7f\u7528 C/C++/Rust \u8bed\u8a00\u5b8c\u6210\uff0c\u5982\u679c\u9700\u8981\u4f7f\u7528\u5176\u4ed6\u8bed\u8a00\u8bf7\u5148\u8be2\u95ee\u52a9\u6559\u3002 \u672c\u5b9e\u9a8c\u53ef\u4ee5\u4f7f\u7528 C/C++ \u7684\u6807\u51c6\u5e93\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u64cd\u4f5c\u7cfb\u7edf\u7684\u5e93\uff08\u5982 POSIX \u6807\u51c6\u5e93\u6216 Windows API\uff09\uff0c\u4f46\u9664\u4e86 await/async \u90e8\u5206\u5916\u5176\u4ed6\u90e8\u5206\u4e0d\u5f97\u4f7f\u7528\u4efb\u4f55\u7b2c\u4e09\u65b9\u7684\u7f51\u7edc\u5e93\u6216\u4e8b\u4ef6\u5904\u7406\u5e93\u3002\u4f7f\u7528\u6b64\u5904\u6ca1\u6709\u5217\u51fa\u7684\u5e93\u524d\u8bf7\u8be2\u95ee\u52a9\u6559\u3002","title":"\u5176\u4ed6\u8bf4\u660e"},{"location":"lab4/","text":"Lab4 \u00b6 \u5728\u672c\u6b21\u5b9e\u9a8c\u4e2d\uff0c\u6211\u4eec\u5c06\u4ece Ray\uff08\u8ba1\u7b97\u76f8\u5173\uff09\u548c Ceph\uff08\u5b58\u50a8\u76f8\u5173\uff09\u4e2d \u4e8c\u9009\u4e00 \u8fdb\u884c\u90e8\u7f72\u3001\u6d4b\u8bd5\u3001\u5206\u6790\u3001\u8bc4\u4ef7\u7b49\u5404\u9879\u5de5\u4f5c \u9009\u5b9a\u4e00\u4e2a\u4e0e\u9009\u9898\u5bf9\u5e94\u7684\u8ba1\u7b97\u7c7b/\u5b58\u50a8\u7c7b\u6d4b\u8bd5\u4efb\u52a1\uff081 \u5206\uff09\u3002Ceph \u81ea\u5e26\u6d4b\u8bd5\u6a21\u5757\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u3002Ray \u9700\u8981\u81ea\u884c\u8bbe\u8ba1\u6d4b\u8bd5\u8fc7\u7a0b\uff0c\u53ef\u4ee5\u53c2\u8003\u5176\u81ea\u5e26\u5c11\u90e8\u5206\u6837\u4f8b\u3002\u4ea6\u53ef\u9009\u62e9\u5176\u4ed6\u7b2c\u4e09\u65b9\u6d4b\u8bd5\u5de5\u5177\u3002 \u62df\u5b9a\u4e00\u4efd\u8ba1\u7b97\u7c7b/\u5b58\u50a8\u7c7b\u5bf9\u5e94\u7684\u6027\u80fd\u6307\u6807\u5217\u8868\uff08\u4e0d\u5c11\u4e8e 5 \u4e2a\u6307\u6807\uff0c\u5982\u5ef6\u8fdf\u3001IOPS \u7b49\uff09\uff0c\u6839\u636e\u6d4b\u8bd5\u4efb\u52a1\uff0c\u4ece\u4e2d\u9009\u62e9\u81f3\u5c11\u4e24\u4e2a\u6307\u6807\u8fdb\u884c\u540e\u7eed\u6d4b\u8bd5\uff0c\u5e76\u8bf4\u660e\u6240\u9009\u6307\u6807\u7684\u5408\u7406\u6027\uff081 \u5206\uff09\u3002 \u5b8c\u6210\u5355\u673a\u7248\u90e8\u7f72\u5e76\u8fdb\u884c\u6027\u80fd\u6d4b\u8bd5\uff085 \u5206\uff09\u3002 \u57fa\u4e8e\u5df2\u6709\u90e8\u7f72\u8fdb\u884c\u5206\u6790\uff0c\u8fdb\u884c\u6d4b\u8bd5\u548c\u4f18\u5316\uff082 \u5206\uff09\u3002\u4f18\u5316\u4ee5 Ray \u6216 Ceph \u672c\u8eab\u7684\u914d\u7f6e\u53c2\u6570\u4fee\u6539\u4e3a\u4e3b\uff0c\u4e0d\u5fc5\u4fee\u6539\u5e95\u5c42\u7cfb\u7edf\u73af\u5883\uff0c\u4f46\u9700\u7ed9\u51fa\u76f8\u5e94\u5206\u6790\u3002\u63d0\u4f9b\u622a\u56fe\u8bf4\u660e\u5355\u673a\u4f18\u5316\u540e\u6027\u80fd\u8f83\u521d\u59cb\u90e8\u7f72\u63d0\u9ad8 20%\uff081 \u5206\uff09\u3002 \u5b8c\u6210\u5206\u5e03\u5f0f\u90e8\u7f72\u5e76\u8fdb\u884c\u6027\u80fd\u6d4b\u8bd5\uff081 \u5206\uff09\u3002 \u57fa\u4e8e Docker \u5b8c\u6210\u5206\u5e03\u5f0f\u90e8\u7f72\u5e76\u8fdb\u884c\u6027\u80fd\u6d4b\u8bd5\uff081 \u5206\uff09\u3002 \u5c06\u64b0\u5199\u7684\u76f8\u5173\u62a5\u544a\u53d1\u5e03\u5230\u516c\u5f00\u5a92\u4f53\uff0c\u5982 CSDN\u3001\u77e5\u4e4e\u6216\u662f\u81ea\u5df1\u7684\u535a\u5ba2\u3001channel\uff081 \u5206\uff09\u3002 \u5b9e\u9a8c\u8981\u6c42\u4e0e DDL \u00b6 \u672c\u6b21\u5b9e\u9a8c\u4ee5\u5927\u4f5c\u4e1a\u5206\u7ec4\u4e3a\u5355\u4f4d\u5b8c\u6210\uff0c\u6bcf\u7ec4\u63d0\u4ea4\u4e00\u4efd\u90e8\u7f72\u8bf4\u660e\u6587\u6863\uff0c\u4e00\u4efd\u6027\u80fd\u6d4b\u8bd5\u548c\u5206\u6790\u6587\u6863\uff08\u82e5\u6709\u4f18\u5316\u8bbe\u8ba1\u66f4\u597d\uff09\uff0c\u5e76\u7ed9\u51fa\u6709\u6570\u636e\u652f\u6491\u7684\u4f18\u7f3a\u70b9\u8bc4\u4ef7\uff0c\u65e0\u9700\u63d0\u4ea4\u4ee3\u7801\uff0c\u6587\u6863\u6587\u4ef6\u547d\u540d\u4e0d\u9650\u5236 \u672c\u6b21\u5b9e\u9a8c\u6ee1\u5206 12 \u5206\u3002\u6240\u83b7\u603b\u5206\u5982\u679c\u9ad8\u4e8e 12 \u5206\uff0c\u5c06\u88ab\u622a\u65ad\u4e3a 12 \u5206\u3002 \u6b64\u6b21\u5b9e\u9a8c\u622a\u81f3\u65f6\u95f4\u4e3a 7 \u6708 3 \u65e5 23:59\u3002 \u76f8\u5173\u8d44\u6599 \u00b6 Ray \u7684\u76f8\u5173\u4ecb\u7ecd\uff1ahttps://zhuanlan.zhihu.com/p/399209343 Ray \u662f\u4f2f\u514b\u5229\u5927\u5b66 RISELab \u7814\u53d1\u7684\u5206\u5e03\u5f0f\u8ba1\u7b97\u7cfb\u7edf\uff0c\u6211\u613f\u79f0\u4e4b\u4e3a\u201cAI \u65f6\u4ee3\u7684 Spark\u201d\u3002 \u6309\u7167\u5b98\u65b9\u6587\u6863\u7684\u8bf4\u6cd5\uff1a Ray provides a simple, universal API for building distributed a>pplications. \u4e3a\u4ec0\u4e48\u8bf4 Ray \u662f\u4e00\u4e2a\u7b80\u5355\u9ad8\u6548\u7684\u5206\u5e03\u5f0f\u8ba1\u7b97\u5f15\u64ce\u5462\uff1f\u5b83\u4e3b\u8981\u6709\u4ee5\u4e0b\u7684\u7279\u70b9\uff1a \u63d0\u4f9b\u4e00\u79cd\u80fd\u591f\u6784\u5efa\u3001\u8fd0\u884c\u5206\u5e03\u5f0f\u5e94\u7528\u7a0b\u5e8f\u7684 simple primitives\uff1b \u4ece\u5355\u673a\u6269\u5c55\u5230\u5e73\u884c\uff0c\u51e0\u4e4e\u4e0d\u9700\u8981\u6539\u4ee3\u7801\uff1b \u62e5\u6709\u826f\u597d\u7684\u751f\u6001\uff0c\u80fd\u591f\u5728 core Ray \u4e0a\u6784\u5efa\u590d\u6742\u7684\u5e94\u7528\u7a0b\u5e8f\u3002 \u6211\u4eec\u8bf4 Ray \u80fd\u591f\u8ba9\u5f00\u53d1\u8005\u8f7b\u677e\u7684\u6784\u5efa\u5206\u5e03\u5f0f\u53d8\u6210\uff0c\u9760\u7684\u662f\u4e24\u6837\u6cd5\u5b9d\uff08\u8ba1\u7b97\u539f\u8bed\uff09\uff1a Task\uff1a\u4e00\u4e2a\u65e0\u72b6\u6001\u7684\u8ba1\u7b97\u4efb\u52a1\uff08\u51fd\u6570\u8868\u793a\uff09\u3002Ray \u5141\u8bb8\u5f02\u6b65\u6267\u884c\u4efb\u610f\u51fd\u6570\u3002\u8fd9\u4e9b\u201cremote function\u201d\uff08Task\uff09\u7684\u5f00\u9500\u975e\u5e38\u4f4e\uff0c\u53ef\u4ee5\u5728\u6beb\u79d2\u5185\u6267\u884c\uff0c\u5e76\u4e14\u53ef\u4ee5\u81ea\u52a8\u5411\u96c6\u7fa4\u6dfb\u52a0\u8282\u70b9\u5e76\u8c03\u5ea6\u4efb\u52a1\uff0c\u975e\u5e38\u9002\u5408\u6269\u5c55\u8ba1\u7b97\u5bc6\u96c6\u578b\u5e94\u7528\u7a0b\u5e8f\u548c\u670d\u52a1\u3002 Actor\uff1a\u4e00\u4e2a\u6709\u72b6\u6001\u7684\u8ba1\u7b97\u4efb\u52a1\uff08\u7c7b\u8868\u793a\uff09\u3002Actor \u6a21\u578b\u662f\u4e00\u4e2a\u5f3a\u5927\u7684\u5f02\u6b65\u7f16\u7a0b\u8303\u4f8b\uff08\u652f\u6301\u5fae\u670d\u52a1\uff09\uff0c\u53ef\u4ee5\u5728\u672c\u5730\u548c\u8fdc\u7a0b\u65e0\u7f1d\u5de5\u4f5c\u3002Actor \u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u6709\u72b6\u6001\u7684 Worker\uff08\u6216 service\uff09\u3002\u5f53\u4e00\u4e2a\u65b0\u7684 Actor \u88ab\u5b9e\u4f8b\u5316\u65f6\uff0c\u5c31\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 Worker\uff0c\u5e76\u5c06\u8be5 Actor \u7684\u65b9\u6cd5\u8c03\u5ea6\u5230\u8fd9\u4e2a\u7279\u5b9a\u7684 Worker\uff0c\u4e5f\u53ef\u4ee5\u5bf9 Worker \u7684\u72b6\u6001\u8fdb\u884c\u8bbf\u95ee\u548c\u4fee\u6539\u3002 Ceph \u7684\u76f8\u5173\u4ecb\u7ecd\uff1ahttps://github.com/OSH-2021/osh-2021.github.io/tree/main/lab-4 Ceph \u662f Dr. Sage Weil \u5728\u5176\u535a\u58eb\u6bd5\u4e1a\u8bba\u6587\u4e2d\u8bbe\u8ba1\u7684\u5f00\u6e90\u5206\u5e03\u5f0f\u5b58\u50a8\u6587\u4ef6\u7cfb\u7edf\uff0c\u7ecf\u8fc7\u4e0d\u65ad\u5730\u53d1\u5c55\uff0c\u66f4\u591a\u65b0\u7684\u7279\u6027\u88ab\u52a0\u5165\u5230\u5f53\u4e2d\u6765\u300214 \u5e74 Ceph \u88ab Redhat \u516c\u53f8\u6536\u8d2d\uff0c\u5982\u4eca\u5df2\u7ecf\u88ab\u5e7f\u6cdb\u7528\u4f5c\u540e\u7aef\u5b58\u50a8\u7cfb\u7edf\u4e3a\u4e0a\u5c42\u5e94\u7528\u63d0\u4f9b\u652f\u6301\u3002\u8be5\u7cfb\u7edf\u88ab\u671f\u671b\u8bbe\u8ba1\u4e3a\u6ca1\u6709\u5355\u70b9\u6545\u969c\u7684\u5b8c\u5168\u5206\u5e03\u5f0f\u5b58\u50a8\u7cfb\u7edf\uff0c\u4f7f\u6570\u636e\u80fd\u5bb9\u9519\u548c\u65e0\u7f1d\u7684\u590d\u5236\uff0c\u53ef\u6269\u5c55\u81f3 EB \u6c34\u5e73(EB, PB, TB, GB)\u3002Ceph \u6452\u5f03\u4e86\u4f20\u7edf\u7684\u96c6\u4e2d\u5f0f\u5143\u6570\u636e\u5bfb\u5740\u65b9\u6848\uff0c\u53d6\u800c\u4ee3\u4e4b\u662f\u4f7f\u7528 CRUSH(Controlled Replication Under Scalable Hashing)\u7b97\u6cd5\u8fdb\u884c\u6570\u636e\u5bfb\u5740\u64cd\u4f5c\uff0cCRUSH \u5728\u4e00\u81f4\u6027\u54c8\u5e0c\u57fa\u7840\u4e0a\u5f88\u597d\u5730\u5b9e\u73b0\u4e86\u5bb9\u707e\u9694\u79bb\uff0c\u673a\u67b6\u611f\u77e5\u3002\u6269\u5c55\u6027\u5f3a\uff0c\u7406\u8bba\u4e0a\u652f\u6301\u4e0a\u5343\u4e2a\u5b58\u50a8\u8282\u70b9\u3002Ceph \u652f\u6301\u5bf9\u8c61\u5b58\u50a8\uff0c\u5757\u5b58\u50a8\u548c\u6587\u4ef6\u5b58\u50a8\uff0c\u652f\u6301\u81ea\u5b9a\u4e49\u63a5\u53e3\uff0c\u591a\u8bed\u8a00\u9a71\u52a8\uff0c\u540c\u65f6\u5176\u53bb\u4e2d\u5fc3\u5316\u7684\u8bbe\u8ba1\u5b9e\u73b0\u4e86\u9ad8\u53ef\u6269\u5c55\u6027\uff0c\u526f\u672c\u6570\u91cf\u7075\u6d3b\u63a7\u5236\u5b9e\u73b0\u5728\u4e0d\u540c\u573a\u666f\u4e0b\u7684\u9ad8\u53ef\u7528\u6027\u3002\u5176\u57fa\u672c\u7ec4\u4ef6\u5982\u4e0b\uff1a","title":"\u5b9e\u9a8c\u56db"},{"location":"lab4/#lab4","text":"\u5728\u672c\u6b21\u5b9e\u9a8c\u4e2d\uff0c\u6211\u4eec\u5c06\u4ece Ray\uff08\u8ba1\u7b97\u76f8\u5173\uff09\u548c Ceph\uff08\u5b58\u50a8\u76f8\u5173\uff09\u4e2d \u4e8c\u9009\u4e00 \u8fdb\u884c\u90e8\u7f72\u3001\u6d4b\u8bd5\u3001\u5206\u6790\u3001\u8bc4\u4ef7\u7b49\u5404\u9879\u5de5\u4f5c \u9009\u5b9a\u4e00\u4e2a\u4e0e\u9009\u9898\u5bf9\u5e94\u7684\u8ba1\u7b97\u7c7b/\u5b58\u50a8\u7c7b\u6d4b\u8bd5\u4efb\u52a1\uff081 \u5206\uff09\u3002Ceph \u81ea\u5e26\u6d4b\u8bd5\u6a21\u5757\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u3002Ray \u9700\u8981\u81ea\u884c\u8bbe\u8ba1\u6d4b\u8bd5\u8fc7\u7a0b\uff0c\u53ef\u4ee5\u53c2\u8003\u5176\u81ea\u5e26\u5c11\u90e8\u5206\u6837\u4f8b\u3002\u4ea6\u53ef\u9009\u62e9\u5176\u4ed6\u7b2c\u4e09\u65b9\u6d4b\u8bd5\u5de5\u5177\u3002 \u62df\u5b9a\u4e00\u4efd\u8ba1\u7b97\u7c7b/\u5b58\u50a8\u7c7b\u5bf9\u5e94\u7684\u6027\u80fd\u6307\u6807\u5217\u8868\uff08\u4e0d\u5c11\u4e8e 5 \u4e2a\u6307\u6807\uff0c\u5982\u5ef6\u8fdf\u3001IOPS \u7b49\uff09\uff0c\u6839\u636e\u6d4b\u8bd5\u4efb\u52a1\uff0c\u4ece\u4e2d\u9009\u62e9\u81f3\u5c11\u4e24\u4e2a\u6307\u6807\u8fdb\u884c\u540e\u7eed\u6d4b\u8bd5\uff0c\u5e76\u8bf4\u660e\u6240\u9009\u6307\u6807\u7684\u5408\u7406\u6027\uff081 \u5206\uff09\u3002 \u5b8c\u6210\u5355\u673a\u7248\u90e8\u7f72\u5e76\u8fdb\u884c\u6027\u80fd\u6d4b\u8bd5\uff085 \u5206\uff09\u3002 \u57fa\u4e8e\u5df2\u6709\u90e8\u7f72\u8fdb\u884c\u5206\u6790\uff0c\u8fdb\u884c\u6d4b\u8bd5\u548c\u4f18\u5316\uff082 \u5206\uff09\u3002\u4f18\u5316\u4ee5 Ray \u6216 Ceph \u672c\u8eab\u7684\u914d\u7f6e\u53c2\u6570\u4fee\u6539\u4e3a\u4e3b\uff0c\u4e0d\u5fc5\u4fee\u6539\u5e95\u5c42\u7cfb\u7edf\u73af\u5883\uff0c\u4f46\u9700\u7ed9\u51fa\u76f8\u5e94\u5206\u6790\u3002\u63d0\u4f9b\u622a\u56fe\u8bf4\u660e\u5355\u673a\u4f18\u5316\u540e\u6027\u80fd\u8f83\u521d\u59cb\u90e8\u7f72\u63d0\u9ad8 20%\uff081 \u5206\uff09\u3002 \u5b8c\u6210\u5206\u5e03\u5f0f\u90e8\u7f72\u5e76\u8fdb\u884c\u6027\u80fd\u6d4b\u8bd5\uff081 \u5206\uff09\u3002 \u57fa\u4e8e Docker \u5b8c\u6210\u5206\u5e03\u5f0f\u90e8\u7f72\u5e76\u8fdb\u884c\u6027\u80fd\u6d4b\u8bd5\uff081 \u5206\uff09\u3002 \u5c06\u64b0\u5199\u7684\u76f8\u5173\u62a5\u544a\u53d1\u5e03\u5230\u516c\u5f00\u5a92\u4f53\uff0c\u5982 CSDN\u3001\u77e5\u4e4e\u6216\u662f\u81ea\u5df1\u7684\u535a\u5ba2\u3001channel\uff081 \u5206\uff09\u3002","title":"Lab4"},{"location":"lab4/#\u5b9e\u9a8c\u8981\u6c42\u4e0e-ddl","text":"\u672c\u6b21\u5b9e\u9a8c\u4ee5\u5927\u4f5c\u4e1a\u5206\u7ec4\u4e3a\u5355\u4f4d\u5b8c\u6210\uff0c\u6bcf\u7ec4\u63d0\u4ea4\u4e00\u4efd\u90e8\u7f72\u8bf4\u660e\u6587\u6863\uff0c\u4e00\u4efd\u6027\u80fd\u6d4b\u8bd5\u548c\u5206\u6790\u6587\u6863\uff08\u82e5\u6709\u4f18\u5316\u8bbe\u8ba1\u66f4\u597d\uff09\uff0c\u5e76\u7ed9\u51fa\u6709\u6570\u636e\u652f\u6491\u7684\u4f18\u7f3a\u70b9\u8bc4\u4ef7\uff0c\u65e0\u9700\u63d0\u4ea4\u4ee3\u7801\uff0c\u6587\u6863\u6587\u4ef6\u547d\u540d\u4e0d\u9650\u5236 \u672c\u6b21\u5b9e\u9a8c\u6ee1\u5206 12 \u5206\u3002\u6240\u83b7\u603b\u5206\u5982\u679c\u9ad8\u4e8e 12 \u5206\uff0c\u5c06\u88ab\u622a\u65ad\u4e3a 12 \u5206\u3002 \u6b64\u6b21\u5b9e\u9a8c\u622a\u81f3\u65f6\u95f4\u4e3a 7 \u6708 3 \u65e5 23:59\u3002","title":"\u5b9e\u9a8c\u8981\u6c42\u4e0e DDL"},{"location":"lab4/#\u76f8\u5173\u8d44\u6599","text":"Ray \u7684\u76f8\u5173\u4ecb\u7ecd\uff1ahttps://zhuanlan.zhihu.com/p/399209343 Ray \u662f\u4f2f\u514b\u5229\u5927\u5b66 RISELab \u7814\u53d1\u7684\u5206\u5e03\u5f0f\u8ba1\u7b97\u7cfb\u7edf\uff0c\u6211\u613f\u79f0\u4e4b\u4e3a\u201cAI \u65f6\u4ee3\u7684 Spark\u201d\u3002 \u6309\u7167\u5b98\u65b9\u6587\u6863\u7684\u8bf4\u6cd5\uff1a Ray provides a simple, universal API for building distributed a>pplications. \u4e3a\u4ec0\u4e48\u8bf4 Ray \u662f\u4e00\u4e2a\u7b80\u5355\u9ad8\u6548\u7684\u5206\u5e03\u5f0f\u8ba1\u7b97\u5f15\u64ce\u5462\uff1f\u5b83\u4e3b\u8981\u6709\u4ee5\u4e0b\u7684\u7279\u70b9\uff1a \u63d0\u4f9b\u4e00\u79cd\u80fd\u591f\u6784\u5efa\u3001\u8fd0\u884c\u5206\u5e03\u5f0f\u5e94\u7528\u7a0b\u5e8f\u7684 simple primitives\uff1b \u4ece\u5355\u673a\u6269\u5c55\u5230\u5e73\u884c\uff0c\u51e0\u4e4e\u4e0d\u9700\u8981\u6539\u4ee3\u7801\uff1b \u62e5\u6709\u826f\u597d\u7684\u751f\u6001\uff0c\u80fd\u591f\u5728 core Ray \u4e0a\u6784\u5efa\u590d\u6742\u7684\u5e94\u7528\u7a0b\u5e8f\u3002 \u6211\u4eec\u8bf4 Ray \u80fd\u591f\u8ba9\u5f00\u53d1\u8005\u8f7b\u677e\u7684\u6784\u5efa\u5206\u5e03\u5f0f\u53d8\u6210\uff0c\u9760\u7684\u662f\u4e24\u6837\u6cd5\u5b9d\uff08\u8ba1\u7b97\u539f\u8bed\uff09\uff1a Task\uff1a\u4e00\u4e2a\u65e0\u72b6\u6001\u7684\u8ba1\u7b97\u4efb\u52a1\uff08\u51fd\u6570\u8868\u793a\uff09\u3002Ray \u5141\u8bb8\u5f02\u6b65\u6267\u884c\u4efb\u610f\u51fd\u6570\u3002\u8fd9\u4e9b\u201cremote function\u201d\uff08Task\uff09\u7684\u5f00\u9500\u975e\u5e38\u4f4e\uff0c\u53ef\u4ee5\u5728\u6beb\u79d2\u5185\u6267\u884c\uff0c\u5e76\u4e14\u53ef\u4ee5\u81ea\u52a8\u5411\u96c6\u7fa4\u6dfb\u52a0\u8282\u70b9\u5e76\u8c03\u5ea6\u4efb\u52a1\uff0c\u975e\u5e38\u9002\u5408\u6269\u5c55\u8ba1\u7b97\u5bc6\u96c6\u578b\u5e94\u7528\u7a0b\u5e8f\u548c\u670d\u52a1\u3002 Actor\uff1a\u4e00\u4e2a\u6709\u72b6\u6001\u7684\u8ba1\u7b97\u4efb\u52a1\uff08\u7c7b\u8868\u793a\uff09\u3002Actor \u6a21\u578b\u662f\u4e00\u4e2a\u5f3a\u5927\u7684\u5f02\u6b65\u7f16\u7a0b\u8303\u4f8b\uff08\u652f\u6301\u5fae\u670d\u52a1\uff09\uff0c\u53ef\u4ee5\u5728\u672c\u5730\u548c\u8fdc\u7a0b\u65e0\u7f1d\u5de5\u4f5c\u3002Actor \u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u6709\u72b6\u6001\u7684 Worker\uff08\u6216 service\uff09\u3002\u5f53\u4e00\u4e2a\u65b0\u7684 Actor \u88ab\u5b9e\u4f8b\u5316\u65f6\uff0c\u5c31\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 Worker\uff0c\u5e76\u5c06\u8be5 Actor \u7684\u65b9\u6cd5\u8c03\u5ea6\u5230\u8fd9\u4e2a\u7279\u5b9a\u7684 Worker\uff0c\u4e5f\u53ef\u4ee5\u5bf9 Worker \u7684\u72b6\u6001\u8fdb\u884c\u8bbf\u95ee\u548c\u4fee\u6539\u3002 Ceph \u7684\u76f8\u5173\u4ecb\u7ecd\uff1ahttps://github.com/OSH-2021/osh-2021.github.io/tree/main/lab-4 Ceph \u662f Dr. Sage Weil \u5728\u5176\u535a\u58eb\u6bd5\u4e1a\u8bba\u6587\u4e2d\u8bbe\u8ba1\u7684\u5f00\u6e90\u5206\u5e03\u5f0f\u5b58\u50a8\u6587\u4ef6\u7cfb\u7edf\uff0c\u7ecf\u8fc7\u4e0d\u65ad\u5730\u53d1\u5c55\uff0c\u66f4\u591a\u65b0\u7684\u7279\u6027\u88ab\u52a0\u5165\u5230\u5f53\u4e2d\u6765\u300214 \u5e74 Ceph \u88ab Redhat \u516c\u53f8\u6536\u8d2d\uff0c\u5982\u4eca\u5df2\u7ecf\u88ab\u5e7f\u6cdb\u7528\u4f5c\u540e\u7aef\u5b58\u50a8\u7cfb\u7edf\u4e3a\u4e0a\u5c42\u5e94\u7528\u63d0\u4f9b\u652f\u6301\u3002\u8be5\u7cfb\u7edf\u88ab\u671f\u671b\u8bbe\u8ba1\u4e3a\u6ca1\u6709\u5355\u70b9\u6545\u969c\u7684\u5b8c\u5168\u5206\u5e03\u5f0f\u5b58\u50a8\u7cfb\u7edf\uff0c\u4f7f\u6570\u636e\u80fd\u5bb9\u9519\u548c\u65e0\u7f1d\u7684\u590d\u5236\uff0c\u53ef\u6269\u5c55\u81f3 EB \u6c34\u5e73(EB, PB, TB, GB)\u3002Ceph \u6452\u5f03\u4e86\u4f20\u7edf\u7684\u96c6\u4e2d\u5f0f\u5143\u6570\u636e\u5bfb\u5740\u65b9\u6848\uff0c\u53d6\u800c\u4ee3\u4e4b\u662f\u4f7f\u7528 CRUSH(Controlled Replication Under Scalable Hashing)\u7b97\u6cd5\u8fdb\u884c\u6570\u636e\u5bfb\u5740\u64cd\u4f5c\uff0cCRUSH \u5728\u4e00\u81f4\u6027\u54c8\u5e0c\u57fa\u7840\u4e0a\u5f88\u597d\u5730\u5b9e\u73b0\u4e86\u5bb9\u707e\u9694\u79bb\uff0c\u673a\u67b6\u611f\u77e5\u3002\u6269\u5c55\u6027\u5f3a\uff0c\u7406\u8bba\u4e0a\u652f\u6301\u4e0a\u5343\u4e2a\u5b58\u50a8\u8282\u70b9\u3002Ceph \u652f\u6301\u5bf9\u8c61\u5b58\u50a8\uff0c\u5757\u5b58\u50a8\u548c\u6587\u4ef6\u5b58\u50a8\uff0c\u652f\u6301\u81ea\u5b9a\u4e49\u63a5\u53e3\uff0c\u591a\u8bed\u8a00\u9a71\u52a8\uff0c\u540c\u65f6\u5176\u53bb\u4e2d\u5fc3\u5316\u7684\u8bbe\u8ba1\u5b9e\u73b0\u4e86\u9ad8\u53ef\u6269\u5c55\u6027\uff0c\u526f\u672c\u6570\u91cf\u7075\u6d3b\u63a7\u5236\u5b9e\u73b0\u5728\u4e0d\u540c\u573a\u666f\u4e0b\u7684\u9ad8\u53ef\u7528\u6027\u3002\u5176\u57fa\u672c\u7ec4\u4ef6\u5982\u4e0b\uff1a","title":"\u76f8\u5173\u8d44\u6599"},{"location":"x/","text":"\u5927\u4f5c\u4e1a \u00b6 \u6682\u65e0","title":"\u5927\u4f5c\u4e1a"},{"location":"x/#\u5927\u4f5c\u4e1a","text":"\u6682\u65e0","title":"\u5927\u4f5c\u4e1a"}]}